exit
which python
exit()
print "Help"
print("Help")
version
exit()
5/3
exit()
import email
dir(email)
exit()
print("Gregec OJLA!")
inpor sys
inport sys
import sys
dir(sys)
sys.getfilesystemencoding()
exit
exit()
print("ƒçebula")
exit()
D1 = {'name' : 'gregor',
      'surname' : 'Redelonghi',
      'street_name' : 'Valvasorjeva ulica',
      'street_num' : '5',
      'gsm' : '051/315-307',
      'c_phone' : '01/5889-658',
      'company' : 'ENERGETIKA LJUBLJANA, d.o.o.'
}
D1
D1_list = D1.items()
print(D1_list)
print(D1_list[3][1])
print(D1_list[3])
D1_i = D1.items()
D1_i
print(D1_i)
D1_k = D1.keys()
print(D1_k)
print(D1_k[1])
print(D1_k)
D1
D2 = D1.items()
D2
exit
exit()
D1 = {
'ime' : 'Gregor',
'priimek' : 'Redelonghi',
'naslov' : 'Valvasorjeva ulic 5',
'kraj' : '1000 Ljubljana'
}
D1
print(D1.items())
print(list(D1.items()))
D1K 0 D1.keys()
D1K = D1.keys()
D1V = D1.values()
print(D1K)
list(D1K)
list(D1V)
for k, v in list(D1K), list(D1V):
	print("Key: ", k)
	print("Value: ", v)
for k, v in D1.items():
	print("Key: ", k)
	print("Value: ", v)
for k, v in D1.items():
	print("Value: ", v, end='')
	print("Key: ", k)
for k, v in D1.items():
	print("Key: ", k, end='')
for k, v in D1.items():
	print("Key: ", k, end='')
	print("Value: ", v)
for k, v in D1.items():
	print("Key: ", k, end='')
	print("; Value: ", v)
exit()
f = open(fyjl.01.txt, r)
f = open('fajl.01.txt', r)
f = open('fajl.01.txt', 'r')
f.read()
f.readlines()
f.mode
f.name
fd = f.read()
print fd
print(fd)
fd = f.read()
print(fd)
f.read()
f.name
f.close()
f = open('fajl.01.txt', 'r')
f.read()
fd = f.read()
print(fd)
print fd
print(f.read())
f.mode
f.open
f.opened
f.closed
f.read()
f.close()
f = open('fajl.01.txt', 'r')
f.read()
list(f.read())
list(f.read(), '\n')
f.read()
f.close()
f = open('fajl.01.txt', 'r')
f.read()
len(f.read())
f.close()
f = open('fajl.01.txt', 'r')
len(f.read())
f.close()
f = open('fajl.01.txt', 'r+')
f.read()
len(f.read())
f.close()
f = open('fajl.01.txt', 'r+')
fd = f.read()
print(fd)
f.read()
f = open('fajl.01.txt', 'r+')
fl = f.readline()
print(fl)
len(f)
len(f.read())
f = open('fajl.01.txt', 'r+')
fr = f.read()
len (fr)
fl = f.readline()
print(fl)
fr = f.read()
print(fr)
f = open('fajl.01.txt', 'r+')
fr = f.read()
print(fr)
print(fl)
print(fr)
fl = f.readline()
print(fr)
print(fl)
print(fr)
fl = f.readline()
print(fl)
fl = f.readline()
print(fl)
print(fr)
f.close()
f = open('fajl.01.txt', 'r+')
fl = f.readline()
print(fl)
fl = f.readline()
print(fl)
fl = f.readline()
print(fl)
fr = f.read()
print(fr)
f.seek(0)
print(fr)
f.tell()
f.read()
f.seek(0)
f.read()
f.seek(0)
print(fr)
fr.seek(0)
f.seek(0)
f.tell()
fr = f.read()
print(fr)
f.seek(20)
f.seek(20)
f.tell()
fr = f.read()
print(fr)
f.seek()
f.seek(0)
fr = f.read()
print(fr)
f.split('\n')
L = list(f)
L
L = list(f.read())
L
f.read()
f.seek(0)
L = list(f.read())
L
f.seek(0)
L = split(f.read(), '\n')
P = '\n'.join(L)
P
print(fr)
print(L)
P = L.join(" ")
L
print(L.join(" "))
L
" ".join(L)
"".join(L)
L
L.split('\n')
str(L).split('\n')
str(L)
L
V = "".join(L)
V
V.splt('\n?')
V.splt('\n')
V.spilt('\n')
V.split('\n')
exit()
D = {}
for L in file('pari.txt'):
	k, v = L.split()
	D[k] = int(v)
import file
exit
exit()
for L in open('pari.txt', 'r'):
	k, v 0 L.split()
for L in open('pari.txt', 'r'):
	k, v = L.split()
D={}
D
for L in open('pari.txt', 'r'):
	k, v = L.split()
	D[k] = int(v)
D
dir{dict())
dir(dict())
pype(dict())
type(dict())
help(dict())
help(split())
help(.split())
dir(split())
help(split())
help(dir())
help(open())
help(file.open())
help(open(file))
help(open('pari.txt'))
help(open('filename'))
help(open('pari', 'r'))
help(open('pari.txt', 'r'))
help(list().split())
help(list.split())
help([].split())
help(split())
help(split)
help(split())
help(D)
L=[]
help(L)
S = "Aleluje\nHere she comes.\nOh Yeah!"
S
S.split()
help(S.split())
help(S.split)
help(split)
help(str().split)
S.split(sep='\n')
L1 = S.split(sep='\n')
Lq
L1
L1[0] = 'Allelluya!'
L1
L1[0] = 'Allellouya!'
L1
for ln in L1:
	print ln
for ln in L1:
	print(ln)
for ln in L1:
	print(str(ln) + "\n\n")
	print(str(ln) + "\n\t")
for ln in L1:
	print(str(ln) + "\n\t")
	print(str(ln), "\n\t")
	print(str(ln) + "\n\t")
for ln in L1:
	print(str(ln) + "\n")
	print("\n", end='')
for ln in L1:
	print(str(ln) + "\n\t", end='')
for ln in L1:
	print(str(ln) + "\n")
	print("\n\t", end='')
for ln in L1:
	print("\n\t", end='')
	print("\t", end='')
for ln in L1:
	print(str(ln) + "\n")
	print("\t", end='')
for ln in L1:
	print(str(ln) + "\n", end='')
	print("\t", end='')
for ln in L1:
	print(str(ln) + "\n\t", end='')
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9];
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	print(str(N) + "\n", end='')
	print(str(N), end='')
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	print(str(N), end='')
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	print(str(N), end='')
print(,end="\n")
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	print(str(N), end='')
print("", end="\n")
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	print(str(N), end='')
print()
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	print(str(N), end='')
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	print(str(ln) + "\n\t", end='')
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	print(str(N), end='')
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	print(str(N) + "\n")
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	print(str(N))
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	print(str(N))
print("\nDone!\n")
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	print(str(N))
print("Done")
for N in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	print(str(N))
L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(L)
for NUM in range(len(L)):
	print(L[NUM])
for NUM in range((len(L)/2):
for NUM in range((len(L)/2)):
	print(L[NUM])
for NUM in range((len(L)/2)):
	print(L[int(NUM)])
for NUM in range((int(len(L)/2))):
	print(L[NUM])
exit()
import osnovna
L0
import * from osnovna
from osnovna import *
L0
D0
exit()
from osnovna import *
S0
S1
S1.split(sep=',')
S1.split()
S1.split(sep=',')
S1.replace()
S1.replace(','n '')
S1.replace(',', '')
S1.replace(',', '').split()
LL = S1.replace(',', '').split()
LL
for SS in LL.item():
	print(SS)
for SS in LL:
	print(SS)
SS
LL
", ".join(LL)
",\t".join(LL)
print(",\t".join(LL))
exit
exit()
version
help()
version
exizt()
exit
exit()
exit
python2
exit
exit()
import this
L = []
L.append=['gREGOR','Tadeja','Zala','Mark','Spela']
L.expand=['gREGOR','Tadeja','Zala','Mark','Spela']
L.extend=['gREGOR','Tadeja','Zala','Mark','Spela']
L.append('gREGOR','Tadeja','Zala','Mark','Spela')
L.extend(['gREGOR','Tadeja','Zala','Mark','Spela'])
L
L.append(['Gregor','Redelonghi'])
L
L.delete[0]
L.remove[0]
dir(L)
help(L.remove)
L.remove(L[0])
L
L.extend(['Mali Redelonghi', '... tamala ...', 'Angelcek', 'BBoy'])
L
len(L)
L.remove(L[-5])
L
print('\n'.join(L))
print('\n\t'.join(L))
print('\n'.join(L))
K = '\n'.join(L)
K
print(K)
N = '''
Gregor
Redelonghi
in
Tadeja
Mali Redelonghi
'''
N
print(N)
list(N)
help(list())
N
help(string)
N
help(list(N))
N2 = N.split('\n')
N2
N2.remove(N2[-1])
N2
N2.remove(N2[5])
N2
exit()
class Dog:
	def __init__(self, name):
		self.name = name
class Dog:
	def __init__(self, name):
		self.name = name
	def add_trick(self, trick):
		self.tricks.append(trick)
d = Dog('Fido')
e = Dog('Buddy')
d.add_trick('roll over')
class Dog:
	def __init__(self, name):
		self.name = name
		self.tricks=[]
	def add_trick(self, trick):
		self.tricks.append(trick)
d = Dog('Fido')
e = Dog('Buddy')
d.add_trick('roll over')
e.add_trick('Hopp, Hopp!')
d.tricks
e.tricks
e.add_trick('Fetch a stick!')
e.add_trick('Play dead!')
e.tricks
d.tricks
d.add_trick('Run away, and nexer come back again!')
d.tricks
exit()
S = "Gregor Redelonghi je danes zares velik in neprmagljiv"
S
L = list(S)
L
for i in L:
	''.join(L)
for i in L:
for range(len(L)):
L
for i in range(len(L)):
	print(L[i] + L[i+1])
for i in range(0, len(L)):
	print(L[i] + L[i+1])
print(L[i])
L
i
len(L)
print(L[i])
i
i=0
i
print(L[i])
for i in range(0, (len(L)-1)):
	print(L[i] + L[i+1]); i += 1
i
i=0
for i in range(0, (len(L)-1)):
	L1=L[i]; L2=L[i+1]
	print(L1 + L2)
i
i=0
for i in range(0, (len(L)-1)):
	Ln=L[i] + L[i+1]
	print(Ln)
L
for i in range(0, (len(L)-1)):
	print L[i]
	print(L[i])
for i in range(0, (len(L)-1)):
	print(L[i])
i=0
for i in range(0, (len(L)-1)):
	print(L[i])
L = list("Gregor Redelonghi ninja")
L
for i in range(len(L)):
	print(L[i])
i
i=0
for i in range(len(L)):
i=0; L2=L[i] + L[i+1]; i+=1
while i<len(L):
	i=0; L2=L[i] + L[i+1]; i+=1
	print(L2)
L
Ln=L[0]
Ln
while i<len(L):
	print(Ln)
	Ln = Ln + L[i]; i+=1
	print(Ln)
while i<len(L):
	Ln = Ln + L[i]; i+=1
	print(Ln)
Ln
L
while i<len(L):
	La = La + L[i]; i+=1
	peint(La)
La = L[0]
i
i=0
while i<len(L):
	La = La + L[i]; i+=1
	print(La)
La
exit()
S = "Gregor Redelonghi"
i=0
for N in S:
	print(S[N])
	print(N)
for N in S:
	print(N)
for N in S:
	G=N
S
print S[0]
print (S[0])
for i in S:
	print(i)
for i in S:
	print(i)
for i in S:
	print(i)
for i in S:
	print(i)
	j = S[i+1]
for i in S:
	print(S[i] + S[i+1])
for i in S:
	j=i
	print(j + i)
for i in S:
	print i
for i in S:
print(S[0])
print(S[0]); for i in S:
exit()
S
L = list("Gregor Redelonghi")
L
for i in range(0, len(L)):
S
L
L1 = ''
for i in range(0, len(L)):
	L1 = L1 + L[i]
	print(L1)
exit()
import os
print(os.path.getcwd())
print(os.getcwd())
PTH = print(os.getcwd())
print(PTH)
PTH = os.getcwd()
print(PTH)
print(os.path.basepath(PTH))
print(os.basepath(PTH))
print(os.path.dirname(PTH))
print(os.path.basename(PTH))
print(os.path.abspath(PTH))
print(os.path.expaduser("~"))
print(os.path.expaduser("~/"))
print(os.path.expanduser("~/"))
print(os.path.expanduser("~"))
print(os.path.expanduser(~))
print(os.path.expanduser("~"))
print(os.path.expanduser())
print(os.path.splitdrive(PTH))
print(os.path.split(PTH))
dir(print(os.path.split(PTH)))
type(print(os.path.split(PTH)))
type(print(os.path.split()))
type(print(os.path.split(PTH)))
type(print(os.path.dirname(PTH)))
print(os.path.dirname(PTH))
print(os.path.baeename(PTH))
print(os.path.basename(PTH))
python --version
version
exiT()
exit()
MS = """Gregor Redelonghi,
Tadeja Mali Redelonghi,
Spela Redelonghi
Zala Redelonghi,
Mark Redelonghi
"""
MS
list(MS)
MS
L = list(MS)
L
L1 = L[0]; print(L1)
L1 = L[0]; print(L1); for i in range(1, len(L)):
for i in range(1, len(L)):
L1
for i in range(1, len(L)):
	L1 = L1 + L[i]
	print(L1)
L
for i in range(1, len(L)):
	L1 = L1 + L[i]
	print(L1)
L
MS
for i in range(0,25):
	print L[i]
for i in range(0,25):
	print(L[i])
for i in range(0,25):
	L1 = L1 + L[i]
	print(L1)
L
L = list("Gregor Redelonghi Full Dobr Oci")
L
for i in range(0, len(L)):
l1
L1
L1 = L[0]
L1
L
MS = """Gregor Redelonghi,
Tadeja Mali Redelonghi,
Zala Redelonghi
"""
MS
L = list(MS)
L
L[15]
L1 = L[0]
L1
for i in range(1, len(L)):
	print L1
for i in range(1, len(L)):
	print(L1)
	L1 = L1 + L[i]
for i in range(1, len(L)):
print(i)
for i in range(1, len(L)):
	print(i)
for i in range(1, len(L)):
	print(L[i])
for i in range(1, len(L)):
	L1 = L[i]
	print(L1)
for i in range(1, len(L)):
	L1 = L[i]
	L1 = L1 + L[i]
	print(L1)
for i in range(1, len(L)):
	L1 = L1 + L[i]
	print(L1)
L
L1
L2
L2 = L[0]
L2
for i in range(1, len(L)):
	print(L2)
	L2 = L2 + L[i]
	print(L2)
L2
L1 = ""
for i in range(0, len(L)):
	L1 = L1 + L[i]
	print(L1)
MS
MS2 = MS.strip()
MS2
MS2=""
MS2
MS2 = MS.replace("\n", "")
MS2
L=""
L = list(MS2)
L
for i in range(0, len(L)):
	L1 = ""
	L1 = L1 + L[i]
	print(L1)
for i in range(0, len(L)):
	L1 = ""
	L1 = L1 + L[i]
	print(L1)
L1 = ""
for i in range(0, len(L)):
	L1 = L1 + L[i]
	print(L1)
L1 = ""
for i in range(0, len(L)):
	L1 = L1 + L[i] + L[i+1]
for i in range(0, len(L)):
L1 = ""
for i in range(0, len(L)):
	L1 = L1 + L[i] + L[i+1]
	print(L1)
L1 = ""
for i in range(0, len(L)):
	L1 = L1 + L[i]
	print(L1)
	L1 = L1 + L[i+1]
	print(L1)
L1 = ""
for i in range(0, len(L)):
	L1 = L1 + L[i]
	L1 = L1 + L[i+1]
	print(L1)
L1 = ""; i = 0
while i < len(L):
	L1 = L1 + L[i]
	print(L1)
len(L)
L1 = ""; i = 0
	L1 = L1 + L[i]
L1 = ""; i = 0
while i < len(L):
	L1 = L1 + L[i]
	i+= 1
	print(L1)
L1 = ""; i = 0
	L1 = L1 + L[i]
L1 = ""; i = 0
while i < len(L):
	L1 = L1 + L[i]
	L1 = L1 + L[i+1]
	i+= 1
	print(L1)
L1 = L[0]
L1
L1 = L1 + L[1]
L1
L1 = L1 + L[2]
L1
L1 = ""; i = 0
for i in range(0, len(L)):
	L1 = L1 + L[i] + L[i+1]
	i = i + 2
	print(L1)
L
!ls
exit()
print("{:15s} {:5.2f}".format("Moja Jajca", 15.542589))
print("{:15s} {:5.2f}\n{:15s} {:5.2f}".format("Moja Jajca", 15.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:5.2f}\n{:15s} {:5.2f}".format("Moja Jajca", 15.542589, "Klinton Bozgo", 222.5879))
print("{:15s} {:-5.2f}\n{:15s} {:-5.2f}".format("Moja Jajca", 15.542589, "Klinton Bozgo", 222.5879))
print("{:15s} {:5.2f}\n{:15s} {:5.2f}".format("Moja Jajca", 15.542589, "Klinton Bozgo", 222.5879))
print("{:15s} {:5.2f}\n{:15s} {:5.2f}".format("Moja Jajca", 15.542589, "Klinton Bozgo", 22.5879))
print("{:15s} {:5.2f}\n{:15s} {:05.2f}".format("Moja Jajca", 15.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:5.2f}\n{:15s} {:05.2f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:6.2f}\n{:15s} {:06.2f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:6.2f}\n{:15s} {:6.2f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:6.2f}\n{:15s} {:-8.2f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:8.2f}\n{:15s} {:-8.2f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:-8.2f}\n{:15s} {:-8.2f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:8.2f}\n{:15s} {:8.2f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:08.2f}\n{:15s} {:08.2f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:<08.2f}\n{:15s} {:<08.2f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:08.2f}\n{:15s} {:15.2f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:>08.2f}\n{:15s} {:15.2f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:>08.2f}\n{:15s} {:8.2f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:>8.2f}\n{:15s} {:8.2f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:>8.2f}\n{:15s} {:8.3f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:>8.2f}\n{:15s} {:8.3>f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:>8.2f}\n{:15s} {:>8.3f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
print("{:15s} {:>8.3f}\n{:15s} {:>8.3f}".format("Moja Jajca", 115.542589, "Klinton Bozgo", 2.5879))
exit
exit()
import os
os.walk()
os.walk(os.getcwd())
print os.walk(os.getcwd())
dir(os.walk())
dir(os.walk(top))
dir(os.walk(.))
dir(os.walk(os.getcwd()))
help(os.walk(os.getcwd()))
exit
exit()
import os
for P, D, F in os.walk(os.getcwd()):
	print P, D, F
for P, D, F in os.walk(os.getcwd()):
	print P
	print "P"
for P, D, F in os.walk(os.getcwd()):
	print "P"
for P, D, F in os.walk(os.getcwd()):
	print(P)
for P, D, F in os.walk(os.getcwd()):
	print(D)
for P, D, F in os.walk(os.getcwd()):
	print(F)
for P, D, F in os.walk(os.getcwd()):
	print(P + "/" + D + "/" + F)
for P, D, F in os.walk(os.getcwd()):
	print(P)
import os
os.getcwd()
os.walk(ODPRTO)
for (P, D, F) in os.walk(ODPRTO):
	print(P)
for (P, D, F) in os.walk(_Dropbox):
	print(P)
for (P, D, F) in os.walk(os.getcwd() + "/ODPRTO"):
	print(P)
for (P, D, F) in os.walk(os.getcwd() + "/ODPRTO"):
	type(P)
for (P, D, F) in os.walk(os.getcwd() + "/ODPRTO"):
	type(D)
for (P, D, F) in os.walk(os.getcwd() + "/ODPRTO"):
	type(F)
for (P, D, F) in os.walk(os.getcwd() + "/ODPRTO"):
	print(F)
for (P, D, F) in os.walk(os.getcwd() + "/ODPRTO"):
	print(D)
for (P, D, F) in os.walk(os.getcwd() + "/ODPRTO"):
	print(P.join(D))
for (P, D, F) in os.walk(os.getcwd() + "/ODPRTO"):
	print(.join(D))
for (P, D, F) in os.walk(os.getcwd() + "/ODPRTO"):
	print(".".join(D))
M = os.walk(os.getcwd() + "/ODPRTO")
M
print(M)
for (P,F,F) in M:
	print(P)
os.getcwd()
dir(os.getcwd())
10/4
10%4
11/2
11%2
11%4
10%3
10%4
10%5
int(11/2)
int(11/2); 11%2
exit()
URL="http://users/gregorr.net/ggggg/"
print(URL)
if URL.endswith('/'):
	print("Not COOL!")
else:
	print("OK!")
URL="http://users/gregorr.net/ggggg.html"
if URL.endswith('/'):
	print("Not COOL!")
else:
	print("OK!")
URL="http://users/gregorr.net/ggggg/"
print(URL.rstrip('/')
print(URL.rstrip('/'))
exit()
import subproccess
import subprocess
subprocess.cal(["df", "-h"])
subprocess.call(["df", "-h"])
subprocess.call(['watch -n1 df -h'])
subprocess.call(['watch', ' -n1 df -h'])
exit
exit()
import subprocess
subprocess.call(['du'])
subprocess.call(['du', '-sh', './*'])
subprocess.call(['du', '-sh', './'])
subprocess.call(['du', '-h', './'])
subprocess.call(['du', '-h', './', '|', 'sort'])
subprocess.call(['du', '-h', './', '|', 'sort -hr', '|', 'head'])
subprocess.call(['du', '-h', './', '| 'sort -hr', '|', 'head'])
subprocess.call(['du', '-h', './', '| sort -hr', '|', 'head'])
subprocess.call(['du', '-h'])
subprocess.call(['du', '-h']) | sort
subprocess.call(['du', '-h'])
subprocess.call(['du', '-s'])
subprocess.call(['du', '-sh'])
subprocess.call(['pwd'])
exit()
impoer turtle
imprt turtle
import turtle
exit
python2
python
exuit()
exit()
easy_install-3.4 pip
exit
exit()
exit
exit()
exit
exit()
import matplotlib
exit()
mean([1.2.3.4.5.6.7.8.9.10])
import statistics
statistics.mean([1.2.3.4.5.6.7.8.9.10])
statistics.mean([1,2,3,4,5,6,7,8,9,10])
import statistics as st
st.mean([1,3,5,7,9])
st.mean([1,3,5,7,11])
st.mean([3,3,4,5])
round(st.mean([3,3,4,5]))
round(st.mean([3,3,4,4]))
round(st.mean([3,3,4,3]))
round(st.mean([3,3,4,4,5]))
round(st.mean([3,3,4,3,5]))
round(st.mean(range(10)))
st.mean(range(10))
st.mean(range(11))
st.mean(range(12))
st.mean(range(13))
round(st.mean(range(12)))
exit()
import platform as pf
pf.machine()
pf.platform()
a, b = pf.machine(), pf.platform()
print(a); print(b)
pf.uname()
exit()
impoprt os
import os
os.getcwd()
print("New directory:", "{}/KUKU/".format(os.getcwd()))
print("New directory: {}/KUKU/".format(os.getcwd()))
print("New directory: {}/KUKU/{}".format(os.getcwd(),"GREGOR"))
print("New directory: {}/KUKU/{}".format(os.getcwd(), 100/2))
print("New directory: {}/KUKU/{}".format(os.getcwd(), int(100/2)))
print("New directory: {}/KUKU/{}/".format(os.getcwd(), int(100/2)))
print("New directory: {}/KUKU/{}/".format(os.getcwd(), str(100/2)))
print("New directory: {}/KUKU/{}/".format(os.getcwd(), int(100/2)))
print("New directory: {}/KUKU/{}/".format(os.getcwd(), GR*5)
)
print("New directory: {}/KUKU/{}/".format(os.getcwd(), "GR"*5))
print("New directory: {}/KUKU/{}/".format(os.getcwd(), "GR "*5))
print("New directory: {}/KUKU/{}/".format(os.getcwd(), "GR_"*5))
print("New directory: {}/KUKU/{}/".format(os.getcwd(), "_GR"*5))
print("New directory: {}/KUKU/{}/".format(os.getcwd(), ".GR"*5))
exit()
import os sys subprocess
import os, sys, subprocess
command = ['du', '-sh', os.dirlist()]
command = ['du', '-sh', os.getcwd()]
subprocess.call(command)
command = ['du', '-sh', os.getcwd() + '/*']
subprocess.call(command)
command = ['du', '-h', '--total', os.getcwd() + '/*']
subprocess.call(command)
command = ['du', '-h', '--total', os.getcwd()]
subprocess.call(command)
command = ['du', '-h', '--total', os.getcwd()]
command = ['du', '-h', '--total', os.getcwd(), "| sort"]
subprocess.call(command)
command = ['du', '-h', '--total', os.getcwd(), "| sort"]
command = ['du', '-h', '--total', os.getcwd()]
subprocess.call(command)
command = ['du', '-h', os.getcwd()]
subprocess.call(command)
command = ['df', '-h']
subprocess.call(command)
command = ['df', '-h', '|', 'grep /h']
subprocess.call(command)
command = ['df', '-h',]
subprocess.call(command)
command = ['df', '-h']
subprocess.call(command)
command = ['df', '-h']
subprocess.call(command)
subprocess.Popen(command)
command = ['df', '-h', '|', 'grep /h']
subprocess.Popen(command)
exit()
command = ['df', '-h', '|', 'grep /h']
subprocess.call(command, shell=true)
import subprocess
subprocess.call(command, shell=true)
subprocess.call(command, shell=True)
command = ['df', '-h', '|', 'grep /h']
subprocess.call(command, shell=True)
command = ['df', '-h', '| grep /h']
subprocess.call(command, shell=True)
command = ['df' -h | grep /h']
command = ['df -h | grep /h']
subprocess.call(command, shell=True)
subprocess.call(command, shell=True,)
exit()
i=1
if (i % 2 == 0):
	print()
else:
	print(i)
i=1
while(1):
	print(i)
i=1
while(1):
	if ( i % 2 == 0):
		print()
	else:
		print(i, ", ")
while(1):
i=1
while(1):
	if ( i % 2 == 0):
		print()
	else:
		print(i, ", ")
	i +=1
for i in range(100):
	if ( i % 2 == 0):
		print()
	else:
		print(i, ", ")
for i in range(100):
	if ( i % 2 == 0):
		print()
	else:
		printf(i, "| ")
for i in range(100):
	if ( i % 2 == 0):
		print()
	else:
		print()
for i in range(100):
	if ( i % 2 == 0):
		print()
	else:
		str.(printf(i, "| ")).rstrip
for i in range(100):
	if ( i % 2 == 0):
		print()
	else:
		str.(print(i, ", ")).rstrip
for i in range(100):
	if ( i % 2 == 0):
		print()
	else:
		str(print(i, ", ")).rstrip
for i in range(100):
	if ( i % 2 == 0):
		print()
	else:
		print(str(print(i, "| ")).rstrip)
for i in range(100):
	if ( i % 2 == 0):
		print()
	else:
		print(i, "| "),
for i in range(100):
	if ( i % 2 == 0):
		print()
	else:
		print(i, "| ", end=''),
for i in range(100):
	if ( i % 2 == 0):
		print()
	else:
		print(i, "| ", end='', flush=True)
for i in range(100):
	if ( i % 2 == 0):
		print()
	else:
		print(i, "| ", end='',)
print(range(20))
for i in range(100):
	if ( i % 2 == 0):
		print()
	else:
		print(i, "| ",)
for i in range(100):
	if ( i % 2 == 0):
		print('',)
	else:
		print(i, "| ",)
for i in range(100):
	if ( i % 2 == 0):
		break
	else:
		print(i, "| ",)
		break
for i in range(10):
	print(i)
for i in range(10):
	print(i,)
for i in range(10):
	print(i, end='')
for i in range(10):
	print(i, "| ", end='')
for i in range(100):
	if ( i % 2 == 0):
		pass
for i in range(100):
	if ( i % 2 == 0):
		pass
	else:
		print(i, "| ", end='')
for i in range(50):
	if ( i % 2 == 0):
		pass
	else:
exit()
print('{} gre pa za med'.format('Tale zlato')))
print('{} gre pa za med'.format('Tale zlato'))
st = 12345.7895
print('{} gre pa za med'.format(st))
print('{} gre pa za med'.format(st/2))
print('{} gre pa za med'.format(st/4))
print('{} gre pa za med'.format(st/8))
print('{} gre pa za med!!'.format(st/8))
nm = 'http://www.gregorjevastran.si'
print('{} gre pa za med!!'.format(nm))
print('{} gre pa za med!!'.format('.'nm.rtrip))
print('{} gre pa za med!!'.format(nm.rtrip('.')))
print('{} gre pa za med!!'.format(nm.trip('.')))
exit()
ln = "Gregor:Redelonghi:Valvasorjeva ul. 5:1000:Ljubljana"
ln
ln.strip(':')
g= ln.strip(':')
g
print(ln.strip(":"))
print(ln)
ln
G = ln.split(':')
G
for N in G: print(N)
for N in G: print(N, end='')
for N in G: print(N, "\n", end='')
for N in G: print(N, " ", end='')
for N in G: print(N, end='')
for N in G: print(N, ,end='')
for N in G: print(N, , end='')
for N in G: print(N, '' , end='')
for N in G: print(N, ',' , end='')
for N in G: print(N, ', ' , end='')
for N in G: print(N + ', ' , end='')
for N in G: print(N + ', ' ,)
for N in G: print(N + ', ')
exit()
S = "Gregor Redelonghi, Valvasorjeva ulica 5, 1000 Ljubljana, tel: 01/426-33-82, e-mail: gregor.redelonghi@energetika-lj.si"
S
S.split(',')
SL = S.split(',')
SL
for R in SL: print(R)
SL = S.split(', ')
SL
for R in SL: print(R)
SG = S.split(' ')
SG
for R in SG: print(R)
SG[1]
exit
exit()
V = " Gregor Redelonghi "
print("[" + V + "]")
print("[" + V.lstrip() + "]")
print("[" + V.lstrip().rstrip() + "]")
print("[" + V.rstrip() + "]")
exit()
nms = ['Gregor', 'Tadeja', 'Zala', 'Mark', 'Spelca']
nms
type(nms)
for nm in nms:
	print(nms[nm])
for nm in nms:
	print('Hello', nm)
	print('Hello' + nm)
for nm in nms:
	print('Hello' + nm)
for nm in nms:
	print('Hello ' + nm)
for nm in nms:
	print(' '.join(['Hello', nm])
)
for nm in nms:
	print(' '.join(['Hello', nm, '.'])
)
for nm in nms:
	print(' '.join(['Hello', nm + '.']))
for nm in nms:
	print(' '.join(['Hello', nm + '.', 'How are you today?']))
for nm in nms:
	print('\n'.join(['Hello', nm + '.', 'How are you today?']))
for nm in nms:
	print('\t'.join(['Hello', nm + '.', 'How are you today?']))
print(', '.join(nms))
print(' in '.join(nms))
print(' in '.join(nms), '.')
print(' in '.join(nms) + '.')
F = 'Gregor'
M = 'Tadeja'
C = 'Zala, Mark and Spela'
print('Father is {}. Mother is {}, and children are {}.'.format(F, M, C))
exit()
import timeit
print(timit.timeit('1+3', number=50000))
print(timeit.timeit('1+3', number=50000))
print(timeit.timeit('1+3', number=5000000))
print(timeit.timeit('1+3', number=50000000))
print(timeit.timeit('1+3', number=500000000))
print(timeit.timeit('1+3', number=5000000))
print(timeit.timeit('1+3', number=50000000))
print(timeit.timeit('1+3', number=500000000))
print(timeit.timeit('1+3', number=50000000))
nms = ['Gregec', 'Tadejc', 'Zajko', 'Barky', 'Spelc']
nms
print(for i, j in enumerate(nms))
for i, j in enumerate(nms):
	print (i, j)
[print(i, j) for i, j in enumerate(nms)]
[print(i, j) for i in enumerate(nms)]
[print(i, j) for i, j in enumerate(nms)]
for i, j in enumerate(nms):
	print (i, j)
	print (i+1, j)
for i, j in enumerate(nms):
	print (i+1, j)
exit()
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
b = [e for e in a if e % 2]
print(b)
b = [e for e in a if not e % 2]
print(b)
exit
exit()
def answer():
	'''Function that
		suplies an answer
		that is num 42
	'''
	print('42')
answer
print(answer)
help(answer)
answer
answer()
b = answer()
b
print(b)
b
def dva():
	return 2
dva()
b = dva()
b
exit()
ln = 1.0e6
ln
int(ln)
print("{.8f}.format nl)"
print("{.8f},format.nl)"
print("{.8f} format.nl)"
nl
print("{.8f}.format ln)"
print("{.8f}, format.ln)"
ln
print("{.8f}. format(ln))"
print("{.8f}".format(ln))"
print("{.8f}".format(ln))
print("{f}".format(ln))
print("{0.8f}".format(ln))
print("{:8f}".format(ln))
print("{:5.8f}".format(ln))
print("{:15.8f}".format(ln))
print("{:15.3f}".format(ln))
print("{:.3f}".format(ln))
print("{.3f}".format(ln))
print("{:.3f}".format(ln))
nm = "Redelonghi"
nm[1:]
'G' + nm[1:]
'Mali R' + nm[1:]
'Mali R' + nm[:-8]
'Mali R' + nm[-8:]
'Mali R' + nm[-9:]
'Mali R' + nm[-(len(nm)-1):]
'Mali R' + nm[-(len(nm)-2):]
'Mali R' + nm[-(len(nm)-0):]
'Mali R' + nm[-(len(nm)-1):]
'Mali R' + nm[0:]
'Mali R' + nm[1:]
'Mali R' + nm[1:5]
'Mali R' + nm[1:]
s1 = "Gregor Redelongi Valvasorjeva ulica 5 1000 Ljubljana"
s1.split(' ')
"\n".join)(s1)
"\n".join(s1)
"\n".join(s1.split(' '))
print("\n".join(s1.split(' ')))
def echo(line):
	''' This function
just prints the argument, no matter
what it is.
Be carefull about the type consistency, thou.
Be we and live prosper.
	'''
	print(line)
echo("My name is IPGHBPIUHBPU")
help(echo())
help(echo(line))
help(echo("line"))
help(echo)
dir(line)
dir(echo)
type(echo)
dir(echo())
dir(echo(line))
dir(echo("line"))
help(echo)
import sys
fpr plc in sys.path
for plc in sys.path
for plc in sys.path:
	print(plc)
exit()
import sys
sys.getswd()
getcwd()
cwd()
sys.cwd()
import os
os.getcwd()
curdir = os.getcwd()
print(curdir)
print(curdir)
import subproccess
subprocces.call("ls", "-l", curdir)
subprocess.call("ls", "-l", curdir)
subprocess.call(["ls", "-l", curdir])
subprocess.call(["ls", , curdir])
subprocess.call(["ls", curdir])
subprocess.call(["less" "www.zeth.net_20141202.txt"])
subprocess.call(["less", "www.zeth.net_20141202.txt"])
import re
FJL = curdir + "www.zeth.net_20141202.txt"
print(FJL)
re.search("look.*", FJL)
m = re.search("look.*", FJL)
if m:
	print(m.group())
m = re.search("look", FJL)
if m:
m = re.search("look", FJL)
if m:
	print(m.group())
subprocess.call(["grep -o", "look", FJL])
subprocess.call(["grep", "-o", "look", FJL])
subprocess.call(["grep", , "look", FJL])
subprocess.call(["grep", "look", FJL])
subprocess.call(["grep", "--color" "look", FJL])
subprocess.call(["grep", "--color", "look", FJL])
print(m)
m = re.findall("look", FJL)
if m:
	print(m.group())
m = re.findall('look', FJL)
print(m)
m = ['look', 'look', 'looked']
print(m.group())
print(m)
subprocess.call(["ls", curdir])
cd
exit()
import suprocess, sys, os, re
import subprocess, sys, os, re
f = fjl.txt
f = "fjl.txt"
suprocess.call(["ls", "-l", f)
suprocess.call(["ls", "-l", f])
subprocess.call(["ls", "-l", f])
m = re.search('look', f)
print(m)
m = re.search('*look*', f)
m = re.findall('look', f)
print(m)
m = re.findall('o', f)
print(m)
s = open(fjl.txt, r)
s = open('fjl.txt', r)
s = open('fjl.txt', 'r')
exit()
s = open('fjl.txt', 'r')
print(s.read())
s.close()
print(s.read())
s = open('fjl.txt', 'r')
print(s.read())
subprocess.call(["nano", "fjl.txt"])
import subprocess, sys, os, re
subprocess.call(["nano", "fjl.txt"])
subprocess.call(["cat", "fjl.txt"])
m = re.search('boy', "fjl.txt")
print(m)
m = re.search("boy", "fjl.txt")
print(m)
subprocess.call(["grep","--color", "boy", "fjl.txt"])
m
m = re.findall('b', 'fjl.txt')
m
src = """
There is new boy in thovn. He has got new look. Ans it is smashing.
He really looks very cool.
Even if he leaves any time soon, he already gave us the hinge.
Be well and prosper.
Bye!
"""
print(src)
m = re.findall('b', src)
m
m = re.findall('o', src)
m
if m:
	print(m.group())
m = re.findall('o.*', src)
M
m
if m:
	print(m.group())
m = re.finiter('o.*', src)
m = re.finditer('o.*', src)
if m:
	print(m.group())
m
m = re.findall('o.*', src)
m
for i in m:
print(i)
for i in m:
	print(i)
m = re.match('o.*' , src)
m
if m:
	print(i)
if m:
	print(m.group())
m = re.match('o', src)
m
m = re.find('o', src)
m = re.findall('o', src)
m
m = re.match('o', src)
m
subprocess.call(["cat", "fjl.txt"])
m = re.match('look', src)
m
f.close()
f = open("fjl.txt", "r")
f.read()
f.readlines()
f.read()
f.close()
f = open("fjl.txt", "r")
f.readlines()
help(readlines)
help(readlines())
help(f.readlines())
help(readlines())
f.close()
f = open("fjl.txt", "r")
help(readlines)
help(readlines())
help(f.readlines())
f.readlines()
f.close()
f = open("fjl.txt", "r")
help(f.readlines())
f.close()
f = open("fjl.txt", "r")
dir(f.readlines())
type(f.readlines())
exit()
A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
N =len(A)
N
A[0]
A[0:N-3]
A[0+2:N-3]
exit()
for N in range(8):
	print("/" + " "*N + "\")
for N in range(8):
	print("/" + " "*N + "\\")
for N in range(8):
K = 8
for N in range(K):
	print(" "*K + "/" + " "*N + "\\")
	K += 1
for N in range(K):
	print(" "*K + "/" + " "*N + "\\")
	K -= 1
for N in range(K):
	print(" "*K + "/" + " "*N*2 + "\\")
	K -= 1
K
K = 8
for N in range(K):
	print(" "*K + "/" + " "*N*2 + "\\")
	K -= 1
exit()
help(20170419_A.py)
exit()
def rec(n):
	if n == 0:
		return 1
	else:
		return n * (n-1)
def rec(n):
	if n == 0:
		return 1
	else:
		return rec(n-1)
rec(5)
exit
exit()
import random
help(random)
S = [x for random(x) in range(1,26)]
S = [x for x in range(1,26)]
S
S = random.shufle(S)
random.shuffle(S)
S
exit
exit()
import random
L = [ x for x in range(1, 26)]
L
random.shuffle(L)
L
sorted(L)
L
S = sorted(L)
help(sorted)
exit()
f = open("MALTEKSTA.txt", "rt")
f.read()
f.seek(0)
f.read()
f.seek(0)
f.seek(25)
f.read()
f.seek(0)
f.read().split("\n")
f.seek(0)
f.print()
f.readlins()
f.readlines()
f.seek(0)
f.read()
f.seek(0)
help(read())
help(f.read())
help(.read())
f.seek(0)
f.read()
f.seek(0)
print(f.read())
f.seek(0)
F = f.read()
print(F)
f.read()
print(F)
f.read()
f.seek(-15)
f.seek(:15)
f.seek(0)
f.seek(15)
print(F)
f.read()
print(F)
f.stat()
help(open())
help(f.open())
print(F)
f.read()
f.seek(0)
f.seek(20)
f.read()
len(f)
len(f.read())
f.seek(0)
len(f.read())
f.seek(0)
f.seek(138)
f.read()
f.seek(138)
f.read()
f.seek(138)
len(f.read())
fseek(0)
print(F)
print(F).split("\n")
print(F)
T = print(F)
T
print(T)
T = [ x for x in print(F)]
f.seek(0)
T = [ x for x in f.read()]
T
f.read()
f.seek(0)
T = [ x for x in f.read().split('\n')]
T
for i in range(len(T):
for i in range(len(T)):
	print(T[i])
for i in range(len(T)):
	print(T[i+1])
for i in range(len(T)-1):
	print(T[i+1])
for i in range(0, len(T), 2):
	print(T[i])
for i in range(0, len(T), 3):
	print(T[i])
for i in range(0, len(T), 4):
	print(T[i])
for i in range(1, len(T), 2):
	print(T[i])
f.close()
for i in range(1, len(T), 2):
	print(T[i])
T
exit()
T
exit()
S = "Gregor Redelonghi"
L = sorted(S)
L
help(sorted())
help(sorted)
help(sorted(key=none))
help(sorted(L,key=none))
help(sorted(L,key=None))
help(sorted(key=None))
help(sorted(,key=None))
help(sorted(S ,key=None))
help(sorted)
list("Gregor Redelonghi")
sorted(list("Gregor Redelonghi"))
sorted("Gregor Redelonghi")
exit()
for i in range(1,3):
	if i == 1:
		i = 1
	else:
		i = i-1 + i
for i in range(1,3):
	i = i-1 + i
	print(i)
1 + 2 + 3
1+2+3+4+5
1*2*3*4*5
1*2*3
1*2
1*2*3*4
for i in range(1,3):
	i = (i-1) * i
	print(i)
exit()
prc = ["1064/2", "1666/4", "1065/4", "1669/14", "1669/12"]
L
prc
S = sorted(prc)
S
exit()
f = open("obn_Dravlje_2F_PARCELE-02_20170421.txt", "rt")
F = f.read()
print(F)
S = [s for s in F.readlines()]
S = [s for s in f.readlines()]
S
f.seek
f.show
f.seek(0)
S = [s for s in f.readlin()]
S = [s for s in f.readline()]
S
f.seek(0)
S = []
S = [s for s in f.readlines()]
S
S[0] = '1064/2\n'
S
S2 = sorted(S)
S2
for i in range(len(S2)):
	print(S2[i])
for i in range(len(S2)):
	print(S2[i].strip())
for i in range(len(S2)):
	print(S2[i].strip())
f.close()
for i in range(len(S2)):
	print(S2[i].strip())
f2 = open("PARCELE-SORTIRANO.txt", wt)
f2 = open("PARCELE-SORTIRANO.txt", "wt")
for i in range(len(S2)):
for i in S2:
	print>>f2 i
for i in S2:
	print>>f2, i
for i in range(len(S2)):
for item in S2:
	f2.write(item)
s"
S2
for item in S2:
	print(item)
	print(item).strip()
for item in S2:
	print(item).strip()
for item in S2:
	print(item.strip())
for item in S2:
	f2.write(item.strip())
f2.close()
ydd
exit()
1/2+1/4+1/8+1/16
1/2+1/4+1/8+1/16+1/32+1/64
exit()
for i in range(0,10,2):
	print(i)
	print("1/i =", 1/i)
for i in range(2,10,2):
	print(i)
	print("1/i =", 1/i)
.5+.25+.166666+.125
exit()
help(print)
exit()
NUM = 100
L = [k for k in range(1, NUM+1) if NUM % k == 0]
L
NUM = 300
L = [k for k in range(1, NUM+1) if NUM % k == 0]
L
print(L)
exit()
L = ["ena", "dve", "tri", "stiri" ,"pet", "sest", "sedem", "osem", "devet", "deset"]
L
for i, st in enumerate(L):
	print(i, st[i])
L
for i in range(len(L)):
print(i, L[i])
for i in range(len(L)):
	print(i, L[i])
	print(i+1, L[i])
for i in range(len(L)):
	print(i+1, L[i])
for i in range(len(L)):
	print('{:>15}'.format(i+1), L[i])
for i in range(len(L)):
	print('{:<15}'.format(i+1), L[i])
for i in range(len(L)):
	print('{:<5}'.format(i+1), L[i])
for i in range(len(L)):
	print('{:<3}'.format(i+1), L[i])
for i in range(len(L)):
	print('{:<2}'.format(i+1), L[i])
for i,item in enumerate(L):
	print(i, L[i])
for i,item in enumerate(L):
	print(i, item)
for i,item in enumerate(L):
	print(i+1, item)
print(enumerate(L))
exit>()
exit()
y = [ ('IBM', 5), ('Zil', 3), ('DEC', 18) ]
y
y.sort()
y
def sort_on_2(a, b):
	return cmp(a[1], b[1])
y.sort(sort_on_2)
Y
y
y.sort(sort_on_2)
y.sort(sort_on_2())
def sort_on_2(a, b):
	return cmp(a[1], b[1])
y.sort(sort_on2)
y.sort(sort_on_2)
y.sort(sort_on_2())
y.sort(sort_on_2(a, b))
sort_on_2(y.sort))
exit
exit()
less
a = 5
a
exit()
help(os)
help('os')
help('sys')
help('numpy')
help('scypy')
help('mail')
help('email')
help('while')
help(while)
help('def')
exit()
D = {"One" : 1, "Two" : 2, "Three" : 3, "Four": 4, "Five" : 5}
D
if 'Four' in D:
	print(D['Four']
else
if 'Four' in D:
	print(D['Four']
else:
if 'Four' in D:
	print(D['Four']
if 'Four' in D:
	print(D['Four'])
else:
	print("No LUCK! Bye")
def Q(n):
	if str(n) in D:
		print(D[str(n)])
	else:
		print("No luck. Bye!")
Q(Four)
Q('Four')
Q('Fur')
Q('Two')
Q('Tri')
Q('Three')
D.keys()
D.calues()
D.items()
D.values()
D.items()
[k for k, v in D.items()]
[v for k, v in D.items()]
len(D)
k = 'Two'
k in D
k = "six"
k in D
k not in D
L = [1,2,3,4,5,6,7,8,9,10]
L
next(L)
LI = iter(L)
nex(LI)
next(LI)
LI
L
next(LI)
LI = iter(L)
next(LI)
for i in L:
	print(i)
for i in L:
for i in L: print(i)
for i in L: print(i); print("Done!")
for i in L: print(i) && print("Done!")
for i in L: print(i)
print("Done")
for i in L: print(i)
for i in L:
	print(i)
print("Done")
for i in L:
	print(i)
print(max(L))
print(min(L))
print(mean(L))
print(fluor(L))
print(floor(L))
print(L.floor())
print(L.max())
d = {"Januar":1, "Februar":2, "Marec":3, "April":4, "Maj":5, "Junij":6, "Julij":7, "Avgust":8, "September":9, "Oktober":10, "November":11, "December":12} 
for k, v in d:
	print(k, v)
for k, v in d:
for k in d:
	print(k)
for k, v in d:
	print(k)
for k in d:
	print(k, d[k])
for k in d:
	print('{0:<15}{1}'.format(k, d[k])
for k in d:
	print('{:<15}{}'.format(k, d[k])
for k in d:
	print('{:<15}{}'.format(k, d[k]))
for k, v in sorted(d.items(), itemgetter(0), True):
	print('{:<12}{}'.format(k, v))
from operator import itemgetter
for k, v in sorted(d.items(), itemgetter(0), True):
	print('{:<12}{}'.format(k, v))
for k, v in sorted(d.items(), itemgetter(0), True):
	print('{:<12}{}'.format(k, v))
for k, v in sorted(d.items(), itemgetter(1), True):
	print('{:<12}{}'.format(k, v))
for k, v in sorted(d.items(), itemgetter(1), True):
	print(k, v)
for k, v in sorted(d.items(), itemgetter(1), True):
	print(k, v)
d
for k in d:
	print(k, d[k])
fot key, value in sorted(d.iteritems(), key=lambda (k,v): (v:k)):
for key, value in sorted(d.iteritems(), key=lambda (k,v): (v:k)):
for key, value in sorted(d.iteritems(), key = lambda(k,v): (v:k)):
d
for key, value in sorted(d.iteritems(), key = lambda (k, v): (v, k)):
for key, value in sorted(d.iteritems(), key=lambda (k, v): (v, k)):
for key, value in sorted(d.iteritems(), key = lambda (k,v): (v,k)):
for key, value in sorted(d.iteritems(), key = lambda(k,v): (v,k)):
for key, value in sorted(d.iteritems(), key = lambda (k,v): (v,k)):
for key, value in sorted(d.iteritems(), key = lambda k,v: (v,k)):
	print(key, value)
help('iteritems')
help('iteritems()')
help('d.iteritems()')
help('iter')
for key, value in sorted(d.iteritems(), key = lambda k,v: (v,k)):
	print(key, value)
import collections
d = collections.OrderedDict({"Januar":1, "Februar":2, "Marec":3, "April":4, "Maj":5, "Junij":6, "Julij":7, "Avgust":8, "September":9, "Oktober":10, "November":11, "December":12})
d
for k, v in d.items():
	print(k, v)
d = {"Januar":1, "Februar":2, "Marec":3, "April":4, "Maj":5, "Junij":6, "Julij":7, "Avgust":8, "September":9, "Oktober":10, "November":11, "December":12} 
d
for k, v in d.items():
	print(k, v)
sorted_d = sorted(d.items(), key=operator.itemgetter(0))
import operator
sorted_d = sorted(d.items(), key=operator.itemgetter(0))
sorted_d
sorted_d = sorted(d.items(), key=operator.itemgetter(1))
sorted_d
for k, v in sorted_d.items():
	print(k, v)
for i in sorted_d:
	print(i)
for i in sorted_d:
	for k, v in i[k], i[v]:
		print(k, v)
for i in sorted_d:
	for k in i:
		print(k[0], k[1])
sorted_d
for k, v in sorted_d[0], sorted_d[1]:
	print(k, v)
for item in sorted_d:
	print(item)
for item in sorted_d:
	for k, v in item:
		print(k, v)
for item in sorted_d:
	for i in item:
		print(i[0], i[1])
for item in sorted_d:
	print(item)
for k, v in sorted_d[0], sorted_d[1]:
	print(k, v)
for i in sorted_d:
	print(i[0], i[1])
for i in sorted_d:
	print('{:<12}{}'.format(i[0], i[1]))
exit()
exit>()
exit()
exit
exit()
import datetime as dt
dt.now()
dt.datetime.now()
dt.datetime.now().isoformat()
from dateutil.tz import gettz
exit()
2E+2
2E-22
2E-2
2E-12
2E-6
2E-5
2E-4
2e+5
2e5
2e5 * 2e-4
2e5 * e-4
2e5 * 1e-4
2e5 * 1e-5
2e5 / 1e-5
print('{:3e}'.format(2e5 / 1e-5))
print('{:-3e}'.format(2e5 / 1e-5))
print('{:1e}'.format(2e5 / 1e-5))
print('{:5e}'.format(2e5 / 1e-5))
print('{:.2e}'.format(2e5 / 1e-5))
print('{:.2e}'.format(2e5 / 1e-4))
print('{:.1e}'.format(2e5 / 1e-4))
print('{:.1e}'.format(2e5 / 1e-6))
print('{:.1e}'.format(2e5 / 1e6))
exit()
L = [N-19020", "N-19010", "N-19267"]
L = ["N-19020", "N-19010", "N-19267"]
L
L.sorted()
print(sorted(L))
exit
exit()
exit
exit()
import os, sys
os.walk(.)
os.walk()
os.walk(sys.path.getcwd())
sys.path.getcwd()
os.path.getcwd()
sys.getcwd()
os.walk(os.getcwd())
print(os.walk(os.getcwd()))
root, dirs, files = os.walk(os.getcwd())
os.listdir('.')
F = []
for root, dirs, files in os.walk('.'):
	F.extend(files)
F
ll
for root, dirs, files in os.walk('bin/'):
F = []
F
for root, dirs, files in os.walk('bin/'):
	F.extend(files)
F = []
for root, dirs, files in os.walk('bin/'):
	F.extend(files)
	break
F
F2 = []
for root, dirs, files in os.walk('bin/_STARO-en/'):
	F2.extend(files)
	break
F2
for FJL in F:
	if FJL in F2:
		print(FJL, "in both dirs!")
for FJL in F:
	if FJL in F2:
		print(FJL, "in both dirs!")
F2 = []
for root, dirs, files in os.walk('bin/_STARO-en/'):
	F2.extend(files)
	break
for FJL in F:
	if FJL in F2:
		print(FJL, "in both dirs!")
for FJL in F:
	print(FJL)
for FJL in F2:
	print(FJL)
for FJL in F:
	if FJL is in F2:
if 'ure.sh' in F:
	print('ure.sh is in', F)
if 'ure.sh' in F2:
	print('ure.sh is in', F)
exit()
import os, sys
for root, dirs, files in os.walk(os.path('bin/_STARO-en)):
for root, dirs, files in os.walk('bin/_STARO-en/'):
	R.extend(root)
	D.extend(dirs)
	F.extend(files)
R = []
D = []
F = []
for root, dirs, files in os.walk('bin/_STARO-en/'):
	R.extend(root)
	D.extend(dirs)
	F.extend(files)
D
R
F
R = []
D = []
F = []
for root, dirs, files in os.walk('bin/_STARO-en/'):
	R = dirs
	F.extend(files)
D
F
R
for i in range(1,11):
L1 = [F for F in range(1, 11): F.extend('File' + str(i))]
L1 = [F for F in range(1, 11) L1.extend('File' + str(F))]
L1 = [F for F in range(1, 11) ('File' + str(F))]
L1 = [F for F in range(1, 11) 'File' + str(F)]
L1 = []
l1 = [ 'File' + str(i) for i in range(1,11)]for
L1
l1
L1 = l1
L1
L2 = ['File14', 'File16', 'File3', 'File18', 'File20', 'File7', 'File21']
L2
for F in L2:
	if F in L1:
		print(F, "is in !")
exit()
os.listdir('.')
 import os, sys
import os
import sys
os.listdir('.')
exit()
	print('ure.sh is in', F)
	F.extend(files)
exit()
L = [0,1,2,3,4,5,6,7,8,9]
for N in L:
	print(L)
for N in range(len()):
	print(L(N))
for N in range(len(L)):
	print(L(N))
for N in range(len(L)):
	print(L[N])
data_list = [1,2,3,4,5,6]
print("\n".join(line for line in (str(index) + ": " + str(item) for index, item in enumerate(data_list)) ) )
for NUM in range(0,1001):
	print(NUM)
for NUM in range(0,1001):
	if ( NUM//2 == 0):
		print(NUM)
	else:
		continue
for NUM in range(0,1001):
	if ( NUM//2 == 0):
		print(NUM)
for NUM in range(0,1001):
	if ( NUM % 2 == 0):
for NUM in range(0,1001):
	if ( NUM % 2 == 0):
		print(NUM)
for NUM in range(0,1001):
	if not ( NUM % 2 == 0):
		print(NUM)
exit()
L = []
print(L)
for N in range(1, 11):
	L.extend(N)
for N in range(1, 11):
	L.extend(str(N))
L
L = [g
L = []
L
L.extend(1, 2, 3)
L.extend(1)
L
B = [1, 2, 3, 4, 5]
B
L.extend(B)
L
L = [0]
L
for N in range(1,6):
	L.append(N)
L
L = []
for N in range(1,6):
	L.append(N)
L
exit()
L1 = [1, 2, 3]
L2 = [1, 2, 3]
L1 == L2
L2 = [1, 0 ,3]
L1 == L2
exit()
S = GREGOR
S = "GREGOR"
S
L = list(S)
L
for N in L: print(N)
for N in L:
	print(L[-(N-1)]
print L[-1]
L
print L[-1]
print(L[-1])
for i in len(L):
	print(L[-i])
for i in len(L):
	print(L[-i])
	i +=1
for i in len(L):
	print(L[i])
for i in len(L):
	print(i)
len(L)
for i in range(len(L)):
	print(L[i])
for i in range(len(L)):
	print(L[-i])
for i in range(len(L)):
	print(i)
for i in range(len(L)):
	print(-i)
for i in range(len(L)):
	print(-(i+1))
for i in range(len(L)):
	print(L[-(i+1)])
for i in range(len(L)):
L2 = []
L1
L
L2
for i in range(len(L)):
	L2.append(L[-(i+1)])
L2
L == L2
L = ["A", "N", "A"]
L
L2 = []
for i in range(len(L)):
	L2.append(L[-(i+1)])
L == L2
exit()
a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
a
b = [x for x in a if x*(2x+1)%2 == 0]
b = [x for x in a if x*(2*x+1)%2 == 0]
c = [x for x in a if x%2 != 0]
c
exit()
elements = ["ROCK", "SCISSORS", "PAPER", "QUIT"]
elements
if "ROCK" or "SCISSORS" not in elements:
	print("NOT OK!")
else:
	print("OK!")
S1 = "ROCK"
S2 = "PAPER"
if S1 in elements: print("OK")
if S1 and S2 in elements: print("OK")
exit()
L = [x for x in range(1, 16)]
L
L2 = L1[:]
L2 = L[:]
L2
L2 = L[1:]
L2
L2 = L[-1]
L2
L2 = [x for x in L[0] and L[-1 ]]
L2 = [x for x in L[0] and L[-1]]
L2 = [L[0], L[-1]]
L2
def sub():
	return [L[0], L[-1]]
L2 = sub()
L2
L2 = []
L2 = sub()
L2
L2 = []
def sub2(LST):
	return [LST[0], LST[-1]]
L2 = sub2(L)
L2
exit()
uit()
quit()≈æ
quit()
exit()
L = [1, 2, 3, 4, 5, 6, 7, 8, 9]
head, *tail = L
head
tail
for i in L:
	head, *tail = L
exit
exit()
S = "Gregor Redelonghi"
for i, c in enumerate(S): print(1, c)
for i, c in enumerate(list(S)): print(1, c)
for i, c in enumerate(S): print(1, c)
E = enumerate(S)
E
for i, c in E: print(i, c)
S
for i, c in enumerate(s): print(i, c)
for i, c in enumerate(S): print(i, c)
for i, c in enumerate(S): print(1, c)
S
for i, c in enumerate(S): print(1, c)
S = "Gregor Redelonghi"
for i, c in enumerate(S): print(1, c)
for i, c in E: print(1, c)
E = enumerate(S)
for i, c in E: print(1, c)
M = enumerate(S)
for i, c in M: print(1, c)
for i, c in m: print(1, c)
for i, c in M: print(1, c)
M
for i, c in M: print(1, c)
S
M = enumerate(S)
for i, c in M: print(1, c)
help(enumerate)
[(i, c) for i, c in enumerate(S)]
for i, c in enumerate(S):
	print(i)
	print(c)
for i, c in enumerate(S):
	print(i, c)
for i, c in enumerate(S):
	print(i, c)
for i, c in enumerate(S):
	print(i+1, c)
for i, c in enumerate(S): print(i, c)
S
for i, c in enumerate(S): print(i, c)
for i, c in enumerate(S): print(i+1, c)
exit()
import os, sys
os.system('getcwd')
os.system('pwd')
os.system('ls', 'l')
import subprocess
subprocess.cal('ls'. '-l')
subprocess.cal('ls', '-l')
subprocces.call("ls", "-l", curdir)
print(curdir)
subproccess.call('ls')
subprocess.call('ls')
subprocess.call('ls', '-l')
subprocess.popen('ls', '-l')
exit()
import os, sys, subprocess
subprocess.call(["ls", "-l"])
subprocess.call(["ls", "-l"]) | less
subprocess.call(["ls", "-1"]) | less
subprocess.call(["ls"]) | less
subprocess.call("ls") | less
F = "fjl.txt"
os.stat(F)
os.stat(F).st_mtime
os.stat(F).st_ctime
os.stat(F)
os.stat("sendpys1-en-2.py")
os.stat("sendpysl-en-2.py")
os.stat("sendpysl-en-2.py").st_mtime
exit()
N = "01:59:59,59"
N
H1, M1, S1 = N.split(":")
H1
M1
S1
S2 = int(S1) + 350
int(S1)
S1.replace('', '.')
S1
S1.replace(',', '.')
S2 = int(S1.replace(',', '.'))
S2
int(59.25)
int(59,25)
Si = S1.replace(',', '.')
Si
int(Si)
Si / 2
Si / 2.0
int(Si) / 2.0
float(Si) / 2.0
float('59,25')
float('59.25')
S1
Si = float(S1.replace(',', '.'))
Si
int(Si)
H1
M1
Si
S1, Sid = Si.split(',')
Sis, Sid = S1.split(',')
Sis
Sid
exit>()
exit()
L = "01:41:55,276 --> 01:41:56,903"
L1, L2 = L.split(' --> ')
L1, L2
H1, M1, S1 = L1.split(':')
H1, M1, S1
H2, M2, S2 = L2.split(':')
H2, M2, S2
E = ':'.join(H1, M1, S1)
E = ':'.join(list(H1, M1, S1))
list(H1, M1, S1)
H1
M1
S1
S2 = H1 + ":" + M1 + ":" + S1
S2
E = ':'.join([H1, M1, S1])
E
L1
L2
LL = [L1, L2]
LL
" --> ".join(LL)
exit()
f = open("elysium-yify-english.srt", "r")
f.readlines()
f.close()
f.readlines()
f = open("elysium-yify-english.srt", "r")
f.readlines()
f.close()
f = open("elysium-yify-english.srt", "r")
f.readline()
f.readline().strip()
f.close()
f = open("elysium-yify-english.srt", "r")
while true:
	if " --> " in f.readline():
	print(f.readline())
while true:
	if " --> " in f.readline():
		print(f.readline())
while True:
	if " --> " in f.readline():
		print(f.readline())
while True:
	if "-->" in f.readline():
		print("OK)
while True:
	if " --> " in f.readline():
		print("OK")
f.close()
exit()
import math
N = 37
math.log(N,2)
int(math.log(N,2))
2**5
N-(2**5)
math.log(5,2)
N-(2**5 + 2**2)
N - (2**5 + 2**2 + 2**0)
math.log(1,2)
int(math.log(1,2))
exit()
import math
LR = []
LR[5] = 1
LR[5].extend(1)
LR[5].expand(1)
LR
LR.insert(5,1)
LR
for i in range (0,4):
	LR.insert(i,0)
LR
LR[2] = 1
LR
LR[0] = 1
LR
LR.reversed()
LR[::-1]
math.log(37,2)
LR = []
N
N = 37
N
LR
i = int(math.log(N,2))+1
i
LR.insert(6,1)
LR
for j in range(0,i-1):
	LR.insert(j,0)
LR
exit()
ord(a)
ord("a")
ord("A")
help(ord)
a = "Gregor Redelonghi)
a = "Gregor Redelonghi"
ord(a)
for char in a:
	print(ord(vhar))
for char in a:
	print(ord(char))
for char in a:
	print(char, " --> ", ord(char))
for char in a:
	print(sum(ord(char)))
for char in a:
	print(sum(int(ord(char))))
for char in a:
	print char
for char in a:
	print(char)
for char in a:
	sum += ord(char)
print(sum)
for char in a:
	vst += ord(char)
vst
for char in a:
	vst += ord(char)
for char in a:
	print(ord(char))
for char in a:
vst = 0
for char in a:
	vst += ord(char)
vst
for char in a:
	hash += ord(char)
print(hash)
for char in a:
	hash += ord(char)
for char in a:
	hash = hash + ord(char)
hash = 0
for char in a:
	hash = hash + ord(char)
hash
exit
exit()
print(bin(256))
A = bin(256)
print(A[2:])
min(2, 4, 1)
min("aa", "ab", "za")
min("ac", "ab", "za")
hex(256)
print(hex(256)[2:])
exit()
def sum_of_n(n):
	the_sum = 0
	for i in range (1, n+1):
		the_sum = the_sum + 1
	return the_sum
sum_of_n(10)
def sum_of_n(n):
	the_sum = 0
	for i in range (1, n+1):
		the_sum = the_sum + i
	return the_sum
sum_of_n(10)
exit()
L1 = list("Gregor Redelonghi")
L1
for i in len(L1):
L2 = []
for i ina range(len(L1)):
for i in range(len(L1)):
	L2.append(pop(L1))
for i in range(len(L1)):
	L2.append(L1.pop())
L2
print(','.join(L1))
L2
','.join(L2)
', '.join(L2)
''.join(L2)
''.joinL1; ''.join(L2)
''.join(L1); ''.join(L2)
L1
S = "Gregor Redelonghi"
L1 = list(S)
L1
for i in range(len(L1)):
L2 = []
L2
for i in range(len(L1)):
	L2.append(L1.pop())
L2
L1
print(S, L2)
print(S, ''.join(L2))
print(S," <-->", ''.join(L2))
print(S," <--> ", ''.join(L2))
exit()
range(4)
print(range(4))
for i in range(4): print(i)
exit()
class Queue:
	def __init__(self):
		self.items = []
q = Sueue()
q = Queue()
class Queue:
	def __init__(self):
		self.items = []
	
	def is_empty(self):
		return self.items == []
	
	def enqueue(self, item):
		self.items.insert(0, item)
	
	def dequeue(self):
		return self.items.pop()
	
	def size(self):
		return len(self.items)
q = Queue
q.enqueue('Gregor')
q.is_empty()
q
q.size()
q.size(self)
q.size()
q = Queue()
q.sizr()
q.size()
q.enqueue('Gregor')
q.size()
q
q.enqueue('Redelonghi')
q.size()
q.enqueue('Valvasorjeva ulica 5')
q.enqueue('1000 Ljubljana')
q.size()
q.dequeue()
q.size()
q.dequeue()
q.size()
q.dequeue()
q.size()
q.dequeue()
q.size()
exit
exit()
99999999999*99999999999
exit()
def gr_ln(n):
	print("-" * n)
gr_ln(70)
gr_L = gr_ln(70)
gr_L
run(gr_L)
eval(gr_L)
print(gr_L)
gr_L
gr_L = gr_ln(70)
exit()
7%3
7//3
769//10
769%10
exit()
254//2
254%2
exit()
import stack
s = Stack()
s = stack.Stack()
s.size()
s.add('Gregor Redelonghi')
s.is_empty()
exit()
import stack
s = stack.Stack()
s.size()
s.push('Gregor Redelonghi')
s.size()
s.peek()
exit()
import stack
s = stack.Stack()
s.push('Gregor Redelonghi')
s.peek()
s.push('Tadeja Mali Redelonghi')
s.peek()
s.size()
s.push('Uninvited Guest')
s.peek()
print(s.items)
if 'Uninvited Guest' in (s.items):
	print("KRIZA!!!")
else:
	print("It's OK. Good to go")
s.pop()
if 'Uninvited Guest' in (s.items):
	print("KRIZA!!!")
else:
	print("It's OK. Good to go")
def test():
	if 'Uninvited Guest' in (s.items):
		print("KRIZA!!!")
	else:
		print("It's OK. Good to go")
test()
s.push('En kul tip')
s.push('≈†e ne kul tip')
s.size()
print(items)
print(s.items)
s.pop()
print(s.items)
test
test()
s.push('Uninvited Guest')
test()
s.pop()
test()
s.show()
import stack
s.show()
exit()
import stack
s = stack.Stack()
s.size()
s.push('Gregor', 'Tadeja', 'Mark')
s.push('Gregor')
s.push('TAdeja')
s.pop()
s.push('TAdeja')
s.pop()
s.push('Tadeja')
s.push('Zala')
s.push('≈†pela')
s.push('Mark')
import stack
s.test()
exit()
import stack
s = stack.Stack()
s.size()
s.test()
s.push('Gregor')
s.push('Tadeja')
s.push('Mark')
s.push('Zala')
s.push('≈†pela')
s.push('Uninvited Guest')
s.test()
s.pop()
s.push('uninvited guest')
s.test()
s.pop()
s.test()
T = s.test()
T
print(t)
print(T)
T
gr_T = s.test()
gr_T
eval(gr_T)
eval(str(gr_T))
s.test()
s.is_empty()
not s.is_empty()
def fct(n):
	if n <= 1:
		result = 1
	
	else:
		result = n * fct(n-1)
	return result
fct(5)
fct(3)
fct(1)
fct(0)
fct(-10)
fct(4)
fct(125)
fct(1024
fct(1024)
fct(104)
fct(333)
fct(999)
fct(699)
fct(710)
fct(810)
fct(910)
fct(950)
fct(980)
fct(990)
fct(995)
fct(999)
fct(998)
fct(1001)
fct(1000)
fct(998.9)
fct(980.1))
fct(980.1)
fct(980)
fct(45.2)
fct(33.7
)
fct(3.5)
fct(3.9)
fct(4)
3.9*3.9
3.9*3.9*3.9
1*2*3.9
1*2*3*4
1*2*3*3.9
1.9*2.9*3.9
cd
fct(8)
fct(64)
exit()
100 % 10
exit()
import stack
s = stack.Stack()
s.show()
s.push(0)
s.show()
s.push(0)
s.show()
s.push(1)
s.show()
while not s.is_empty():
res = ""
while not s.is_empty():
	res = res + str(s.pop())
res
s.is_empty()
s.show()
s.push(0)
s.push(1)
s.show()
s.is_empty()
print(s.pop())
s.show()
print(str(s.pop()))
s.show()
s.push(0)
s.push(1)
s.show()
s.pop()
s.show()
s.pop()
s.show()
s.pop()
s.show()
s.push("0")
s.push("1")
s.show()
print(s.pop())
exit()
import stack
s = stack.Stack()
s.push(0)
s.push(1)
s.show()
s.is_empty()
while not s.is_empty():
res =""
while not s.is_empty():
	res = res + str(s.pop())
res
exit()
import turtle
exit()
import turtle
exit()
2**(64-1)
26^63
2^63
2**63
2**64
(2**64) - 1
((2**64) - 1)/(365*24*60*60)
exit()
16^16384
16^2
16**2
16**16384
print(2^3)
print(2**3)
print(2**(1/2))
print(2**0.5))
print(2**0.5)
print(2**(1/3))
print((2**(1/3))**3)
exit()
L = [x for None in range 10]
L = [x for None in range(11)]
L = [None for x in range(11)]
L
L = []
L
L = [None for x in range(10)]
L
L[5] = "Na petem mestu sem!"
L
L = []
L = [None for x in range(10)]
n = 5
L[n-1] = "Na", n, "-tem mestu sem!"
L
L = []
L[n-1] = "Na" + str(n) + "-tem mestu sem!"
L
L = [None for x in range(10)]
L
L[n-1] = "Na" + str(n) + "-tem mestu sem!"
L
L[4] = None
L
L[n-1] = "Na " + str(n) + "-tem mestu sem!"
L
m = 11
for i in range(1,12):
	print(i, i%m)
for i in range(1,12):
	j = i/m
	print(i, j, m, (j - j/m)*m)
for i in range(1,12):
	j = i%m
	print(i, j)
for i in range(1,12):
	j = i/m
	print(i, j, m, int((j - j/m)*m))
for i in range(m):
	j = i/m
	print(i, j, m, int((j - j/m)*m))
for i in range(m):
	j = i/m
	print(i, j, int((j - j/m)*m))
m = 18
for i in range(m):
	j = i/m
	print(i, j, int((j - j/m)*m))
def hashf(m, item):
	return item % m
for i in [22,78,45, 22,77,89]:
	print(hashf(11,i))
for i in [22,78,45, 22,77,89]:
	print(i, hashf(11,i))
for i in [54, 26, 93, 17, 77, 31]:
	print(i, hashf(11,i))
for i in [54, 26, 93, 17, 77, 31, 102, 9, 33]:
	print(i, hashf(11,i))
for i in [54, 26, 93, 17, 77, 31]:
	print(i, i*(1-i/11))
for i in [54, 26, 93, 17, 77, 31]:
	print(i, i*(1-(i/11)))
for i in [54, 26, 93, 17, 77, 31]:
	print(i, i*int(1-(i/11)))
i = 54
i - (i/11)
i - int(i/11)
54/11
int(54/11)
54 - int(54/11)
54 - int(54/11)*11
i - int(i/11)*11
for i in [54, 26, 93, 17, 77, 31]:
	print(i, i - int(i/11)*11)
exit
D = {}
for i in [1, 2, 3, 4, 5]:
	D[i*6] = i
D
i = 6
D[i/6]
print(D[i/6])
D
print(D[6])
i = 1
print(D[i*6])
i = 5
if i*6 is in D:
if i*6 in D:
	print(D[i*6])
i = 7
if i*6 in D:
	print(D[i*6])
exit()
help(09052016_test.py)
dir(09052016_test.py)
dir(__danes)
dir(__danes.py)
exit()
import 09052016_test
exit()
import __danes
import 09052016_test
exit()
import test_test
help(test_test)
print(test_test.__doc__)
exit()
import test_20160509
print(test_test.__doc__)
print(test_20160509.__doc__)
help(test_20160509)
exit()
import __today
print(__today.__doc__)
help(__today)
exit()
import __today
print(__today.__doc__)
help(__today)
exit()
import 20170203_args
exit()
import args_20170203
imort args_20170203
import args_20170203
import args_20170203 d
help(args_20170203)
import args_20170203
import romb
help(romb)
print(romb.__doc__)
exit()
import for_while_funcs_test_20170419
help(for_while_funcs_test_20170419)
exit
exit()
import forl_if-break-cond_test_20170504
exit()
import forl_if_break_cond_test_20170504
exit()
import forl_1_1
import forl_1-1
import forl_1\-1
exit
exit()
2**1000 < 10**82
(2**1000)/(10**82)
2**1000 =
2**1000
10**87
2**10000
2**100
2**1000
print(".2E".format(2**1000))
print("{.2E}".format(2**1000))
print("{.2E}".format(float(2**1000)))
print("{:.2E}".format(2**1000))
print("{:.6E}".format(2**1000))
print("{:E}".format(2**1000))
print("{:E}".format(2**1000)); print("{:E}.format(10**82)")
print("{:E}".format(2**1000)); print("{:E}".format(10**82))
print("{:E}".format(2**1000)) / print("{:E}".format(10**82))
print("{:E}".format(2**1000)); print("{:E}".format(10**82))
print("{:E}".format(2**1000/10**82))
2**13
exit()
exit>()
exit()
D = {1:"Gregor", 2:"Tadeja", 3:"Zala", 4:"Mark", 5:"Spela"}
D
D[1]
D[5]
for i in range(4): print D[i]
for i in range(4): print(D[i])
for i in range(4): print D[i]
for i in range(4): print(D[i])
for i in range(5): print(D[i])
for i in range(1,5): print(D[i])
for i in range(1,6): print(D[i])
for i in range(1,7): print(D[i])
for i in range(1, len(D)): print(D[i])
for i in range(1, len(D)+1): print(D[i])
if 4 in D.keys(): print("OK!")
if 14 in D.keys(): print("OK!")
else: print("NOT THERE!")
if 4 in D.keys(): print("OK!")
else: print("NOT THERE!")
if 4 in D.keys(): print("OK!"); print(D[4])
else: print("NOT THERE!")
if 4 in D.keys(): print("OK!", end=""); print(D[4])
else: print("NOT THERE!")
if 4 in D.keys(): print("OK!", end=" "); print(D[4])
else: print("NOT THERE!")
if 4 in D.keys(): print("OK!", end=" "); print(D[4]); else: print("NOT THERE!")
if 4 in D.keys(): print("OK!", end=" "); print(D[4]) else: print("NOT THERE!")
if 4 in D.keys(): print("OK!", end=" "); print(D[4]); else: print("NOT THERE!")
print("OK", end=" "); print(D[i]) if i=4 in D.keys else print("NOT THERE!")
print("OK", end=" "); print(D[4]) if 4 in D.keys else print("NOT THERE!")
print("OK", end=" ") if 4 in D.keys else print("NOT THERE!")
print("OK") if 4 in D.keys() else print("NOT THERE!")
print("OK", end=" "); print(D[4]) if 4 in D.keys() else print("NOT THERE!")
print("OK!", end=" "); print(D[4]) if i=4 in D.keys() else print("NOT THERE!")
i = 4; print("OK!", end=" "); print(D[4]) if i in D.keys() else print("NOT THERE!")
i = 14; print("OK!", end=" "); print(D[4]) if i in D.keys() else print("NOT THERE!")
i = 4
print("OK!", end=" "); print(D[4]) if i=4 in D.keys() else print("NOT THERE!")
print("OK!", end=" "); print(D[4]) if i in D.keys() else print("NOT THERE!")
i = 15
print("OK!", end=" "); print(D[4]) if i in D.keys() else print("NOT THERE!")
print("OK!", end=" ") and print(D[4]) if i in D.keys() else print("NOT THERE!")
i = 4
print("OK!", end=" ") and print(D[4]) if i in D.keys() else print("NOT THERE!")
print("OK!", end=" ") and print(D[i]) if i in D.keys() else print("NOT THERE!")
i = 4
print("OK!", end=" ") and print(D[i]) if i in D.keys() else print("NOT THERE!")
print("OK!", end=" ") print(D[i]) if i in D.keys() else print("NOT THERE!")
print("OK!", D[i]) if i in D.keys() else print("NOT THERE!")
i = 15
print("OK!", D[i]) if i in D.keys() else print("NOT THERE!")
D
exit()
import pygame
exit()
import json
path = '/c/Users/gregor.redelonghi/Dropbox/ODPRTO/_PYTHON/usagov_bitly_data2012-03-16-1331923249.txt'
records = [json.loads(line) for line in open(path)]
records[0]
records[0]['tz']
for i in records: print(i)
for id in records.keys(): print(records[0][id])
print(records[0])
L = list(records[0])
L
D = dict(records[0])
D
print(D)
for i in D.keys(): print(i, D[i])
for i in D.keys(): print(i + ': ' +  D[i])
for i in D.keys(): print(i + ':' +  D[i].ljust(15))
for i in D.keys(): print(i + ':' +  D[i])
for i in D.keys(): print(i, D[i])
for i in D.keys(): print(i, str(D[i]).ljust(15))
for i in D.keys(): print(i, str(D[i]).rjust(15))
for i in D.keys(): print(i.ljust(15), D[i])
for i in D.keys(): print(i.ljust(5) + ":", D[i])
for i in D.keys(): print((i + ":").ljust(5), D[i])
L
D
for i in D.keys(): print((i + ":").ljust(5), D[i])
from pandas import DataFrame, Series
import pandas
import pandas3
exit>()
exit()
def f(x):
	result = x**(2-x)
	return result
f(2)
f(3)
f(4)
2**(2-4)
4**(2-4)
def kvadriraj(x):
	kvadrat = x**2
	return kvadrat
kvadriraj(16)
kv = kvadriraj(x)
kv = kvadriraj
kv(5)
kv(100)
help(kv)
help(kvadriraj)
dir(kvadriraj)
exit()
import numpy
pip search numpy
pip help
pip --help
pip3 help
pip
	exit()
pip search numpy
exit()
import pandas
import numpy
exit()
L = [0, 1, 2, 3, 4]
l2 = [11, 12, 13]
L.append(5)
L
L.append([6, 7, 8])
L
L[6]
L[6].rmeove()
help(L)
L.pop([6])
L.pop(6)
L
L.extend([6, 7, 8, 9, 10])
L
L.extend(l2)
L
LE = L.rec+versed()
LE = L.reversed()
LE = L.reverse()
LE
L
L.reverse()
L
help(cmp)
help(cmp())
cmp
exit()
import re
ptrn = "Gregor Redelonghi, Valvasorjeva ulica5, 1000 Ljubljana"
re.match("Gre", ptrn)
re.search("Gre", ptrn)
print(ptrn)≈æ
print(ptrn)
match = re.search("Gre", ptrn)
match
print(match)
if match: print("OK!")
if match: print(match.group())
match = re.search("G.\{2\}", ptrn)
if match: print(match.group())
match = re.search("G.{2}", ptrn)
if match: print(match.group())
match = re.search("G.{12}", ptrn)
if match: print(match.group())
match = re.search("\d", ptrn)
if match: print(match.group())
match = re.search("\d*", ptrn)
if match: print(match.group())
match = re.search("\d+", ptrn)
if match: print(match.group())
ptrn = "Gregor Redelonghi, Valvasorjeva ulica 5, 1000 Ljubljana"
match = re.search("\d+", ptrn)
if match: print(match.group())
match = re.search("\d.*", ptrn)
if match: print(match.group())
match = re.search("\W", ptrn)
if match: print(match.group())
match = re.search("\W*", ptrn)
if match: print(match.group())
match = re.search("\W", ptrn)
if match: print(match.group())
exit()
L = ["Gregor", "Redelonghi", 1, 2, 3, 4, 5, "Ocka"]
ime, priimek, *st, status = L
ime
priimek
st
status
nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]
print(nums.sorted())
print(sorted(nums))
import heapq
heapq.heapify(nums)
nums
exit()
name = Gregec
name = "Gregec"
print(f"Halo {name}! How are you?")
print("Halo {name}! How are you?".format(name))
name
print("Halo name. How are you?".format(name))
print("Halo {name}. How are you?".format(name))
print(Hello {}, How ar3e you?".format(name))
name
print("Hello {}, How ar3e you?".format(name))
print("Hello {name}, How ar3e you?".format(name))
print("Hello {0}, How ar3e you?".format(name))
print("Hello {1}, How ar3e you?".format(name))
print("Hello {1}, How ar3e you? Are you {0}".format(name, "Pussy"))
print("Hello {1}, How ar3e you? Are you {0}??".format(name, "Pussy"))
exit()
myString = "Gregor Redelonghi"
myNums ? [1, 2, 3, 4, 5, 6, 7, 8, 9]
myNums = [1, 2, 3, 4, 5, 6, 7, 8, 9]
myMix = ["Gregec", "Numero", 1, 2, 3]
myMix
globals()
def vsota(A, B):
	return A + B
vsota(2, 5)
def vsota(A, B):
	sum = A + B
	return sum
vsota(2, 5)
V1 = vsota(10, 2)
V1
def V(X, Y):
	return X + Y
V(1,2)
V(1, 2)
def vsota(X, Y):
	return X + Y
vsota(2, 3)
vsota("A", "B")
vsota("A", 3)
vsota("A", str(3))
vsota(100, 200)
v(500,700)
V(500,700)
EXIT()
exit()
dir()
exit()
for E in range(1,10):
	print("2^" + str(E) + " = " + str(2**E)) 
for E in range(1,11):
	print("2^" + str(E) + " = " + str(2**E)) 
for E in range(1,101):
	print({0:} {1:}. format("2^str(E)", str(2**E))) 
for E in range(1,101):
	print({} {} .format("2^str(E)", str(2**E))) 
for E in range(1,101):
	print("{} {}".format("2^" + str(E) + " = ", 2**E))
	print("{} {:+5}".format("2^" + str(E) + " =", 2**E))
for E in range(1,101):
	print("{} {:+5}".format("2^" + str(E) + " =", 2**E))
for E in range(1,101):
	print("{} {:+5f}".format("2^" + str(E) + " =", 2**E))
for E in range(1,101):
	print("{} {:5f}".format("2^" + str(E) + " =", 2**E))
for E in range(1,101):
	print("{:s} {:f}".format("2^" + str(E) + " =", 2**E))
	print("{:s} {:f}".format("2^" + str(E),  "=", 2**E))
for E in range(1,101):
	print("{:s} {:f}".format("2^" + str(E),  "=", 2**E))
for E in range(1,101):
	print("{:s} {:f}".format("2^" + str(E),  "=" + str(2**E)))
for E in range(1,101):
	print("{:s} {:s}".format("2^" + str(E),  "=" + str(2**E)))
for E in range(1,101):
	print("{:s} {:15s}".format("2^" + str(E),  "= " + str(2**E)))
for E in range(1,101):
	print("{:s} {:-15s}".format("2^" + str(E),  "= " + str(2**E)))
for E in range(1,101):
	print("{:s} {:<15s}".format("2^" + str(E),  "= " + str(2**E)))
for E in range(1,101):
	print("{:s} {:>15s}".format("2^" + str(E),  "= " + str(2**E)))
for E in range(1,101):
	print("{:s} {:>56s}".format("2^" + str(E),  "= " + str(2**E)))
for E in range(1,101):
	print("{:>10s} {:s}".format("2^" + str(E),  "= " + str(2**E)))
for E in range(1,101):
	print("{:<10s} {:s}".format("2^" + str(E),  "= " + str(2**E)))
for E in range(1,101):
	print("{:<7s} {:s}".format("2^" + str(E),  "= " + str(2**E)))
for E in range(1,101):
	print("{:<6s} {:s}".format("2^" + str(E),  "= " + str(2**E)))
for E in range(1,101):
	print("{:<5s} {:s}".format("2^" + str(E),  "= " + str(2**E)))
print("INT:  {0:d}; HEX:  {1:x}; BIN: {2:b}".format(42))
"INT:  {0:d}; HEX:  {1:x}; BIN: {2:b}".format(42)
"INT:  {0:d}; HEX:  {0:x}; BIN: {0:b}".format(42)
"INT:  {0:d}; HEX:  {0:#x}; BIN: {0:#b}".format(42)
"INT:  {0:#d}; HEX:  {0:#x}; BIN: {0:#b}".format(42)
for NUM in range(1,1000):
	print("Num: {0:d} --> bin: {0:#b}".format(NUM))
>>> for E in range(1,101):
...     print("{:<5s} {:s}".format("2^" + str(E),  "= " + str(2**E)))
...
2^1   = 2
2^2   = 4
2^3   = 8
2^4   = 16
2^5   = 32
2^6   = 64
2^7   = 128
2^8   = 256
2^9   = 512
2^10  = 1024
2^11  = 2048
2^12  = 4096
2^13  = 8192
2^14  = 16384
2^15  = 32768
2^16  = 65536
2^17  = 131072
2^18  = 262144
2^19  = 524288
2^20  = 1048576
2^21  = 2097152
2^22  = 4194304
2^23  = 8388608
2^24  = 16777216
2^25  = 33554432
2^26  = 67108864
2^27  = 134217728
2^28  = 268435456
2^29  = 536870912
2^30  = 1073741824
2^31  = 2147483648
2^32  = 4294967296
2^33  = 8589934592
2^34  = 17179869184
2^35  = 34359738368
2^36  = 68719476736
2^37  = 137438953472
2^38  = 274877906944
2^39  = 549755813888
2^40  = 1099511627776
2^41  = 2199023255552
2^42  = 4398046511104
2^43  = 8796093022208
2^44  = 17592186044416
2^45  = 35184372088832
2^46  = 70368744177664
2^47  = 140737488355328
2^48  = 281474976710656
2^49  = 562949953421312
2^50  = 1125899906842624
2^51  = 2251799813685248
2^52  = 4503599627370496
2^53  = 9007199254740992
2^54  = 18014398509481984
2^55  = 36028797018963968
2^56  = 72057594037927936
2^57  = 144115188075855872
2^58  = 288230376151711744
2^59  = 576460752303423488
2^60  = 1152921504606846976
2^61  = 2305843009213693952
2^62  = 4611686018427387904
2^63  = 9223372036854775808
2^64  = 18446744073709551616
2^65  = 36893488147419103232
2^66  = 73786976294838206464
2^67  = 147573952589676412928
2^68  = 295147905179352825856
2^69  = 590295810358705651712
2^70  = 1180591620717411303424
2^71  = 2361183241434822606848
2^72  = 4722366482869645213696
2^73  = 9444732965739290427392
2^74  = 18889465931478580854784
2^75  = 37778931862957161709568
2^76  = 75557863725914323419136
2^77  = 151115727451828646838272
2^78  = 302231454903657293676544
2^79  = 604462909807314587353088
2^80  = 1208925819614629174706176
2^81  = 2417851639229258349412352
2^82  = 4835703278458516698824704
2^83  = 9671406556917033397649408
2^84  = 19342813113834066795298816
2^85  = 38685626227668133590597632
2^86  = 77371252455336267181195264
2^87  = 154742504910672534362390528
2^88  = 309485009821345068724781056
2^89  = 618970019642690137449562112
2^90  = 1237940039285380274899124224
2^91  = 2475880078570760549798248448
2^92  = 4951760157141521099596496896
2^93  = 9903520314283042199192993792
2^94  = 19807040628566084398385987584
2^95  = 39614081257132168796771975168
2^96  = 79228162514264337593543950336
2^97  = 158456325028528675187087900672
2^98  = 316912650057057350374175801344
2^99  = 633825300114114700748351602688
2^100 = 1267650600228229401496703205376
for NUM in range(1,1000): ; print("Num: {0:d} --> bin: {0:#b}".format(NUM))
for NUM in range(1,1000); print("Num: {0:d} --> bin: {0:#b}".format(NUM))
for NUM in range(1,1000): print("Num: {0:d} --> bin: {0:#b}".format(NUM))
for NUM in range(1,1000): print("Num: {0:<10d} --> bin: {0:#b}".format(NUM))
for NUM in range(1,1000): print("Num: {0:<5d} --> bin: {0:#b}".format(NUM))
for NUM in range(1,1000): print("Num: {0:<5d} --> bin: {0:b}".format(NUM))
for NUM in range(1,101): print("Num: {0:<5d} --> bin: {0:b}".format(NUM))
for num in range(5,12): for base in 'dXob': print '{0:{width}{base}}'.format(num, base=base, width=width); print
for num in range(1,17):
    for base in 'dXob':
        print '{0:{width}{base}}'.format(num, base=base, width=width)
for num in range(1,17):
    for base in 'dXob':
        print '{0:{width}{base}}'.format(num, base=base, width=width)
for num in range(1,17):
    for base in 'dXob':
        print{'0:{width}{base}}'.format(num, base=base, width=width)
for num in range(1,17):
    for base in 'dXob':
        print('0:{width}{base}}'.format(num, base=base, width=width)
    print
for num in range(1,17):
    for base in 'dXob':
        print('0:{width}{base}}'.format(num, base=base, width=width)
	print
for num in range(1,17):
    for base in 'dXob':
        print('0:{width}{base}}'.format(num, base=base, width=width)
    print()
   for num in range(1,17):
    for base in 'dXob':
        print('0:{width}{base}}'.format(num, base=base, width=width)
    print()
for num in range(1,17):
    for base in 'dXob':
        print('0:{width}{base}}'.format(num, base=base, width=width)
print()
width = 5
for num in range(1,17):
    for base in 'dXob':
        print('0:{width}{base}}'.format(num, base=base, width=width)
    print()
width = 5
for num in range(1,17):
    for base in 'dXob':
        print('0:{width}{base}}'.format(num, base=base, width=width)
	print()
width = 5
for num in range(1,17):
    for base in 'dXob':
        print('0:{width}{base}}'.format(num, base=base, width=width)
width = 5
for num in range(1,17):
    for base in 'dXob':
        print('0:{width}{base}}'.format(num, base=base, width=width)
width = 5
for num in range(1,17):
    for base in 'dXob':
        print('0:{width}{base}}'.format(num, base=base, width=width)
	print()
width = 5
for num in range(1,17):
    for base in 'dXob':
        print('0:{width}{base}}'.format(num, base=base, width=width)
	print(NUM)
width = 5
for num in range(1,17):
	for base in 'dXob':
		print('{0:{width}{base}}.format(num, base=base, width=width)
width = 5
for num in range(1,17):
	for base in 'dXob':
		print('{0:{width}{base}}.format(num, base=base, width=width))
width = 5
for num in range(1,17):
	for base in 'dXob':
		print('{0:{width}{base}}'.format(num, base=base, width=width))
for num in range(1,17):
	for base in 'dXob':
		print('{0:{width}{base}}'.format(num, base=base, width=width))
	print()
for num in range(1,17):
	for base in 'dXob':
		print('{0:{width}{base}}'.format(num, base=base, width=width)),
	print()
for num in range(1,17):
	for base in 'dXob':
		print('{0:{width}{base}}'.format(num, base=base, width=width))
	print()
for num in range(5,12):
	for base in 'dXob':
		print('{0:{width}{base}}'.format(num, base=base, width=width)),
	print()
for num in range(5,12):
width = 5
for num in range(5,12):
	for base in 'dXob':
		print('{0:{width}{base}}'.format(num, base=base, width=width)),
	print()
width = 5
for num in range(5,12):
	for base in 'dXob':
		print('{0:{width}{base}}'.format(num, base=base, width=width), end = ' ')
	print()
for num in range(1,17):
	for base in 'dXob':
		print('{0:{width}{base}}'.format(num, base=base, width=width), end = ' ')
	print()
width = 7
for num in range(1,17):
    for base in 'dXob':
        print('{0:{width}{base}}'.format(num, base=base, width=width), end = ' ')
    print()
width = 7
for num in range(0,17):
    for base in 'dXob':
        print('{0:{width}{base}}'.format(num, base=base, width=width), end = ' ')
    print()
width = 7
for num in range(0,16):
    for base in 'dXob':
        print('{0:{width}{base}}'.format(num, base=base, width=width), end = ' ')
    print()
width = 7
for num in range(0,32):
    for base in 'dXob':
        print('{0:{width}{base}}'.format(num, base=base, width=width), end = ' ')
    print()
exit()
2**3 + 2**5
2//3
2**3
2**5
8+32
2**(3+5)
exit()
rain_percent = {1980: "17%", 1981: "15%", 1982: "10%"}
r = rain_percent
print(r)
print(r[1981])
print(r[1983])
print(r.get(1983, "88%")
)
print(r.get(1983, "88%"))
print(r.get(19, "88%"))
print(r.get(1981, "88%"))
print(r.get(1983))
EXIT()
exit()
import os
!ls
exit()
import os
help(os.stat())
help(os.stat)
os.stat(TEST.txt)
os.stat("TEST.txt")
filecmp
help(filecmp)
import filecmp
help(filecmp)
exit()
import filecmp
filecmp("TEST.txt", "TEST2.txt") 
help(filecmp)
cmp("TEST.txt", "TEST2.txt") 
filecmp.cmp("TEST.txt", "TEST2.txt") 
exit()
import filecmp
filecmp.cmp("TEST.txt", "TEST3.txt") 
exit()
import filecmp
filecmp.cmp("TEST.txt", "TEST3.txt") 
exit()
!ls -l
import subroccess
import subrocess
import subprocess
subrocess.call(["ls", "-l"])
subprocess.call(["ls", "-l"])
subprocess.call(["ls", "-1"])
exit()
import os, subprocess, system
import os, subprocess, sys
for root, dirs, files in os.walk("./"):
	file = os.patj.join(root.file)
exit()
L1 = range(1,11)
L1
L1 = [x for x in range(1,11)]
L1
map(bin(), L1)
print(map(bin, L1))
L2 = map(bin, L1)
L2
def sqr(x): return x**2
sqr(2)
map(sqr, L1)
print(map(sqr, L1))
L1
sgr(3)
sqr(3)
L2 = map(sqr, L1)
L2
import math
print(map(math.sqrt, L1))
import map
help(map())
help(map(L1))
help(map)
exit()
L1 = range(1,11)
L1
L1 = [ x for x in range(1,11)]
l1
L1
print(map(bin, L1))
print(list(map(bin, L1)))
for B in map(bin, L1): print(B)
for B in map(bin, L1): print(B, end=' ')
for B in map(bin, L1): print(B, end=' ',)
for B in map(bin, L1): print(B, end=' ', '\n')
for B in map(bin, L1): print(B, "\n", end=' ',)
for B in map(bin, L1): print(B, end=' ', "\n")
for B in map(bin, L1): print(B, end=' ')
for B in map(bin, L1): print(B, end='')
for B in map(bin, L1): print(B)
for B in map(bin, L1): print(B, end = '; ')
for B in map(bin, L1): print(B, end = '; '); print("\n")
for B in map(bin, L1): print(B, end = '; ')
sqr
sqr(2)
def sqr(x): return x**2
sqr
sqr(3)
def sqr(x): return x**2
sqr(2)
sqr(12)
sqr(11)
L1
print(list(map(sqr, L1)))
for N in map(sqr, L1): print(N)
for N in map(sqr, L1): print(N, end = ', ')
L2 = []
for N in L1: L2.append(bin(L1))
L2
for N in L1: L2.append(map(bin(L1)))
for N in L1: L2.append(bin(N))
L2
import math
print(map(math.sqrt, L1))
print(list(map(math.sqrt, L1)))
def EvenOdd(N):
	if N % 2 == 0
def EvenOdd(N):
	if N % 2 == 0:
		print("Even")
	else:
		print("Odd")
EvenOdd(3)
EvenOdd(15)
EvenOdd(16)
print(list(map(EvenOdd, L1)))
L1
print(list(map(EvenOdd, L1)), end =", ")
print(list(map(EvenOdd, L1)), end = ", ")
print(list(map(EvenOdd, L1)))
L1
for N in L1: EvenOdd(N)
for N in L1: EvenOdd(N), end =" "
for N in L1: EvenOdd(N)
list(map(EvenOdd, L1))
print(map(EvenOdd, L1))
nl = [1, 2, 3]
sl = ["one", "two", "three"]
rl = ["1-st", "2-cond", "3-rd"]
nl
sl
rl
print(list(map(lambda x, y, z: (x, y, z), nl, sl, rl)))
product = lambda x,y: x*y
product(10,5)
import operator
dir(operator)
print(operator.abs(12.456))
print(operator.abs(-12.456))
print(operator.abs(int(-12.456)))
L1
print(filter(lambda N; N % 2 == 0, L1))
print(filter(lambda N: N % 2 == 0, L1))
print(list(filter(lambda N: N % 2 == 0, L1)))
 L3 = list(filter(lambda N: N % 2 == 0, L1))
 L3 = [ x for x in list(filter(lambda N: N % 2 == 0, L1)) ]
L3 = [ x for x in list(filter(lambda N: N % 2 == 0, L1)) ]
L3
L4 = list(filter(lambda N: N % 2 == 0, L1))
L4
MN = ["Gregor Redelonghi", "Tadeja Mali Redelonghi", "Zala Redelonghi", ≈†pela Redelonghi", "Mark redelonghi", "Valvasorjeva", "ulica", "5"]
MN = ["Gregor Redelonghi", "Tadeja Mali Redelonghi", "Zala Redelonghi", "≈†pela Redelonghi", "Mark redelonghi", "Valvasorjeva", "ulica", "5"]
MN
f = lambda N: return len(MN[N]
f = lambda N: return len(MN[N])
f = lambda N: return len(MN)
f = lambda N: return len(N)
for E in NM: print(len(E))
for E in MN: print(len(E))
for E in MN: lambda E: return len(E) < 10
for E in MN: return len(E) < 10
for E in MN: print(len(E) < 10)
for E in MN: filter(lambda E: print(len(E) < 10), MN)
filter(lambda E: print(len(E) < 10), MN)
list(filter(lambda E: print(len(E) < 10), MN))
print(filter(lambda mys: len(mys < 10, MN))
print(filter(lambda mys: len(mys < 10, MN)))
print(list(filter(lambda mys: len(mys), MN)))
print(list(filter(lambda mys: len(mys) < 10, MN)))
print(list(filter(lambda mys: len(mys) > 10, MN)))
print(list(filter(lambda mys: len(mys) < 8, MN)))
print(list(filter(lambda mys: len(mys) > 15, MN)))
print(list(filter(lambda mys: "ela" in mys, MN)))
'%f' % 1.25
'%5.2f' % 1.25
'%.2f' % 1.25
'%.3f' % 1.25
'%.3f' % 3.1415927
'%8.3f' % 3.1415927
'%08.3f' % 3.1415927
'%-8.3f' % 3.1415927
'%-8.3f %f' % (3.1415927, 0.123456789)
'%-15.3f %f' % (3.1415927, 0.123456789)
'%0-15.3f %f' % (3.1415927, 0.123456789)
'%-015.3f %f' % (3.1415927, 0.123456789)
'%015.3f %f' % (3.1415927, 0.123456789)
'%-015.3f %f' % (3.1415927, 0.123456789)
'{:-015.3f} {:}f'.format(3.1415927, 0.123456789)
'{:-15.3f} {:}f'.format(3.1415927, 0.123456789)
'{:15.3f} {:}f'.format(3.1415927, 0.123456789)
'{:5.3f} {:}f'.format(3.1415927, 0.123456789)
'{:15.3f} {:}f'.format(3.1415927, 0.123456789)
'{:-15.3f} {:}f'.format(3.1415927, 0.123456789)
'{:-15f} {:}f'.format(3.1415927, 0.123456789)
'{:-15.3f} {:}f'.format(3.1415927, 0.123456789)
'{:-15.3f} {:f}'.format(3.1415927, 0.123456789)
'{:15.3f} {:f}'.format(3.1415927, 0.123456789)
'{:<5.3f} {:f}'.format(3.1415927, 0.123456789)
'{:<15.3f} {:f}'.format(3.1415927, 0.123456789)
'{:>15.3f} {:f}'.format(3.1415927, 0.123456789)
'{:=15.3f} {:f}'.format(3.1415927, 0.123456789)
'{:|15.3f} {:f}'.format(3.1415927, 0.123456789)
'{:^15.3f} {:f}'.format(3.1415927, 0.123456789)
'[{:^15.3f}] {:f}'.format(3.1415927, 0.123456789)
'[{:^15.3f}]{:f}'.format(3.1415927, 0.123456789)
'[{:<15.3f}]{:f}'.format(3.1415927, 0.123456789)
'[{:>15.3f}]{:f}'.format(3.1415927, 0.123456789)
'[{:>15.3f}]{:3.2f}'.format(3.1415927, 0.123456789)
'[{:>15.3f} ]{:3.2f}'.format(3.1415927, 0.123456789)
L = 20
'[{:>*.3f} ]{:3.2f}'.format(L, 3.1415927, 0.123456789)
'[{:>*f}]{:3.2f}'.format(20, 3.1415927, 0.123456789)
'[{:*f}]{:3.2f}'.format(20, 3.1415927, 0.123456789)
'[%*f}]%3.2f' % (20, 3.1415927, 0.123456789)
'[%*f}]%3.2f' % (L, 3.1415927, 0.123456789)
'[%-*f}]%3.2f' % (L, 3.1415927, 0.123456789)
x = set([1, 2, 3, 4])
x
y = set([2, 2, 3, 3, 4, 4, 5, 5])
y
x || y
print(x || y)
print(x | y)
print(x & y)
print(x | y)
print(x - y)
print(y - x)
print(y ^ x)
exit()
MyFam = {}
for k, v in ["oce", "zena", "hci-1", "sin","hci-2"], ["Gregor Redelonghi", "Tadeja Mali Redelonghi", "Zala Redelonghi", "Mark Redelonghi", "Spela Redelonghi"]:
	MyFam[k] = v
for k, v in ["oce", "zena", "hci-1", "sin", "hci-2"], ["Gregor Redelonghi", "Tadeja Mali Redelonghi", "Zala Redelonghi", "Mark Redelonghi", "Spela Redelonghi"]:
	print(k, v)
MyFam = {}
L1 = ["oce", "zena", "hci-1", "sin", "hci-2"]
L2 = ["Gregor Redelonghi", "Tadeja Mali Redelonghi", "Zala Redelonghi", "Mark Redelonghi", "Spela Redelonghi"]
for k, v in L1, L2:
	MyFam[k] = v
for k, v in L1, L2:
	print(k, v)
print(zip(L1, l2))
print(zip(L1, L2))
zip(L1, L2)
for L in zip(L1, L2):
	print(L)
for (k, v) in zip(L1, L2):
	MyFam[k] = v
MyFam
MyFam = {}
MyFam
for k, v in zip(L1, L2):
	MyFam[k] = v
MyFam
for k in MyFam.keys():
	if hci in k:
		print(MyFam[k])
for k in MyFam.keys():
	if "hci" in k:
		print(MyFam[k])
for k in MyFam.keys():
	if "hci" in k:
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if "hci", "zena" in k:
for k in MyFam.keys():
	if "hci" | "zena" in k:
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if ("hci", "zena") in k:
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if set(("hci", "zena")).issubset(MyFam):
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if set(("hci", "zena")).issubset(set(MyFam)):
for k in MyFam.keys():
	if set(("hci", "zena")).issubset(set(MyFam)):
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if set(("oce", "zena")).issubset(set(MyFam)):
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if set(("hci", "zena")).issubset(set(MyFam)):
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if "hci" in MyFAm and "zena" in MyFam:
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if "hci" in MyFam and "zena" in MyFam:
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if "hci" in MyFam.keys() and "zena" in MyFam.keys():
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if "hci" in MyFam or "zena" in MyFam:
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if k == "hci" K == "zena":
for k in MyFam.keys():
	if k == "hci" and k == "zena":
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if k == "hci" or k == "zena":
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if "hci" in k or "zena" in k:
		print(k + " = " + MyFam[k])
for k in MyFam.keys():
	if "moz" in k or "zena" in k:
		print(k + " = " + MyFam[k])
L = "Gregor Redelonghi, Valvasorjeva ulica 5, 1000 Ljubljana\n"
L
print(L)
print(L[:10])
print(L[:17])
print(L[:18])
print(L[:17], L[18:])
print(L[:17],L[18:])
print(L[:17], L[17:])
print(L[:17], L[18:22])
print(L[:])
print(L[1:-1])
print(L[:-1])
print(L[:-2])
print(L[:-1])
print(L[18:-1])
print(L[19:-1])
print(L[19:])
print(L[:])
print(L[:-1])
print(L[:-2])
print(L[:-1])
print(L[:])
L = print(L[:-1])
L
L = "Gregor Redelonghi, Valvasorjeva ulica 5, 1000 Ljubljana"
L
print(L[:-1])
!ls
! ls
def adder_factory(n):
	return lamda m, n=n: m+n 
def adder_factory(n):
	return lambda m, n=n: m+n 
add10 = adder_factory(10)
add10(4)
dir(adder_factory())
dir(adder_factory(10))
dir(adder_factory)
help(adder_factory)
myS = set('AaAaBBBcCdRRgThhJJjjJkkkK')
myS
print(MYs)
print(myS)
S = set(('one' ,'two', 'three', 'four', 'one', 'three', 'five'))
S
S.add('six', 'seven')
S.add('six')
S
A = ['seven', 'eight', 'nine', 'ten']
A
for i in A:
	S.add(i)
S
S.add('one')
S
def my_f():
	print("Hello World!")
my_f()
print(my_F())
print(my_f())
exit()
def F(**kwargs):
	print kwargs
def F(**kwargs):
	print(kwargs)
F('a':11, 'b':22, 'c':'Redelonghi')
F(a:11, b:22, c:"Redelonghi")
F(a=11, b=22, c="Redelonghi")
rgs = {'a':11, 'b':22, 'c':'Gregor Redelonghi'}
F(rgs)
F(**rgs)
def sqr(x):
	return x ** x
kv = lambda x: sqr(x)
kv(3)
for N in range(11):
	sqr(N)
sqr(3)
sqr(4)
for N in range(11):
	lambda N: N**2
for N in range(11):
	print(lambda N: N**2)
print(map(lambda x: x**2, range(1,11)))
def sqr(x): return x**2
print(map(sqr, range(1,11)))
for i in (map(sqr, range(1,11))): print(i)
T = map(sqr, range(1,11))
for i in T: print(i)
T
for i+2 in T: print(i)
for i in T: print(i+2)
for i in T: print(i+1)
for i in T: print(i)
T
T = map(sqr, range(1,11))
T
for i+1 in T: print(i)
T
for i in T: print(i)
for i in T: print(i+1)
for i in T: print(i)
T = map(sqr, range(1,11))
for i in T: print(i+1)
for i in T: print(i)
exit()
for L in open("seznam.txt", "rt").readlines():
	print(L)
for L in open("seznam.txt", "rt").readlines():
	print(L, end ='')
exit()
L = [ x for x: in range(1,11)]
L = [ x for x in range(1,11)]
L
L.pop()
L
L.append(10)
L
L.pop(L[3])
L
L.insert(4,5)
L
help(pop)
help(pop())
help(pop(1))
dir(pop())
dir(L)
help(L.pop()))
help(L.pop())
help(L.pop(1))
help(L.pop())
help(L.pop)
L
L.extend([9,10])
L
L.insert(0,0)
L
L.pop(5)
L
L.insert(5,6)
L
L[5]
L.insert(1,2)
L
pop(1)
L.pop(1)
L
L.insert(2,29
L.insert(2,2)
l
L
L.pop(6)
L
L.insert(6,6)
L
help(L)
dir(L)
L.omdex(8)
L.index(8)
L.insert(3,100)
L
L.insex(100)
L.index(100)
L.pop(3)
help(L.pop)
help(L.count)
L
L.extend([2,55,3,100,7,2])
L
L.counr(7)
L.count(7)
L.count27)
L.count(2)
L.count(3)
dir(L)
L = list(range(11))
L
L = list(range(2,11))
L
L.extend(10,10,11)
L.extend([10,10,11])
L
LB = L
LB
import timeit
timeit.timeit("F(), """
def F():
timeit.timeit("F(), """
	def F():
timeit.timeit("F()", """
def F():
	pass
""")
timeit.timeit("F()", """
def F():
i = 1
timeit.timeit("F()", """
def F():
	print(i)
	i += 1
""")
timeit.timeit("F()", """
def F():
i = 1
timeit.timeit("F()", """
def F():
	print(i)
	i += 1
""")
i = 1
timeit.timeit("F()", """
def F():
	print(i)
""")
timeit.timeit("F()", """
def F():
	print(Gregec)
""")
timeit.timeit("F()", """
def F():
	pass
""")
def F():
	pass
timeit.timeit("F()")
timeit.timeit(F())
X = 33
print(X)
print("X")
print("This is number " + X)
print("This is number " + str(X))
print("This is number " + X.__str__())
help()X)
help(X)
dir(X)
L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10 ,10 ,11, 1}
L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10 ,10 ,11, 1]
L
help(L)
L.index(10,11)
L.index(10)
L.index(10,10)
help(L)
L.index(10, 9, 11)
L.index(10, 5, 9)
L.index(7, 5, 9)
L.index(4, 5, 9)
L.index(5, 5, 9)
L.index(8, 5, 7)
import this
import math
print(math.pi)
print(22/7)
print(math.pi/(22/7))
print(math.pi/(22/7)*100)
def CELS(F):
	return (F-32)*(5/9)
CELS(40)
CELS(-40)
CELS(300)
CELS(100)
False and print("Hi")
True and print("Hi")
'a' == ('a' and 'b')
'a' == ('a' or 'b')
'b' == ('a' or 'b')
'b' == ('a' and 'b')
import calendar
help(calendar)
calendar.prcal(2017)
calendar.prmonth(2017)
help(calendar.prmonth)
calendar.prmonth(2017, 'october')
calendar.prmonth(2017, 10)
calendar.prmonth(2017, 10, 11)
calendar.prmonth(2017, 10, 25)
calendar.prmonth(2017, 10, 2
)
calendar.prmonth(2017, 10)
calendar.prmonths(2017, 10,11)
for mnt in range(3,10):
	calendar.prmonth(2017, mnt)
	calendar.prmonth(2017, mnt); print()
for mnt in range(3,10):
	calendar.prmonth(2017, mnt); print()
	calendar.prmonth(2017, mnt); print(, end='')
for mnt in range(3,10):
	calendar.prmonth(2017, mnt); print(, end='')
for mnt in range(3,10):
	calendar.prmonth(2017, mnt); print('', end='')
	calendar.prmonth(2017, mnt); print('\t', end='')
for mnt in range(3,10):
	calendar.prmonth(2017, mnt); print('\t', end='')
for mnt in range(3,10):
	calendar.prmonth(2017, mnt)
print("Gregor Redelonghi"[::-1])
print("Gregor Redelonghi"[::-1].spli())
print("Gregor Redelonghi"[::-1].split())
L = "Gregor Redelonghi"[::-1].split(); print(L)
L = "Gregor Redelonghi"[::-1].split(); print(L[1] + " " +L[0])
exit
import subproccess
import subprocces
import subprocess
subprocess.call(['ls','-l'])
subprocess.call(['ls','-1'])
subprocess.call(['np','zip.txt'])
subprocess.call(['nt','zip.txt'])
subprocess.call(['norepad','zip.txt'])
subprocess.call(['notepad','zip.txt'])
subprocess.call(['notepad', '\p', 'zip.txt'])
subprocess.call(['notepad', '/p', 'zip.txt'])
subprocess.call(['notepad', '/P', 'zip.txt'])
subprocess.call(['notepad', 'zip.txt'])
gr_FILES = ['/pot1/file-2.txt', '/pot2/file_33.pdf']
gr_FILES
for FAJL in gr_FILES:
	gr_FLSS = FAJL + "\n"
print(gr_FLSS)
for FAJL in gr_FILES:
	gr_FLSS = FAJL + "\n"
print(gr_FLSS)
for FAJL in gr_FILES:
	print(FAJL + "\n")
	print(FAJL)
for FAJL in gr_FILES:
	print(FAJL)
for FAJL in gr_FILES:
S = "1st line:"
for FAJL in gr_FILES:
	S += FAJL + "\n"
S
print(S)
S = "/c/Users/gregor.redelonghi/BRISI/Pravilnik_plin-do-16bar_tabela-odmikov.pdf"
POT, F = S.rsplit('/')
help(rsplit)
exit
help(rsplit())
help(rsplit)
help(split)
S = "/c/Users/gregor.redelonghi/BRISI/Pravilnik_plin-do-16bar_tabela-odmikov.pdf"
help(S.rsplit)
POT, F = S.rsplit('/', 1)
POT
F
help(ljust)
help(self.ljust)
help(self.ljust())
help("NAME".ljust())
help("NAME".ljust(1))
help("NAME".ljust)
S = "Gregor Redelonghi"
for L in S:
S1 = []
for L in S:
	S1.append(L)
S1
S2 = []
for L in S1:
	S2.append(pop(L))
for N in range(len(S1)):
	S2.append(S1.pop())
S2
''.join(S2)
exit
S = "Gregor Redelonghi"
S
SL = list(S)
SL
print(dirs.__doc__())
print(dirs.py.__doc__())
import dirs
import dirs.py
help(dirs)
help(dirs.py)
import dirs
help(dirs)
!ls
import reverse-names
import reverse-names.py
import reverse-names
import reverse_names
help(reverse_names)
import m_zdaj-test
import sendp3-1-link_en
import reverse_names
import PYTHON-en/reverse_names
import reverse_names
help(reverse_names)
import reverse_names
help(reverse_names)
help(reverse_names.__doc__)
pydoc reverse_names
import dirs2
help(dirs2)
import dirs1
import dirs
help(dirs)
S = "I am Gregor"
L1 = split(S, ' ')
L1 = S.split(' ')
L1
L2 = []
for item in L2:
L1
for item in L1:
	L2.append(L1.pop())
L2
L2 = []
for n in range(L1):
	L2.append(L1.pop())
L2
for item in L1:
	print(L1)
L1
L1 = S.split(' ')
L1
for item in L1:
	L2.append(L1.pop())
L2
L1
S
L1 = S.split(' ')
L1
L1.pop()
L1.append('Gregor')
L1
for items in L1:
	print(items)
for items in L1:
	L1.pop()
L1 = S.split(' ')
while not L1 = []:
while not L1 == []:
	L1.pop()
L1 = S.split(' ')
L1
while not L1 == []:
	L2.append(L1.pop())
L2
L2 = []
L1 = S.split(' ')
while not L1 == []:
	L2.append(L1.pop())
L2
print(' '.join(L2))
S
def initiate(): L1 = S.split(' '); L2 = []
L1
L2
initiate()
L1
L2
L2 = []
L2
L1
def init():
	L1 = S.split(' ')
	L2 = []
init()
L1
L2
init
def init():
	L1 = S.split(' ')
	L2 = []
	return L1, L2
init()
L1
L2
init
init()
L1
A = S.split(' ')
L1 = A
L1
l2 = []
while not L1 == []:
	L2.append(L1.pop())
L2
print(' '.join(L2))
import os
os.getcwd()
import os
def curdir(file):
	if './' is in file:
	if './' in file:
def curdir(file):
	if './' in file:
def curdir(file):
	if './' in file:
		'/'.join(os.getcwd(), file)
	return file
print(curdir('./seznam.txt'))
def curdir(file):
	if './' in file:
		file = os.getcwd() + "/" + file
	return file
print(curdir('./seznam.txt'))
print(curdir('/home/rgregor/fajl.txt'))
def curdir(file):
	if './' in file:
		file = file[2:]
		file = os.getcwd() + "/" + file
	return file
print(curdir('/home/rgregor/fajl.txt'))
print(curdir('./seznam.txt'))
N = 10e5
print(N)
N = 10e15
print(N)
N = 10e8
print(N)
N = 10e10
print(N)
N = 10e12
print(N)
N = 10e13
print(N
)
N = 10e14
print(N)
N = 10e15
print(N)
print(N/100)
print(N**(1/2))
print((N**(1/2))**2)
N = 1e14f
N = float(1e14)
print(N)
N = int(1e14)
print(N)
S = "Jaz se samo malo
S = "Jaz se samo malo \
sprehajama po poti, ki \
	ni za≈°ƒçitena!"
print(S)
S = '''
	Jaz se samo malo sprehajam
po poti, ki sploh ni za≈°ƒçitena!!
OOPS!
'''
print(S)
print(ord(244))
print(ord('244'))
print(u'244)
print(u'244')
print(u'\u244')
print('\u244')
print(chr(244))
print(chr(u\244))
print(chr(\u244))
print(chr('\u244'))
print(chr(97))
print(chr(244))
print(chr(127))
print(chr(244))
for N in range(1,255):
	print("ascii number: ", N, "Character:", chr(N))
print(chr(182))
Point = collections.namedtuple('Point', ['x', 'y'])
import collections
Point = collections.namedtuple('Point', ['x', 'y'])
p = Point(x=1.0, y=2.0)
p
p.x
p.y
p
dir(p)
help(p)
type (p)
words = [
  'look', 'into', 'my', 'eyes', 'look', 'into', 'my', 'eyes',
  'the', 'eyes', 'the', 'eyes', 'the', 'eyes', 'not', 'around', 'the',
  'eyes', ""don't"", 'look', 'around', 'the', 'eyes', 'look', 'into',
  'my', 'eyes', ""you're"", 'under'
words = [
  'my', 'eyes', ""you're"", 'under'
words = [
  'look', 'into', 'my', 'eyes', 'look', 'into', 'my', 'eyes',
  'the', 'eyes', 'the', 'eyes', 'the', 'eyes', 'not', 'around', 'the',
  'eyes', "don't", 'look', 'around', 'the', 'eyes', 'look', 'into',
  'my', 'eyes', "you're", 'under'
]
from collections import Counter
word_counts = Counter(words)
print(word_counts)
top_three = word_counts.most_common(3)
print(top_three)
top_5 = word_counts.most_common(5)
print(top_5)
import sys
s y s . s t d o u t . encoding
sys.stdout.encoding
sum(i for i in range(1300) if i % 3 == 0 or i % 5 == 0)
help(sum)
L = [('G', 49, 1), ('G', 49, 2), ('A', 33, 4), ('A', 33, 1), ('A', 22, 5), ('G', 13, 1), ('A', 22, 2)]
from operator import itemgetter
sorted(L, key = itemgetter(0))
sorted(L, key = itemgetter(0,2))
sorted(L, key = itemgetter(0,1,2))
L2 = sorted(L, key = itemgetter(0,1,2))
L2
for W in L2:
	print(W)
for W in L2:
	for E in W:
		print("Name: ", E)
for W in L2:
	print("Name:", W[0])
	print("Age:", W[1])
	print("RANK:", W[2])
>>>     print("Name:", W[0])
for W in L2:
...     print("Name:", W[0])
...     print("Age:", W[1])
...     print("RANK:", W[2])
for W in L2:
    print("Name:", W[0])
    print("Age:", W[1])
    print("RANK:", W[2], "\n ------------------------------ \n ")
for W in L2:
    print("Name:", W[0])
    print("Age:", W[1])
    print("RANK:", W[2], "\n------------------------------")
exit
for k, v in range(1,12), v += k:
for k, v in range(1,12), v k*2 :
for k, v in range(1,12), v = k*2 :
for k, v in range(1,12), lambda v: v = k*2 :
for k, v in range(1,12), range(2,24,2):
L = []
for k, v in range(1,12), range(2,24,2):
		L.append((k, v))
L
for k, v in range(1,12), range(2,24,2):
	print(k,v)
for k, v in range(1,12), range(2,24):
print(range(2,12,2))
for N in range(2,12,2): print(N)
for N in range(2,14,2): print(N)
for k, v in range(1,12), range(2,26,2):
	print(k, v)
for k, v in range(1,12):
	print(k, k*2)
for k, v in range(1,13):
for k in range(1,12):
	print(k, k*2)
for k in range(1,12):
	print((k, k*2))
for k in range(1,13):
	print((k, k*2))
for k in range(1,13):
L = []
for k in range(1,13):
	L.append((k, k*2))
L
L = []
L.append(('Greg', 49, 1))
L.append(('Mojca', 22, 33))
L.append(('Ana', 53, 12))
L.append(('Zoki', 34, 7))
L
L.append(('Marjan', 71, 13)
)
L
L.append(('Sonja', 22, 14))
L
sorted(L, key = lambda x: x[1])
sorted(L, key = lambda x: x[2])
sorted(L, key = lambda x: x[0])
L
sorted(L, key = lambda x: (x[2], x[1]))
sorted(L, key = lambda x: (x[1], x[2]))
from operator import itemgetter
sorted(L, key = itemgetter[1])
sorted(L, key = itemgetter(1))
sorted(L, key = (itemgetter(1), ITEMGETTER(2))
sorted(L, key = (itemgetter(1), itemgetter(2))
sorted(L, key = (itemgetter(1), itemgetter(2)))
sorted(L, key = lambda x: (x[1], x[2]))
sorted(L, key = (itemgetter(1), itemgetter(2)))
sorted(L, key = itemgetter(1), itemgetter(2))
sorted(L, key = itemgetter(1, 2))
Ls = sorted(L, key = itemgetter(1, 2))
Ls
L
for E in Ls:
	print('Name: " + L2[0] + '\nAge: ' + str(Ls[1]) + '\nPosition: " + str(Ls[2]) + "\n------------------------------")
for E in Ls:
	print('Name: " + E[0] + '\nAge: ' + str(E[1]) + '\nPosition: " + str(E[2]) + "\n------------------------------\n")
	print('Name: ' + E[0] + '\nAge: ' + str(E[1]) + '\nPosition: " + str(E[2]) + "\n------------------------------\n")
for E in Ls:
	print('Name: ' + E[0] + '\nAge: ' + str(E[1]) + '\nPosition: " + str(E[2]) + "\n------------------------------\n")
for E in Ls:
	print('Name: ' + E[0] + '\nAge: ' + str(E[1]) + '\nPosition: ' + str(E[2]) + "\n------------------------------\n")
for E in Ls:
	print('Name: ' + E[0] + '\nAge: ' + str(E[1]) + '\nPosition: ' + str(E[2]) + "\n------------------------------")
Ls
L
{10 * x for x in range(5)}
L = [x for x in range(0,11)]
L
S = set(L)
S
from collections import counter
from collections import Counter
c = Counter(['Greg', 'Zala', 'Mark', 'Greg', 'Greg', 'Zala'])
c
c[Greg]
c['Greg']
c['Zala']
c['Spela']
Counter('Gregor Redelonghi').most_common()
Counter('Gregor Redelonghi').most_common(2)
Counter('Gregor Redelonghi').most_common(3)
Counter('Gregor Redelonghi').most_common()
L2 = Counter('Gregor Redelonghi').most_common()
L2
for i in len(L2):
	print(L2[i])
L2[1]
len(L2)
for i in range(len(L2)):
	print(L2[i])
for i in range(len(L2)):
	if L2[i][1] >= 2:
		print(L2[i])
for i in range(len(L2)):
	if L2[i][1] >= 2:
		print('key:', L2[i][0], ' --> value:', L2[i][1])
from collections import deque
L = ['Gregor-1', 'Gregor-2', 'Zala-1', 'Zala-2', 'Zala-3', 'Mark-1']
D = deque(L, 8)
D
D.append('Spelca-1')
D
D.appendleft('Spelca-2')
D
D.appendleft('Tadeja-1')
D
D.append('Tadeja-2')
D
s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
import cillections
import collections
D = collections.DefaultDict(list)
D = collections.defaultdict(list)
D
D = collections.defaultdict(L)
D = collections.defaultdict(s)
s
D = collections.defaultdict(list)
D
for k, v in s:
	S[k] = v
for k, v in s:
	D[k] = v
D
list(D.items())
s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
d = defaultdict(list)
for k, v in s:
    d[k].append(v)
list(d.items())
s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
d = defaultdict(list)
for k, v in s:
    d[k].append(v)
s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
d = defaultdict(list)
for k, v in s:
    d[k].append(v)
s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
d = collections.defaultdict(list)
for k, v in s:
    d[k].append(v)
list(d.items())
L = ['Greg', 'Zala', 'Mark', 'Tadeja', 'Zala', 'Mark', 'Spela', 'Greg']
L
set(L)
L = [ x for x in range(1,21) ]
L
def DBL(x):
	return 2*x
DBL(2)
D = [ DBL(d) for d in L ]
D
hekp(DBL)
help(DBL)
dir(DBL)
D
D = []
D
D = [lambda x: x*3 for x in L ]
D
list(D)
print(list(D))
D = [g
D = []
D
D = [ liat(lambda x: x*3 for x in L) ]
D = [ list(lambda x: x*3 for x in L) ]
D
D = []
D = [ list(map(lambda x: x * 3, L)) ]
D
D = []
D = (map(lambda x: x * 3, L))
D
D = list(D)
D
D = []
D = list(map(lambda x: x * 3, L))
D
L
D
DD = zip(L, D)
DD
DD = dict(DD)
DD
DD[15]
import random
ata = [N for N in random.randint(0,100)]
data = list(random.randint(0,100))
for N in range(0,150):
data = []
for N in range(0,150):
	data.append(random.randint(1,100))
data
import time
NOW = timr.Time()
NOW = time.Time()
NOW = time.time()
AFTER = timr.time()
AFTER = time.time()
NOW - AFTER
NOW
AFTER
AFTER - NOW
import time
time.clock()
import datetime
datetime.utcnow()
help(datetime)
datetime(now())
import time
datetime(time.timr())
datetime(time.time())
dtaetime.now()
datetime.now()
datetime.datetime.now()
import datetime
datetime.timestamp()
datetime.datetime.timestamp()
import time
import datetime
startt = datetime.datetime.now().microseconds
time.sleep(15)
endt = datetime.datetime.now().microseconds
timedef = endt - startt
print(timedef)
import time, datetime
startt = datetime.datetime.now().microseconds
import time
import datetime
startt = datetime.datetime.now()
time.sleep(15)
endt = datetime.datetime.now()
timedef = endt.microseconds - startt.microseconds
print(timedef)
import time
import datetime
startt = datetime.datetime.now()
time.sleep(15)
endt = datetime.datetime.now()
timedef = endt.microseconds - startt.microseconds
import time
import datetime
startt = datetime.datetime.now()
time.sleep(5)
endt = datetime.datetime.now()
timedef = endt.microseconds - startt.microseconds
print(timedef)
endt = datetime.datetime.now()
timedef = endt.microseconds - startt.microseconds
print(timedef)
startt = datetime.datetime.now()
endt = datetime.datetime.now()
timedef = endt.microseconds - startt.microseconds
print(timedef)
startt = datetime.datetime.now()
print(startt)
print(startt.microseconds)
endt = datetime.datetime.now()
D = startt -endt
D
D.microseconds
D.seconds
D.seconds * 60
D.seconds *3600
D.seconds * 60
fjl = 'AMD.txt'
fj = open(fjl, 'rt')
L1 = fj.readline()
L1
L1.split()
L1.split()[0]
L1.split()[1]
L2 = fjl.readlines()
L2 = fj.readlines()
L2 = fj.readlines().split()
L2
L2[44]
L2[45]
L2[48]
fj.seek(0)
fj.read()
fj.tell()
fj.read()
fj.seek(0)
fj.read(150)
fj.seek(0)
fj.readline()
fj.tell()
fj.readline()
fj.readline().split()
fj.tell()
fj.seek(345)
fj.readline().split()
fj.seek(345)
fj.readline().split()
fj.seek(345)
if 'how' in fj.readline().split(): print('OK')
else:
	print('NOT FOUND')
if 'how' in fj.readline().split():
fj.seek(345)
if 'how' in fj.readline().split():
	print('DA')
else:
	print('NE')
print('DA') if 'how' in frj.readline().split() else print('NO')
print('DA') if 'how' in fj.readline().split() else print('NO')
fj.seek(345)
print('DA') if 'how' in fj.readline().split() else print('NO')
fj.seek(345)
print('DA') if 'how' in fj.readline().split() else print('NO')
fj.seek(0)
F = fj.read()
F
fj.seek(0)
fj.readline()
fj.seek(0)
BL = fj.readlines()
BL
fj.seek(0)
fj.read(150)
BL = fj.readlines()
BL2 = fj.readlines().split(',')
fj.seek(0)
BL2 = fj.read().split(',')
BL2
BL
BL2
BL2 = []
BL2 = fj.read().split()
BL2
fj.seek(0)
BL2 = fj.read().split()
BL2
BL = []
BL = fj.readlines()
BL
fj.seek(0)
BL = fj.readlines()
BL
fj.seek(0)
fj.seek(0)
fj.read().split('\n')
FL
BL
fj.seek(0)
fj.read().split('\n')
fj.seek(0)
BL2 = fj.read().split('\n')
BL2
for i in BL2:
	print(BL2[i])
for i in range(BL2-1):
	print(BL2[i])
BL2
for i in len(BL2-1):
	print(BL2[i])
len(BL2)
for in in range(len(BL2 - 1):
for i in range(len(BL2 - 1):
for i in range(len(BL2 - 1)):
	print(BL2[i])
for i in range(len(BL2 - 1)):
	print(i)
for i in range(len(BL2) - 1):
for i in range(len(BL2) - 1): print(BL2[i])
L = ['Gregor', 'Redelonghi', 'Valvasorjeva ulica 5, 1000 Ljubljana', 'gredelonghi@gmail.com']
L
','.join(L)
L
'|'.join(L)
L
name, lname, addr, email = L
name
lname
addr
email
L.append('ggg')
L.append('AA_hh_ddd_333')
L
name, lname, addr, email = L
name, lname, addr, email, *rest = L
rest
L
fj = open("podatki.txt", 'rt')
fj.read()
fj.seek(0)
L = fj.read().split()
L
L.extend(['ENERGETIKA LJUBLJANA d.o.o.', 'SEKTOR ZA IN≈ΩENIRING', 'SLU≈ΩBA ZA PROJEKTIRANJE'])
L
name, lname, addr, twn, eml_1, eml_2, insd, inst, *rest = L
L = []
L = fj.read().split(',')
L
L = []
fj.seek(0)
L = fj.read().split(',')
L
name, lname, addr, twn, eml_1, eml_2, insd, inst, *rest = L
name
lname
addr
twn
insd
onst
inst
eml_1
eml2
eml_2
rest
 L.extend(['ENERGETIKA LJUBLJANA d.o.o.', 'SEKTOR ZA IN≈ΩENIRING', 'SLU≈ΩBA ZA PROJEKTIRANJE'])
L.extend(['ENERGETIKA LJUBLJANA d.o.o.', 'SEKTOR ZA IN≈ΩENIRING', 'SLU≈ΩBA ZA PROJEKTIRANJE'])
L
name, lname, addr, twn, eml_1, eml_2, insd, inst, *rest = L
rest
name, lname, addr, twn = "NA"
name, lname, addr, twn = "NA"*4
name, lname, addr, twn = 'N'
name = lname =  addr = twn = 'N/A'
name
LNAME
lname
import datetime
datetime.datetime.today()
datetime.datetime.today().strftime(%Y%m%d)
datetime.datetime.today().strftime('%Y%m%d')
datetime.datetime.today().strftime('%Y%m%d-%H%M%S')
import time
start = time.time.now()
import time
start = time.time()
end = time.time()
start
end
tdif = end -start
tdif
tdif / 1000
tdif *1000
import json
help(json)
import os
L = os.walk(os.getcwd)
L
for item in L:
	print(item)
for root, dir, file in os.walk(os.getcwd):
	print(root)
	print(dir)
	print(file)
for root, dir, file in os.walk(os.getcwd()):
	print(file)
	print(dir)
	print(root)
L = os.walk(os.getcwd())
L
for item in L:
	print(item)
import json
import urllib3
import urlib3
import OOP_20171102
T = Person('Tadeja', 'Mali Redelonghi', 47)
import OOP_20171102 as OP
T = OP.Person('Tadeja', 'Mali Redelonghi', 47)
T.get_name()
T.get_last_name()
T.get_age()
OP.run_fast(T.get_name, 3.6)
OP.run_fast(T.get_name(), 3.6)
M = OP.Person('Mark', 'Redelonghi', 18)
M.get_name()
sin = '{} {}'.format(M.get_name(), M.get_last_name())
sin
OP.run_fast(sin, 4.5)
import OOP_20171103 as P
G = P.Person('Gregor', 'Redelonghi', 49, sport = 'JUDO')
G = P.Person('Gregor', 'Redelonghi', 49)
G.get_name()
G.sport = 'JUDO'
print('{}s favorite sport is {}!'.format(G.get_namw() + " " + G.get_lname(), G.sport))
print('{}s favorite sport is {}!'.format(G.get_name() + " " + G.get_lname(), G.sport))
print("{}'s favorite sport is {}!".format(G.get_name() + " " + G.get_lname(), G.sport))
M = P.Person('Mark', 'Redelonghi', 18)
M.whoami()
G.whoami()
P.run_fast(M.get_name(), 3.6)
M_fname = '{} {}'.format(M.get_name(), M.get_lname())
M_fname
P.run_fast(M_fname, 3.6)
M.whoami
M.whoami()
import this
import that
import dis
dis.dis(countdown)
def countdown(n):
	while n > 0:
		print(n)
		n -= 1
countdown(100)
dis.dis(countdown)
class C1:
	color = 'red'
class C2(C1):
	color = 'blue'
c = C2
print(c.color)
f = open('lyrics2.txt', 'rt')
f.readlines().split()
f.readlines()
f.seek(0)
f.readlines()
L = []
for L in f.readline().split():
for W in f.readline().split():
	L.append(W)
L
f.seek(0)
for W in f.readline().split():
	L.append(W)
L
L = []
for W in f.readlines().split():
	L.append(W)
for LN in f.readlines():
	for W in LN:
		print(W)
for LN in f.readlines():
f.seek(0)
for LN in f.readlines():
	for W in LN:
		print(W)
f.seek(0)
for LN in f.readlines():
	for W in LN.split(' '):
		print(W)
L
f.seek(0)
for LN in f.readlines():
	for W in LN.split(' '):
		L.append(W)
L
for N in range(length(L)):
	if L[N] == 'love':
		print(L[N])
for N in range(len(L)):
	if L[N] == 'love':
		print(L[N])
L
if 'love' in L:
	print('tHERE IS LOVE')
if 'stay' in L:
	print('tHERE IS LOVE')
if 'Love' in L:
	print('tHERE IS LOVE')
if '"Love"' in L:
	print('tHERE IS LOVE')
if '"love"' in L:
	print('tHERE IS LOVE')
for N in range(len(L)):
	if L[N] == 'page':
		print(L[N])
for N in range(len(L)):
	counter = 0
	if L[N] == 'page':
		counter += 1
		print('{}: {}'.format(counter, L[N]))
counter = 0
for N in range(len(L)):
	if L[N] == 'page':
		counter += 1
		print('{}: {}'.format(counter, L[N]))
L
import time
T = time.strftime('%Y%m%d%h%m%s')
T
T = time.strftime('%Y%m%d%H%M%S')
T
T = time.strftime('%Y%m%d%_H%M%S')
T
T = time.strftime('%Y%m%d_%H%M%S')
T
T = time.strftime('%Y%m%d_%H%M%S')
T
import basem
T = basem.tmpstmp()
T
T = basem.tmpstmp()
T
basem.info()
import sys
basem.info()
print(sys.argv[0])
el = '00:42:33,570'
el.split(':')
L = ['00:42:23:570', '00:42,33,570']
L[0].split(':')
for ll in L:
	ll.split(':')
L
for ll in L:
	ll.split(':')
S = "00:42:23,570 --> 00:42:33,203"
L1 = S.split()
L1
L1[0]
L1[1]
L1[2]
T = 180000
T/1000
T//1000
T%1000
(T//1000)//60
(T//1000)%%60
(T//1000)%60
(T//1000)//60
(T//1000)/60
(T//1000)//60
L = ['00', '42', '23,572']
L
' '.join(L)
':'.join(L)
T = 14500
T//1000
T%1000
T = 2598103
T//1000
T%000
T%1000
N = 5
N
print("{0:f.2}.format(N)")
print("{0:f.2}".format(N))
print("{0:f}".format(N))
print("{0:f2}".format(N))
print("{0:.2f}".format(N))
print("{0:3.2f}".format(N))
print("{0:03.2f}".format(N))
print("{:00003.2f}".format(N))
N = 5
print(str(N).zfill(2))
print(str(N).zfill(3))
print(str(N).zfill(2))
print(N.zfill(2))
print(str(N).zfill(2))
S = 500
S = 57
S.zfill(3)
print(S.zfill(3))
print(str(S).zfill(3))
print('50'.zfill(3))
print('5'.zfill(3))
print('500'.zfill(3))
import datetime as dt
A = dt.datetime.now()
B = dt.datetime.now()
C = B - A
C
C.total_seconds()
import datetime
datetime.datetime.now()
datetime.datetime.now().strftime(%Y%m%d%H%M%S)
datetime.datetime.now().strftime('%Y%m%d%H%M%S')
datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
print(\x03)
print("\x03")
print("\x03".encode('utf8'))
print(b"\x03")
print(b\x03)
print u"\u2661"
print(u"\u2661")
print(u"\2665")
print(u"\2661")
print(u"\2665".encode('utf8'))
sorted(open(TEXT.txt).readlines(), key=lambda line: int(line.split('\t')[2]))
sorted(open('TEXT.txt').readlines(), key=lambda line: int(line.split('\t')[2]))
open('TEXT.txt').readlines(), key=lambda line: int(line.split('\t')[2])
sorted(open('TEXT.txt').readlines(), key=lambda line: int(line.split('\t')[2]))
open('TEXT.txt).readlines()
print(open('TEXT.txt').readlines())
print(open('TEXT.txt').readlines().strip())
print(open('TEXT.txt').readlines())
sorted(open('TEXT.txt').readlines())
for line in open('TEXT.txt').readlines():
	line.split('\t')
	line.split('\t')[2]
for line in open('TEXT.txt').readlines():
	line.split('\t')[2]
for line in open('TEXT.txt').readline():
	line.split('\t')[2]
for line in open('TEXT.txt').readline():
	line.split('\t')[2]
for line in open('TEXT.txt').readline():
	line.split('\t')
for line in open('TEXT.txt').readlines():
	line.split('\t')
	line.split('\n')
for line in open('TEXT.txt').readlines():
	line.split('\n')
for line in open('TEXT.txt').readlines():
	line.split('\t')
def numeric_compare(x, y):
	return x - y
sorted([5, 2, 4, 1, 3], cmp=numeric_compare)
sorted([5, 2, 4, 1, 3], key = lambda x; x=numeric_compare)
sorted([5, 2, 4, 1, 3], key = lambda x: x=numeric_compare)
sorted([5, 2, 4, 1, 3], key = lambda x: numeric_compare)
sorted([5, 2, 4, 1, 3], key = numeric_compare)
import sys
for i in range(0, 16):
    for j in range(0, 16):
        code = str(i * 16 + j)
        sys.stdout.write(u"\u001b[38;5;" + code + "m " + code.ljust(4))
    print u"\u001b[0m"
import sys
for i in range(0, 16):
    for j in range(0, 16):
        code = str(i * 16 + j)
        sys.stdout.write(u"\u001b[38;5;" + code + "m " + code.ljust(4))
    print (u"\u001b[0m")
    print (u"\u001b[0m", end =". ")
import sys
for i in range(0, 16):
    for j in range(0, 16):
        code = str(i * 16 + j)
        sys.stdout.write(u"\u001b[38;5;" + code + "m " + code.ljust(4))
    print (u"\u001b[0m", end =" ")
import sys
for i in range(0, 16):
    for j in range(0, 16):
        code = str(i * 16 + j)
        sys.stdout.write(u"\u001b[38;5;" + code + "m " + code.ljust(4))
    print (u"\u001b[0m".strip())
import sys
for i in range(0, 16):
    for j in range(0, 16):
        code = str(i * 16 + j)
        sys.stdout.write(u"\u001b[38;5;" + code + "m " + code.ljust(4))
    print (u"\u001b[0m", end='')
import sys
for i in range(0, 16):
    for j in range(0, 16):
        code = str(i * 16 + j)
        sys.stdout.write(u"\u001b[38;5;" + code + "m " + code.ljust(4))
for i in range(0, 16):
...     for j in range(0, 16):
...         code = str(i * 16 + j).strip()
...         sys.stdout.write(u"\u001b[38;5;" + code + "m " + code.ljust(4))
for i in range(0, 16):
     for j in range(0, 16):
         code = str(i * 16 + j).strip()
         sys.stdout.write(u"\u001b[38;5;" + code + "m " + code.ljust(4))
     print (u"\u001b[0m")
for i in range(0, 16):
     for j in range(0, 16):
         code = str(i * 16 + j).strip()
         print(u"\u001b[38;5;" + code + "m " + code.ljust(4))
     print (u"\u001b[0m")
for i in range(0, 16):
     for j in range(0, 16):
         code = str(i * 16 + j).strip()
         print(u"\u001b[38;5;" + code + "m " + code.ljust(4), end ='')
     print (u"\u001b[0m")
for i in range(0, 256):
    if i == 0:
        pass
    elif 16 // i == 0:
            print("\n", end='')
    else:
        print(str(i).ljust(4))
for i in range(0, 256):
    if i == 0:
        pass
    elif 16 // i == 0:
            print("\n", end='')
    else:
for i in range(0, 256):
    if i <> 0:
        if 16 // i == 0:
            print("\n", end='')
for i in range(0, 256):
    if i <> 0:
        if 16 // i == 0:
            print("\n", end='')
        print(str(i).ljust(4))
for i in range(0, 256):
    if i <> 0:
        if 16 // i == 0:
            print("\n", end='')
for i in range(0, 256):
    if i != 0:
        if 16 // i == 0:
            print("\n", end='')
        print(str(i).ljust(4))
for i in range(0, 256):
    if i != 0:
        if 16 // i == 0:
            print("\n", end='')
        print(str(i).ljust(4), end = '')
for i in range(0, 256):
    if i == 0: print(str(i).ljust(4), end = '')
    if 16 // i == 0:
        print(str(i).ljust(4), end = '\n')
    print(str(i).ljust(4), end = '')
for i in range(0, 256):
    if i == 0:
        print(str(i).ljust(4), end = '')
        continue
    if 16 // i == 0:
        print(str(i).ljust(4), end = '\n')
    print(str(i).ljust(4), end = '')
for i in range(0, 256):
    if i == 0:
        print(str(i).ljust(4), end = '')
        continue
    if 16 // i == 0:
        print(str(i).ljust(4), end = '\n')
    else
        print(str(i).ljust(4), end = '')
for i in range(0, 256):
    if i == 0:
        print(str(i).ljust(4), end = '')
        continue
    if 16 // i == 0:
        print(str(i).ljust(4), end = '\n')
    else:
        print(str(i).ljust(4), end = '')
for i in range(0, 256):
    if i == 0:
        print(str(i).ljust(4), end = '')
        pass
    if 16 // i == 0:
        print(str(i).ljust(4), end = '\n')
    else:
        print(str(i).ljust(4), end = '')
pddr
for i in range(0, 256):
    if i == 0:
        print(str(i).ljust(4), end = '')
    elif 16 // i == 0:
        print(str(i).ljust(4), end = '\n')
    else:
        print(str(i).ljust(4), end = '')
for i in range(0, 256):
    if i == 0:
        print(str(i).ljust(4), end = '')
    elif 16 // i == 0:
        print(str(i).ljust(4), end = '\n')
    else:
        print(str(i).ljust(4), end = '')
for i in range(1, 257):
    if 16 // i == 0:
        print(str(i-1).ljust(4), end = '\n')
    else:
        print(str(i-1).ljust(4), end = '')
for i in range(1, 257):
    if 16 // i == 0:
        print(str(i-1).ljust(4), end = '')
        print("\n")
    else:
        print(str(i-1).ljust(4), end = '')
for i in range(1, 257):
    if 16 // i == 0:
        print(str(i-1).ljust(4), end = '')
        print("\n")
    else:
16%16
16//16
1/16
1//16
1%16
17%16
16%16
16%17
16%18
16%32
1//32
16//32
16%%32
16/32
16/16
16/18
16/32
16//32
16//16
16%16
17%16
18%16
32%16
1%16
0%16
RED = "\1xb[31"
print(RED)
RED = "\\1xb[31"
print(RED)
NN = "\\1xb[0m"
print(NN)
RED = "\\1xb[31m"
print(RED + " RED " + NN + " ... normal ..")
print(str(RED) + " RED " + str(NN) + " ... normal ..")
import time
print("Hello I Am A Cow"; time.sleep(10))
import time
print("Hello I Am A Cow")
time.sleep(10)
import time
print("Hello I Am A Cow")
time.sleep(10)
import time
print("Hello I Am A Cow"); time.sleep(10)
import time
print("Hello I Am A Cow"); time.sleep(5)
import time, sys
def loading():
    print("Loading...")
    for i in range(0, 100):
        time.sleep(0.1)
        sys.stdout.write(u"\u001b[1000D" + str(i + 1) + "%")
        sys.stdout.flush()
    print()
loading()
import time, sys
def loading():
    print("Loading...")
    for i in range(0, 100):
        time.sleep(0.01)
        sys.stdout.write(u"\u001b[1000D" + str(i + 1) + "%")
        sys.stdout.flush()
    print()
loading()
import time, sys
def loading():
    print("Loading...")
    for i in range(0, 100):
        time.sleep(0.05)
        sys.stdout.write(u"\u001b[1000D" + str(i + 1) + "%")
        sys.stdout.flush()
    print()
loading()
import time, sys
def loading():
    print("Loading...")
    for i in range(0, 100):
        time.sleep(1)
        sys.stdout.write(u"\u001b[1000D")
        sys.stdout.flush()
        time.sleep(1)
        sys.stdout.write(str(i + 1) + "%")
        sys.stdout.flush()
    print()
loading()
import time, sys
def loading():
    print("Loading...")
    for i in range(0, 100):
        time.sleep(0.1)
        width = (i + 1) / 4
        bar = "[" + "#" * width + " " * (25 - width) + "]"
        sys.stdout.write(u"\u001b[1000D" +  bar)
        sys.stdout.flush()
    print()
loading()
import time, sys
def loading():
    print("Loading...")
    for i in range(0, 100):
        time.sleep(0.1)
        width = int((i + 1) / 4)
        bar = "[" + "#" * width + " " * (25 - width) + "]"
        sys.stdout.write(u"\u001b[1000D" +  bar)
        sys.stdout.flush()
    print()
loading()
import time, sys, random
def loading(count):
    all_progress = [0] * count
    sys.stdout.write("\n" * count) # Make sure we have space to draw the bars
    while any(x < 100 for x in all_progress):
        time.sleep(0.01)
        # Randomly increment one of our progress values
        unfinished = [(i, v) for (i, v) in enumerate(all_progress) if v < 100]
        index, _ = random.choice(unfinished)
        all_progress[index] += 1
        # Draw the progress bars
        sys.stdout.write(u"\u001b[1000D") # Move left
        sys.stdout.write(u"\u001b[" + str(count) + "A") # Move up
        for progress in all_progress:
            width = int( progress / 4 ) # python3 int() !!
            print( "[" + "#" * width + " " * (25 - width) + "]" )
loading()
import time, sys, random
def loading(count):
    all_progress = [0] * count
    sys.stdout.write("\n" * count) # Make sure we have space to draw the bars
    while any(x < 100 for x in all_progress):
        time.sleep(0.01)
        # Randomly increment one of our progress values
        unfinished = [(i, v) for (i, v) in enumerate(all_progress) if v < 100]
        index, _ = random.choice(unfinished)
        all_progress[index] += 1
        # Draw the progress bars
        sys.stdout.write(u"\u001b[1000D") # Move left
        sys.stdout.write(u"\u001b[" + str(count) + "A") # Move up
        for progress in all_progress:
            width = int( progress / 4 ) # python3 int() !!
            print( "[" + "#" * width + " " * (25 - width) + "]" )
loading(100)
import time, sys, random
def loading(count):
    all_progress = [0] * count
    sys.stdout.write("\n" * count) # Make sure we have space to draw the bars
    while any(x < 100 for x in all_progress):
        time.sleep(0.01)
        # Randomly increment one of our progress values
        unfinished = [(i, v) for (i, v) in enumerate(all_progress) if v < 100]
        index, _ = random.choice(unfinished)
        all_progress[index] += 1
        # Draw the progress bars
        sys.stdout.write(u"\u001b[1000D") # Move left
        sys.stdout.write(u"\u001b[" + str(count) + "A") # Move up
        for progress in all_progress:
            width = int( progress / 4 ) # python3 int() !!
            print( "[" + "#" * width + " " * (25 - width) + "]" )
import time, sys, random
def loading(count):
    all_progress = [0] * count
    sys.stdout.write("\n" * count) # Make sure we have space to draw the bars
    while any(x < 100 for x in all_progress):
        time.sleep(0.01)
        # Randomly increment one of our progress values
        unfinished = [(i, v) for (i, v) in enumerate(all_progress) if v < 100]
        index, _ = random.choice(unfinished)
        all_progress[index] += 1
        # Draw the progress bars
        sys.stdout.write(u"\u001b[1000D") # Move left
        sys.stdout.write(u"\u001b[" + str(count) + "A") # Move up
        for progress in all_progress:
            width = int( progress / 4 ) # python3 int() !!
            print( "[" + "#" * width + " " * (25 - width) + "]" )
loading(10)import time, sys, random
def loading(4):
    all_progress = [0] * count
    sys.stdout.write("\n" * count) # Make sure we have space to draw the bars
    while any(x < 100 for x in all_progress):
        time.sleep(0.01)
        # Randomly increment one of our progress values
        unfinished = [(i, v) for (i, v) in enumerate(all_progress) if v < 100]
        index, _ = random.choice(unfinished)
        all_progress[index] += 1
        # Draw the progress bars
        sys.stdout.write(u"\u001b[1000D") # Move left
        sys.stdout.write(u"\u001b[" + str(count) + "A") # Move up
        for progress in all_progress:
            width = int( progress / 4 ) # python3 int() !!
            print( "[" + "#" * width + " " * (25 - width) + "]" )
loading(4)
import time, sys, random
def loading(4):
    all_progress = [0] * count
    sys.stdout.write("\n" * count) # Make sure we have space to draw the bars
    while any(x < 100 for x in all_progress):
        time.sleep(0.01)
        # Randomly increment one of our progress values
        unfinished = [(i, v) for (i, v) in enumerate(all_progress) if v < 100]
        index, _ = random.choice(unfinished)
        all_progress[index] += 1
        # Draw the progress bars
        sys.stdout.write(u"\u001b[1000D") # Move left
        sys.stdout.write(u"\u001b[" + str(count) + "A") # Move up
        for progress in all_progress:
            width = int( progress / 4 ) # python3 int() !!
            print( "[" + "#" * width + " " * (25 - width) + "]" )
loading(4)
def loading(count):
    all_progress = [0] * count
    sys.stdout.write("\n" * count) # Make sure we have space to draw the bars
    while any(x < 100 for x in all_progress):
        time.sleep(0.01)
        # Randomly increment one of our progress values
        unfinished = [(i, v) for (i, v) in enumerate(all_progress) if v < 100]
        index, _ = random.choice(unfinished)
        all_progress[index] += 1
        # Draw the progress bars
        sys.stdout.write(u"\u001b[1000D") # Move left
        sys.stdout.write(u"\u001b[" + str(count) + "A") # Move up
        for progress in all_progress:
            width = int( progress / 4 ) # python3 int() !!
            print( "[" + "#" * width + " " * (25 - width) + "]" )
loading(4)
import time, sys, random
def loading(count):
    all_progress = [0] * count
    sys.stdout.write("\n" * count) # Make sure we have space to draw the bars
    while any(x < 100 for x in all_progress):
        time.sleep(0.01) # Randomly increment one of our progress values
        unfinished = [(i, v) for (i, v) in enumerate(all_progress) if v < 100]
        index, _ = random.choice(unfinished)
        all_progress[index] += 1
        
        # Draw the progress bars
        sys.stdout.write(u"\u001b[1000D") # Move left
        sys.stdout.write(u"\u001b[" + str(count) + "A") # Move up
        for progress in all_progress:
            width = int( progress / 1 ) # python3 int() !!
            print( "[" + "#" * width + " " * (100 - width) + "]" )
            # !! progress / NUM --> (100/NUM - width) !!
loading(10)
H, A, B = 15, 5, 7
if H + B > 15: print("BIGGER")
else:
	print("LOWER")
if A + B > H: print("BIGGER")
else:
	print("LOWER")
if A <= H and B <= H: print("BOTH LOWER")
H, A, B = 15, 10, 7
if A <= H and B <= H: print("BOTH LOWER")
A
B
H, A, B = 15, 10, 17
if A <= H and B <= H: print("BOTH LOWER")
L = [0, 1, 2, 3, 4, 5]
L[2]
L[2], L[3] = L[3], L[2]
L
def swap(A, B):
	A, B = B, A
	return A, B
X = 1
Y = 2
X, Y = swap(X, Y)
X
Y
X = 100
Y = 200
def swap(A, B):
    B = tmp
    B = A
    A = tmp
    return A, B
swap(X, Y)
def swap(A, B):
    tmp = B
    B = A
    A = tmp
    return A, B
def swap(A, B):
X, Y = swap(X,Y)
X
Y
E = ('http:', 'www.google.com')
E
'//'.join(E)
A = "http://www.krneki.org/"
A
A.strip()
A.strip('/')
A.rstrip('/')
A
A.rstrip('/')
A = "http://www.krneki.org"
A.rstrip('/')
A.rstrip('/')	
index()
L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
L.index(5)
s1 = set([1, 2, 3, 3, 4, 4, 6, 7, 8, 9, 0, 0])
s2 = set([2, 2, 1, 3, 4, 5, 5, 6, 7, 8, 9, 9])
s1 - s2
s2 - s1
s2 | s1
s2 && s1
s2 & s1
s2 || s1
s2 | s1
s2 & s1
s2 + s1
s2 & s1
s2 or s1
s2 - s1
s1 - s2
s1 != s2
s1 !& s2
s1 & s2
s1 | s2
s1 ! s2
s1 ^ s2
L1 = sorted(list(s1))
L1
L11 = sorted(s1)
L11
s1
L = []
for N in range(1,251):
	L.append(N)
L
S = '.'.join(L)
S = L.strip=', '
S = L.strip(', ')
for el in L:
	S = S + str(el)
S
for el in L:
S = ''
for el in L:
	S = S + str(el)
S
S = ''
for N in range(1, 251):
	S = S + str(N)
S
for i in range(0,10):
	if S[i] == int(i):
for i in range(0,10):
	if S[i] == int(i):
	print("Num", S[i], ": ", i)
for i in range(0,10):
	if S[i] == int(i):
		print("Num", S[i], ": ", i)
S[0]
for i in range(0,10):
	if S[i] == i:
		print("Num", S[i], ": ", i)
for i in range(0,10):
	if S[i] == str(i):
		print("Num", S[i], ": ", i)
for i in range (0,26):
	print(S[i])
S
S[25]
for el in S:
i = 0
for num in S:
	if S[i] == num:
		print("S[i]", S[i], " = ", num
	i = i+1
i = 0
for num in S:
	if S[i] == num:
		print("S[i]", S[i], " = ", num)
	i = i+1
for num in S:
	if S[i] == num:
print(100**100)
print(2**100)
print(2**1000)
D = 2.5
D.as_integer_ratio()
print(D.as_integer_ratio())
B = D.as_integer_ratio()
print(B[0] + '/' + B[1])
print("{}/{}".format(B[0], B[1]))
D = 2.5
B = D.as_integer_ratio()
print("{}/{}".format(B[0], B[1]))
# initializing lists
name = [ "Manjeet", "Nikhil", "Shambhavi", "Astha" ]
roll_no = [ 4, 1, 3, 2 ]
marks = [ 40, 50, 60, 70 ]
 
# using zip() to map values
mapped = zip(name, roll_no, marks)
 
# converting values to print as set
mapped = set(mapped)
 
# printing resultant values 
print ("The zipped result is : ",end="")
print (mapped)
name = [ "Manjeet", "Nikhil", "Shambhavi", "Astha" ]
roll_no = [ 4, 1, 3, 2 ]
marks = [ 40, 50, 60, 70 ]
mapped = zip(name, roll_no, marks)
print(mapped)
name = [ "Manjeet", "Nikhil", "Shambhavi", "Astha" ]
roll_no = [ 4, 1, 3, 2 ]
marks = [ 40, 50, 60, 70 ]
mapped = zip(name, roll_no, marks)
mapped = set(mapped)
# printing resultant values 
print ("The zipped result is : ",end="")
print (mapped)
name = [ "Manjeet", "Nikhil", "Shambhavi", "Astha" ]
roll_no = [ 4, 1, 3, 2 ]
marks = [ 40, 50, 60, 70 ]
mapped = zip(name, roll_no, marks)
mapped = list(mapped)
 
print ("The zipped result is : ",end="")
print (mapped)
name = [ "Manjeet", "Nikhil", "Shambhavi", "Astha" ]
roll_no = [ 4, 1, 3, 2 ]
marks = [ 40, 50, 60, 70 ]
mapped = zip(name, roll_no, marks)
mapped = list(mapped)
print (mapped)
print(100**100)
print(100**100 + 1)
print(100**1000 + 1)
S = '''1. This is 1-st line.
2. This is second line.
3. This is 3-rd line.'''
print(S)
for line in S:
	print(line)
L = '\n'.join(S)
L
L = []
L = '\n'.split(S)
L
S
L = '\n'.split(S)
L
L = ' '.split(S)
L
S
'\'.split(S)
print('\'.split(S))
'\n'.split(S)
''.split(S)
' '.split(S)
S = 'Gregor Redelonghi, Valvasorjeva ulica 5, 1000 Ljubljana'
S
S.split()
S.split(', ')
S = '''1. This is 1-st line.
2. This is second line.
3. This is 3-rd line.'''
L = S.split('\n')
L
for line in L:
	print(line)
S.strip()
S
L
for line in L:
	print(line.split())
	print(line.split('line'))
for line in L:
	print(line.split('line'))
for line in L:
	print(line.split('.'))
	print(line.split())
for line in L:
	print(line.split())
L
for line in L:
	print(line.split('. '))
D = {}
for line in L:
	k, v = (line.split('. '))
	D[k] = v
D
D[2]
D['2']
D['3']
D['4']
D['0']
D['1']
S = 'Gregor Redelonghi, Valvasorjeva ulica 5, 1000 Ljubljana'
S
S.replace('Ljubljana', 'Novo Mesto')
S.upper()
S.capitalize()
S.caps()
help(S)
help(string)
import string
string.punctuation
S.capwords()
S.title()
S = 'Username with__someold.but.rfficient.ending.txt"
S = 'Username with__someold.but.rfficient.ending.txt'
S
S.rsplit(".", -1)
S.rsplit(".", 1)
NAME, EXT = S.rsplit(".", 1)
NAME
EXT
s
S
S.replace(' ', '_').replace('__', '+')
S.replace(' ', '_').replace('-', '+')
S.replace(' ', '_')
S
S.replace(' ', '_').replace('.','-')
S = 'Gregor Redelonghi, Valvasorjeva ulica 5, 1000 Ljubljana'
S.replace('G', 'R')
S.replace('NN', '??')
S.replace('V', '??')
S = "Judo - Oklahoma, Sunset Bouleward.NY.mp4"
S
S.replace(' ', '_')
S
S.replace(' ', '_')
S
S.replace(' ', '_').replace('_-_', '_')
S.replace(' ', '_').replace('_-_', '_').replace(',', '')
S = "Yoda (the JEDI) the-magnifficent"
S
S.replace('(','')
S.replace('(','').replace(')','')
pairs = {'(':'', ')':'')
pairs = {'(':'', ')':''}
paies
pairs
for c in S:
	print(c)
for c in S:
	if c in pairs.keys():
		print(c, pairs[c])
pairs('(')
print(pairs('('))
pairs = {'(':'_', ')':'_')
pairs = {'(':'_', ')':'_'}
pairs
pairs['(']
pairs[')']
S
for c in S:
	for p in pairs.keys():
		if c == p:
			print(c, p)
for c in S:
	for p in pairs.keys():
		if c == p:
			print(c, pairs[c])
¬Ñ
import os, sys
os.getcwd()
help(os)
import os
os.listdir(os.getcwd())
def print_my_name(name):
	line = "My name is: {}".format(name)
	return line
L = print_my_name('Gregor Redelonghi')
print(L)
L
print(print_my_name("Tadeja"))
print_my_name("Tadeja Alala")
S = "All-Hell-Will-Be-Loose_on_18-_12-_2012.txt"
S
S.replace('-_', '-')
S
S = S.replace('-_', '-')
S
import os
os.getcwd()
crd = os.getcwd()
crd
os.basename(crd)
os.path.basename(crd)
os.path.dirname(crd)
NM = os.path.dirname(crd)
os.pat.isdir(NM)
os.path.isdir(NM)
os.path.isdir(os.path.basename(crd))
import time
time.strftime("%Y%m%d")
time.strftime("%Y\%m\%d")
time.strftime("%Y\\%m\\%d")
time.strftime("%Y/%m/%d")
time.strftime("%Y-%m-%d")
time.strftime("%Y%m%d_%H%M%S")
from collections import counter
from collections import Counter
L = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9 ]
ar1 = Counter(L)
ar1
print(ar1)
final = dict(ar1.itens())
final = dict(ar1.items())
final
for k, v in final:
	if val > 1:
		print(k, v)
for k, v in final:
	if k > 1:
		print(k, v)
for k, v in final:
	print(k, v)
final
final.items()
final.keys()
final.values()
for items in final:
	if item.value() > 1: print("OK")
for v in final.values():
	if v > 1:
for i in final:
	if final[i] > 1: print(final[i])
for i in final:
	if final[i] > 1: print(i, final[i])
frpm datetime import datetime as dt
from datetime import datetime as dt
dt.today()
dt.now()
dt.now().strftime("%s.%m.%d")
dt.now().strftime("%d.%m.%Y")
S = "PLAƒåILO RAƒåUNA 70210"
print(S)
S = "PLAƒåILO RAƒåUNA: 70210"
print(S)
f = read('test.txt', 'r')
f = open('test.txt', 'r')
for L in f.readlines():
	print(L)
for L in f.readlines().strip():
	print(L)
f = open('test.txt', 'r')
for LN in f.readlines():
	LN = LN.strip('\n')
	print(LN)
for LN in f.readlines():
	print(LN.strip('\n'))
f.readlines()
f.seek(0)
f.readlines()
f = open('test.txt', 'r')
for LN in f.readlines():
	print(LN.strip('\n'))
TMS = []
for LN in f.readlines():
	TMS.append(LN.strip('\n'))
TMS
f.seek(0)
for LN in f.readlines():
	TMS.append(LN.strip('\n'))
TMS
f = open('test.txt', 'r')
L = []
for line in f.readlines():
	L.append(line.strip('\n')
L
for line in f.readlines():
	L.append(line.strip('\n'))
L
L2 = []
for line in f.readlines():
	L.append(line)
for line in f.readlines():
	L2.append(line)
L
L2
f.seek(0)
for line in f.readlines():
	L2.append(line)
L2
help(strip())
help(strip)
help(.strip())
help(str.strip())
help(line.strip())
help(line.strip)
S = "GregorARedelonghiAHoHoHoA!"
S
S.strip('A')
S.strip('!')
S.strip('A')
S.strip('A!')
help(line.strip)
S.replace('A', ' ')
S.replace('A', ' ').strip(' !')
import datetime as dt
dt.datetime.today().days
dt.datetime.today()
today = dt.datetime.today()
dt.datetime.strptime(today, '%Y-%m-%d')
dt.datetime.strptime(str(today), '%Y-%m-%d')
today = dt.datetime.today()
today
today.strftime("%Y-%m%d')
today.strftime("%Y-%m-%d")
today.strptime("%Y-%m-%d")
today.strftime("%Y-%m-%d")
dt.datetime(2018, 02, 22)
dt.datetime(2018, 2, 22)
dt.datetime(2018, 2, 22).strftime("%Y-%m-%d")
date(2018,2,22)
dt.datetime(2018,2,22)
dt.datetime(dt.datetime.today())
dt.datetime(int(dt.datetime.today()))
dt.now()
dt.datetime.now()
dt.datetime.today()
dt.datetime.today().strftime("%Y-%m-%d")
dt.date.today()
TODAY = dt.date.today()
D2 = datetime.date(2018, 1, 22)
D2 = dt.date(2018, 1, 22)
D2 - TODAY
(D2 - TODAY).days
(D2 - TODAY).years
(D2 - TODAY).months
(D2 - TODAY).weeks
(D2 - TODAY)
(D2 - TODAY).days
from dateutils import timedelta
from dateutil import timedelta
from dateutil import relativedelta as rdt
diff = rdt.relativedelta(D2, TODAY)
diff
f = read('test.txt', 'r')
f = open('test.txt', 'r')
L = []
for LN in f.readlines():
	L.append(LN.strip('\n'))
L
for EL in L:
	1, 2, 3, 4, 5 = EL.split(';')
	print(1\n, 2\n)
for EL in L:
	1, 2, 3, 4, 5 = EL.split(';')
	print(1, 2)
S = 2018001;g;PLAƒåILO RAƒåUNA;2018-01-12;2018-02-22"
S = "2018001;g;PLAƒåILO RAƒåUNA;2018-01-12;2018-02-22"
S
1, 2, 3, 4, 5 = S.split(';')
1
v1, v2, v3, v4, v5 = S.split(';')
v1
v2
v3
v4
v5
for EL in L:
	v1, v2, v3, v4, v5 = EL.split(';')
	print(v1, "\n", v2)
for EL in L:
	print(v1, "\n", v2)
	v1, v2, v3, v4, v5 = EL.split(';')
	print(v1, v2, v3, v4, v5)
L
f = open('test.txt', 'r')
L = []
for LN in f.readlines():
f.seek(0)
for LN in f.readlines():
	L.append(LN.strip('\n'))
L
for EL in L:
	v1, v2, v3, v4, v5 = EL.split(';')
	print(v1, v2, v3, v4, v5)
num_lines = sum(1 for line in open('test.txt'))
num_lines
f.close()
num_lines = sum(1 for line in open('test.txt'))
f.close()
num_lines
L = []
with open('test.txt', 'r') as f:
	for LN in f.readlines():
		L.append(LN.strip('\n'))
L
L = []
with open('test.txt', 'r') as f:
	for LN in f.readlines():
		L.append(LN.strip('\n'))
L
L[-1]
L[-1].split(';')
L[-1].split(';')[0]
import datetime as dt
gtoday = dt.date.today()
Y = gtoday.strfmt(%Y)
Y = gtoday.strfmt('%Y')
gtoday
Y = dt.datetime.strptime(gtoday, "%Y")
gtoday
gtoday.year
import datetime as dt
Y = dt.date.today().year
Y
from win32api import GetSystemMetrics
print("Width =", GetSystemMetrics(0))
print("Height =", GetSystemMetrics(1))
import ctypes
user32 = ctypes.windll.user32
screensize = user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)
print(screensize)
import ctypes
help(ctypes)
from screeninfo import get_monitors
for m in get_monitors():
    print(str(m))
import shutil
TS = shutil.get_terminal_size()
print(TS)
print("="*200)
print(TS.columns)
import shutil
print(TS.columns)
TS = shutil.get_terminal_size()
print(TS)
f = open('AAA.txt', 'r')
L = []
>>> for line in f.readlines():
...     L.append(line.strip('\n'))
for line in f.readlines():
     L.append(line.strip('\n'))
L
for E in L:
    if 'RD' in L:
        print(E)
for E in L:
    for E2 in E.split(';'):
        if 'VAL' in E2:
            print(E)
def disp(ARG):
    for E in L:
        for E2 in E.split(';'):
            if str(ARG) in E2:
                print(E)
disp(VAL) 
disp('VAL') 
disp('RD') 
disp('JU≈†') 
disp('-01-02') 
disp(-01-02) 
disp('-01-12') 
disp('M;') 
disp('M') 
disp('MA') 
f = open('AAA.txt', 'r')
import print_table_V2 as pt
LA = pt.readf_in('AAA.txt')
L1 = pt.add_diff(LA)
pt.less_days(7, L1)
pt.is_in('2018011', L1)
pt.is_in('2018009', L1)
import print_table_V2 as pt
LA = pt.readf_in('AAA.txt')
L1 = pt.add_diff(LA)
pt.more_days(12)
pt.more_days(12, L1)
pt.more_days(12, L)
import print_table_V2 as pt
pt.print_full_table()
pt.less_days(21)
pt.more_days(21)
pt.is_in('≈†P')
pt.is_in('TAD')
pt.less_days(7)
S = '02-03'
N = int(S.strip('-'))
S.strip('-')
S.replace('-', '')
int(S.replace('-', ''))
f = open('AAA.txt', 'r')
L0 = []
for LN in f.readlines():
	L0.append(LN.strip('\n'))
L0
for EL in L0:
	print(EL[2])
for EL in L0:
	print(EL)
for EL in L0:
	for EEL in EL.split(';'):
		if int(EEL[2].replace('-', '')) > 20180111:
			print(EL)
for EL in L0:
	for EEL in EL.split(';'):
		print(EEL)
for EL in L0:
	for EEL in EL.split(';'):
		print(EEL[2])
for EL in L0:
	print(EL)
for EL in L0:
	for EEL in EL.split(';'):
		print(EEL)
for EL in L0:
	for EEL in EL.split(';')[2]
for EL in L0:
	for EEL in EL.split(';')[2]:
		print(EEL)
for EL in L0:
L0
for EL in L0:
	print(EL)
for EL in L0:
		print(N)
for EL in L0:
ll
L0
for LN in L0:
	L2 = LN.split(';')
	print(L2)
for LN in L0:
	L2 = LN.split(';')
	N2 = L2[2].replace('-', '')
	print(N2)
for LN in L0:
	L2 = LN.split(';')
	N2 = L2[2].replace('-', '')
	if int(N2) > 20180111:
		print(LN)
for LN in L0:
...     L2 = LN.split(';')
...     N2 = L2[2].replace('-', '')
...     if int(N2) > 20180111:
...             print(LN)
for LN in L0:
...     L2 = LN.split(';')
...     N2 = L2[2].replace('-', '')
...     if int(N2) > 20180111:
...             print(LN)
S = 'Gregor Redelonghi'
S
N = len(S)
N
S[5:N]
S[5:N-1]
S[5:-1]
S[5:-0]
S[5:-]
S[5:]
S[5:-1]
S[5:]
S[-1]
S[:-1]
S[-1]
S[5:]
''.join(S[5:])
(S[5:]).split()
''.join((S[5:]).split())
S
D = dict(('a', 'b', 'c'), (1, 2, 3))
D = dict(('a', 'b', 'c') (1, 2, 3))
D = dict('a'=1, 'b'=2, 'c'=3)
D = dict([('a', 'b', 'c'), (1, 2, 3)])
dict([('a', 'b', 'c'), (1, 2, 3)])
dict([('a', 'b'), (1, 4)])
dict([('a', 'b', 'c'), (1, 2, 4)])
dict([('a', 1), ('b', 2), ('c', 3)])
A
a
D = dict([('a', 1), ('b', 2), ('c', 3)])
D[a]
D['a']
kys = ('ime', 'priimek', 'naslov')
vls = ("Tadeja", "Mali Redelonghi", "Valvasorjeva ulica 5, 1000 Ljubljana")
D2 = disct(zip(kys, vls))
D2 = dict(zip(kys, vls))
D2
D2['naslov']
D2['priimek']
D2['ime']
D2
D3 = {'D':22, 'M':2, 'Y':1968, 'Z':[]17,1,2018]}
D3 = {'D':22, 'M':2, 'Y':1968, 'Z':[17,1,2018]}
D3
D['Z']
D3['Z']
D3['Z'][2]
for i in 1, 2, 3:
	print(D3['Z'][i])
for i in 0, 1, 2:
	print(D3['Z'][i])
day, month, year = d3['Z']
day, month, year = D3['Z']
day
month
year
D3 = {'D':22, 'M':2, 'Y':1968, 'Z':[17,1,2018]}
D3
d3.keys
D3.keys
D3.keys()
D3.values()
list(D3.values())
f = open('AAA.txt', 'r')
f.readlines()
f.seek(0)
L0 = []
for LN in f.readlines():
	L0.append(LN.strip('\n'))
L0
for EL in L0:
	LN = EL.split()
	print(LN)
for EL in L0:
	print(EL)
for EL in L0:
	LN = EL.split(';')
	print(LN)
LL = []
for EL in L0:
	LN = EL.split(';')
	LL.append(LN)
LL
LL[0]
LL[0][0]
LL[0][2]
LL[0][2].split('-')
Y, M, D = LL[0][2].split('-')
Y
M
D
LL[0][2]
Y
list(Y, D, M)
list([Y, D, M])
'.'.join(list([Y, D, M]))
'.'.join(list([D, M, Y]))
f = open('AAA.txt', 'r')
f.readline()
d.seek(0)
f.seek(0)
f.readline().strip('\n')
f.tell()
f.seek(0)
len(f.readline().strip('\n'))
f.tell()
f.seek(0)
len(f.readline())
f.tell()
f.seek(0)
f.readline()[0]
f.tell()
f.seek(0)
f.readline()[0]
f.tell()
f.seek()
f.seek(0)
for LN in f.readlines():
	print("{:<10}{}".format(len(LN), LN))
f.seek(0)
for LN in f.readlines():
	LN = LN.strip('\n')
	print("{:<10}{}".format(len(LN), LN))
f.seek(0)
LN = f.readline().strip('\n')
len(LN)
f.tell()
f.seek(0)
f.readline()
f.tell(0)
f.tell()
f.readline()
f.tell()
f.seek(0)
f.seek(66)
f.readline()
f.seek(0)
f.seek(58)
f.readline()
f.seek(0)
LN = f.readlin()
LN = f.readline()
len(LN)
print(LN)
LN
f.close()
f = open('AAA.txt', 'r')
f.readline()
f.close
f.close()
f = open('AAA.txt', 'w')
f.write('2018100;S;2018-01-17;2019-02-11;≈†PELA - RD (ƒçez eno leto!')
f.close
f.close()
f = open('AAA.txt', 'r')
f.readlines()
f = open('AAA.txt', 'a')
f.write('2018100;S;2018-01-17;2019-02-11;≈†PELA - RD (ƒçez eno leto!')
f.close()
fr = ('AAA.txt', 'r')
fr.read()
fr = open('AAA.txt', 'r')
fr.read()
f.tell()
ft.tell()
fr.tell()
f = fr
f.seek()
f.seek(0)
f.read()
f.seek()
f.seek(0)
help(read()
help(read)
help(read())
help(f.read())
dir(read())
dir(read)
dir(.read)
dir(.read())
help(.read())
help(f.read())
f.seek(0)
f.read()
f = open('/home/gregor.redelonghi/_BRISI/AAA.txt', 'r')
f.read()
f.seek(0)
f.close()
f.close
L = []
L. extend([1, 2, 3])
L
in = [4, [5, 6], [7, [8, 9], 10], 11]
L2 = [4, [5, 6], [7, [8, 9], 10], 11]
L0.extend(L2)
L.extend(L2)
L
LN = L[:]
LN
LN[5][1][1]
L == LN
L
LN
L[5][1][1]
len(L)
for EL in L:
	if islist(EL):
		print(EL)
for EL in L:
	if isistance(EL, list):
		print(EL)
for EL in L:
	if isinstance(EL, list):
		print(EL)
for EL in L:
	if isinstance(EL, list):
		for EL2 in EL:
			if isinstance(EL2, list):
				print(EL2)
import sys
sys.stdout.encoding
A, B, C = (3, 3, 3)
A
B
C
if (A==3 and
B == 3 smd
if (A==3 and
B == 3 and
C == 3)
if (A==3 and
B == 3 and
C == 3):
	print('OK!')
else:
	print('NOOOOO!)
if (A==3 and
B == 3 and
C == 3):
	print('OK!')
else:
	print('NOOOOO!')
A = 2
if (A==3 and
B == 3 and
C == 3):
	print('OK!')
else:
	print('NOOOOO!')
2 > 3
3>2
if (2 < 3
	and
	5 < 3):
	print('JA')
else:
	print('NE')
DT = '2018-01-31'
DT
YR = DT[:5]
YR
YR = DT[:4]
YR
MN = DT[6:8]
MN
MN = DT[5:7]
MN
DY = DT[-2:]
DY
print("{}.{}.{}".fotmat(DY, MN, YR))
print("{}.{}.{}".format(DY, MN, YR))
MN2 = 13
if MN2 not in range(1,12):
	print('wrong number of months')
MN2 = 05
MN2 = '05'
int(MN2)
if int(MN2) not in range(1,12):
	print('wrong number of months')
else:
	print('OK')
def mnn(month):
	if month not in range(1,12):
		print('Number of months to large!')
	else:
		print('OK')
mnn(MN2)
MN2
def mnn(month):
	if int(month) not in range(1,12):
		print('Number of months to large!')
	else:
		print('OK')
mnn(MN2)
MN2 = '12'
mnn(MN2)
for i ina range(1,12):
for i in range(1,12):
	print(i)
def mnn(month):
	if int(month) not in range(1,13):
		print('Number of months to large!')
	else:
		print('OK')
mnn(MN2)
MN2
MN2 = 14
mnn(MN2)
MN2 = '01'
mnn(MN2)
MN2 = 2
mnn(MN2)
import bs4
import bs
import bs3
import beautifullsoup
import beautifullsoup4
import beautifulsoup4
pip install beautifulsoup4
def wdf():
import subprocess
def wdf():
	p = subprocess.Popen(["df", "-h"])
	retunr p
def wdf():
	p = subprocess.Popen(["df", "-h"])
	return p
wdf
print(wdf)
print(wd()f)
print(wdf())
wdf()
import os
for root, dirs, files in os.walk("."):
	print(root)
	print(dirs)
	print(files)
import os
L = os.walk(".")
print(L)
print(list(L))
for rt,drs,fjls in os.walk("."):
	print(drs)
for rt,drs,fjls in os.walk("."):
	print(fjls)
for rt,drs,fjls in os.walk("."):
	for ff in fjls:
		print(ff)
for rt,drs,fjls in os.walk("."):
	for dd in dirs:
		for ff in fjls:
			L = dd + "/" + ff
			print(L)
for rt,drs,fjls in os.walk("."):
	for dd in drs:
		for ff in fjls:
			L = dd + "/" + ff
			print(L)
for rt,drs,fjls in os.walk("."):
	for dd in drs:
	L1 = rt + "/" + dd
for rt,drs,fjls in os.walk("."):
	for dd in drs:
		L1 = rt + "/" + dd
		for ff in fjls:
			L2 = L1 + "/" + ff
			print(L2)
L = os.dirlist()
L = os.listdir()
print(L)
for dd in L:
	print(os.listdir(dd))
for dd in L:
	print(os.listdir(dd))
for dd in L:
	if dd isdir():
for dd in L:
	if os.path.isdir(dd):
		print(os.listdir(dd))
D = {'A' : 16, 'B' : 25, 'C' : 75, 'D' : 99, 'E': 5, 'F' : 55}
print("A: ", "X"*75)
print("A: ", "#"*75)
print("A: ", ":"*75)
print("A: ", "/"*75)
print("A: ", "()"*75)
print("A: ", "$"*75)
print("A: ", "O"*75)
print("A: ", "--"*75)
print("A: ", "->"*75)
print("A: ", "+"*75)
print("A: ", "*"*75)
print("A: ", "‚Ç¨"*75)
print("A: ", "@"*75)
for el in D:
	print(el)
	print(el, el.val())
	print(el)
for el in D:
	print(el, el.val())
	print(el, el.value())
for el in D:
	print(el, el.value())
	print(el, D[el])
for el in D:
	print(el, D[el])
	print(el, "#"*D[el])
for el in D:
	print(el, "#"*D[el])
for el in D:
	print(el, "#"*D[el], '.'*(100-D[el]))
	print(el, "#"*D[el] + '.'*(100-D[el]))
for el in D:
	print(el, "#"*D[el] + '.'*(100-D[el]))
	print(el, "="*D[el] + '.'*(100-D[el]))
for el in D:
	print(el, "="*D[el] + '.'*(100-D[el]))
for el in D:
	print(el, "|" + "="*D[el] + '.'*(100-D[el]))
	print(el, "|" + "="*D[el] + '.'*(100-D[el]) + "|")
for el in D:
	print(el, "|" + "="*D[el] + '.'*(100-D[el]) + "|")
for el in D:
	print(el, "|" + "="*D[el] + '.'*(100-D[el]))
for el in D:
	print(el, "|" + "="*D[el)
for el in D:
	print(el, "|" + "="*D[el])
for el in D:
	print(el, "|" + "="*D[el] + ''*(100-D[el]))
for el in D:
	print(el, "|" + "="*D[el] + ''*(100-D[el]) + "|")
for el in D:
	print(el, "|" + "="*D[el] + ' '*(100-D[el]) + "|")
for el in D:
	print(el, "[" + "="*D[el] + ' '*(100-D[el]) + "]")
from operator import itemgetter
for k, v in sorted(D.items(), key = itemgetter(1)):
	print(k, "|" + "="*v + ' '*(100-v) + "|")
from re_show import re_show, s
re_show(‚Äôa‚Äô, s)
re_show('a', s)
re_show('Mary', s)
re_show('Mary$', s)
from re_show import re_show
s = '''Special characters must be escaped.*'''
re_show(r'.*', s)
re_show(r'\.\*', s)
re_show('\\\\', r'Python \ escaped \ pattern')
re_show('\\', r'Python \ escaped \ pattern')
re_show('\\\\', r'Python \ escaped \ pattern')
re_show(r'\\', r'Python \ escaped \ pattern')
from re_show import re_show, s
re_show('^Mary', s)
re_show('Mary$', s)
re_show(r'Mary$', s)
re_show('$', s)
re_show('$', 'Mary had a little lamb')
import json
path = "usagov_bitly_data2012-03-16-1331923249.txt"
import json
open(path).readline()
records = [json.loads(line) for line in open(path)]
records
records[0]
records[0]['tz']
time_zones = [rec['tz'] for rec in records if 'tz' in rec]
time_zones[:10]
from pandas import DataFrame, Series
import numpy
import pandas
from pandas import Series, DataFrame
import pandas as pd
obj = Series([4, 7, -5, 3])
obj
obj.values
obj.index
obj.indexes
help(Series)
obj.index
obj2 = Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])
obj2
obj2.index
obj2['a']
obj2
np.exp(obj2)
import numpy as np
np.exp(obj2)
sdata = {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000}
obj3 = Series(sdata)
obj3
states = ['California', 'Ohio', 'Oregon', 'Texas']
obj4 = Series(sdata, index=states)
obj4
data = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'],
'year': [2000, 2001, 2002, 2001, 2002],
'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}
data
frame = DataFrame(data)
frame
L1 = [1, 2, 3]
L2 = [4, 5, 6]
L1 - L2
L1 + L2
L2 + L1
import os, sys
os.path.join('usr', 'bin')
os.path.join('/', 'usr', 'bin')
os.path.join('/', 'home', 'gregor.redelonghi')
os.getcwd()
os.path.join('/', 'home', 'gregor.redelonghi').ispath()
(os.path.join('/', 'home', 'gregor.redelonghi')).ispath()
import os
os.path.abspath(".")
os.listdir(".")
ll
for root, dirs, files in os.path.walk("."):
	print(files)
for root, dirs, files in os.walk("."):
	print(files)
for root, dirs, files in os.walk("."):
	print(dirs)
import os
os.listdir()
for EL in os.listdir(): 
	if os.isfile(EL):
		print(EL)
for EL in os.listdir("."): 
	print/EL)
for EL in os.listdir("."): 
	print(EL)
for EL in os.listdir("."): 
	if os.path.isfile(EL):
		print(EL)
for EL in os.listdir("."): 
	if os.path.isdir(EL):
		print(EL)
5%2
4%2
for N in range(1,101):
	if N%2 != 0:
		print/N)
for N in range(1,101):
	if N%2 != 0:
		print(N)
59/3
99/3
99%3
99%2
9//3
9//2
9//9
9//5
99//99
99/2
99//2
99/9
99//9
99%%9
99%9
for N in range(1,101):
	for i in range(1, N-1):
		if N % i == 0:
			continue
		else:
			print(N)
N = 101
for i in range(1, N):
    if N % i == 0:
        continue
    elif N % i != 0:
        print(N)
N = 101
for i in range(1, N):
    if N % i == 0:
        continue
    elif N % i != 0:
        print(N)
        continue
N = 101
for i in range(1, N):
    for B in range(1,N-1):
        if N % B == 0:
            continue
        elif N % B != 0:
            print(N)
            continue
N = 101
for i in range(1, N):
    for B in range(1,N-1):
        if N % B == 0:
            continue
        elif N % B != 0:
            print(N)
            break
for N in range(1, 101):
    while i < 101
        if N % i == 0:
            :
            i = i+1
        else:
            print(N)
for N in range(1, 101):
    while i < 101
        if N % i == 0:
            :
            i = i+1
        else:
            print(N)
for N in range(1, 101):
    while i < 101:
        if N % i == 0:
            :
            i = i+1
        else:
            print(N)
for N in range(1, 101):
    while i < 101:
        if N % i == 0:
            continue
            i = i+1
        else:
            print(N)
            i = i+1
i = 1
for N in range(1, 101):
    while i < 101:
        if N % i == 0:
            continue
            i = i+1
        else:
            print(N)
            i = i+1
for N in range(1, 101):
    for i in range(1, N-1)
        if N % i == 0:
            break
        else:
            print(N)
for N in range(1, 101):
    for i in range(1, N-1):
        if N % i == 0:
            break
        else:
            print(N)
            break
for N in range(2, 101):
    for i in range(1, N-1):
        if N % i == 0:
            break
        else:
            print(N)
            break
for N in range(2, 101):
    for i in range(1, N-1):
        if N % i == 0:
            break
        else:
            print(N)
            break
for N in range(1, 101):
    for i in range(1, N-1):
        if i = 1:
            print(i)
            continue
            
        if N % i == 0:
            break
        else:
            print(N)
for N in range(1, 101):
    for i in range(1, N+1):
        if i = 1:
            print(i)
            continue
            
        if N % i == 0:
            break
            
        else:
            print(N)
            breakfor N in range(1, 101):
    for i in range(1, N+1):
        if i = 1:
            print(i)
            continue
            
        if N % i == 0:
            break 
        else:
            print(N)
for N in range(1, 101):
    for i in range(1, N+1):
        
        if N % i == 0:
            break 
        else:
            print(N)
            break
print(1)
for N in range(2, 101):
    i = 2
    for E in range(E, N):
        if N % E == 0:
            continue
    print(N)
print(1)
for N in range(2, 101):
    i = 2
    for E in range(i, N):
        if N % E == 0:
            continue
    print(N)
            breakprint(1)
for N in range(2, 101):
    i = 2
    for E in range(i, N):
        if N % E == 0:
            continue
        else:
            print(N)
    i = 2print(1)
for N in range(2, 101):
    i = 2
    for E in range(i, N):
        if N % E == 0:
            continue
        else:
            print(N)
            break
print(1)
for N in range(2, 101):
    i = 2
    for E in range(i, N):
        if N % E == 0:
            continue
        
        if N % E != 0:
            print(N)
            break
import os
print(os)
import pandas
print(pandas)
NM = "Gregor Redelonghi"
len(NM)
NM[:15]
NM.index('G')
NM.index('R')
NM.index('e')
NM.index(' ')
NM[6:]
NM[7:]
NM.split(' ')
D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
frst, *_, lst = D
frst
lst
_
*_
_
_ = None
D
L5 = D[-5:] 
L5
import deque
from collections import deque as dq
import heapg
import heapq
print(heapq.nlargest(D))
print(heapq.nlargest(1, D))
print(heapq.nlargest(3, D))
print(heapq.nlargest(0, D))
print(heapq.nlargest(1, D))
import random
help(random)
print(random.randrange(0,100,1))
DD = shuffle(D)
shuffle(D)
import shuffle
from random import shuffle
DD = shuffle(D)
DD
D
print(heapq.nlargest(3, D))
D
portfolio = [
{'name': 'IBM', 'shares': 100, 'price': 91.1},
{'name': 'AAPL', 'shares': 50, 'price': 543.22},
{'name': 'FB', 'shares': 200, 'price': 21.09},
{'name': 'HPQ', 'shares': 35, 'price': 31.75},
{'name': 'YHOO', 'shares': 45, 'price': 16.35},
{'name': 'ACME', 'shares': 75, 'price': 115.65}
]
portfolio
cheap = heapq.nsmallest(3, portfolio, key = lambda s: s['shares'])
cheap
cheap = heapq.nsmallest(3, portfolio, key = lambda s: s['price'])
cheap
Version
help
help(collections)
help(collection)
print(collectio)
print(collectios)
print(re)
import re
print(re)
import collesctions
import collections
print(collections)
S = "Gregor Redelonghi, Valvasorjeva ulica 5, 1000 Ljubljana. E-mail: gredelonghi@gmail.com."
S
S.startswith('G')
S.startswith('Gre')
S.startswith('Ge')
S.startswith('G*e')
S.startswith(fnmatch('G*e'))
import re
re.split(r'[.\s]', S)
re.split(r'[.,\s]', S)
S = "Gregor Redelonghi; Valvasorjeva ulica 5; 1000 Ljubljana; E-mail: gredelonghi@gmail.com"
re.split(r'[.,\s]', S)
re.split(r'[;,\s]', S)
re.split(r'[;\s]', S)
re.split(r'[;]', S)
re.split(r'[;:]', S)
IME, *_, MAIL = re.split(r'[;:]', S)
IME
MAIL
IME, *_, MAIL = re.split(r'[;:]', S)
IME
MAIL
MAIL.strip()
S.endswith(re.match(r'c.m', S))
import fnmatch
S.endswith(fnmatch(r'c*m', S))
S.endswith('com')
import fnmatch as fmc
S.endswith(fmc('c*m', S))
S.endswith(str(fmc('c*m', S)))
fmc('c*m', S)
end=re.compile(r'c.m', S)
S
end=re.compile(r'c.m')
m = end.match(S)
m.group()
m.group(0)
end.match(S)
end.match(S).group()
end=re.match(r'c.m', 'com')
end.group()
end=re.match(r'c.m', 'gggggg jjjjjjjjjjjj com')
end.group()
end=re.match(r'c.m', 'gggggg jjjjjjjjjjjj com')
end.group()
end=re.match(r'c.m', 'g.com')
end.group()
end=re.match(r'c.m', 'com')
end.group()
s
S
re.match(r'c.m', 'com')
re.match(r'c.m', 'com').group()
re.match(r'c.m', 'gregor@com').group()
re.findall(r'c.m', 'gregor@com').group()
re.findall(r'c.m', 'gregor@com')
re.match(r'.*(c.m)', 'gregor@com').group()
re.match(r'.*(c.m)', 'gregor@com').group(0)
re.match(r'.*(c.m)', 'gregor@com').group(1)
'com' in S
re.match(r'.*(c.m)', 'gregor@com')
re.match(r'.*(c.m)', 'gregor@com').grop()
re.match(r'.*(c.m)', 'gregor@com').grop(1)
re.match(r'.*(c.m)', 'gregor@com').group(1)
re.match(r'(c.m)', 'gregor@com').group(1)
re.match(r'c.*m', 'gregor@com').group(1)
re.match(r'.c.*m', 'gregor@com').group(1)
re.match(r'.*c.m', 'gregor@com').group(1)
re.match(r'.*c.m', 'gregor@com').group()
import fnmatch as fmc
from fnmatch import fnmatch as fmc
[ext for ext in S if fmc(S, 'c*m')
[ext for ext in S if fmc(S, 'c*m')]
[ext for ext in S.split(';') if fmc(S, 'c*m')]
fmc(S, 'c*m')
fmc(S, 'c.*m')
S
'com' in S
fmc(S, 'c.m')
fmc(S, 'com')
fmc('www.com', 'c*m'
)
fmc('www.com', 'c*m')
from fnmatch import fnmatch
fnmatch('ABC', '*C')
fnmatch('ABC', 'A*C')
fnmatch('ABC', 'A.C')
fnmatch('ABC', 'A+C')
fnmatch('ABC', 'C')
fnmatch('ABC', '*C')
fnmatch('www.com', 'c*m')
fnmatch('www.com', '*m')
fnmatch('www.com', '*c*m')
re.match(r'c.*m', 'www.com')
re.match(r'c.*m', 'www.com').group()
re.match(r'.*c.*m', 'www.com').group()
re.match(r'.*(c.*m)', 'www.com').group()
re.match(r'.*(c.*m)', 'www.com').group(1)
re.match(r'.*(c.*m)', 'www.com').group(2)
re.match(r'.*(c.*m)', 'www.com').group()
re.match(r'.*(c.*m)', 'www.com').group(1)
re.match(r'(?[. ]c.*m', 'www.com').group(1)
re.match(r'(?[. ])c.*m', 'www.com').group(1)
re.match(r'(?[. ])c.*m', 'www.com').group()
re.match(r'[. ]*c.*m', 'www.com').group()
re.match(r'*c.*m', 'www.com').group()
re.match(r'.*c.*m', 'www.com').group()
re.match(r'(?.)c.*m', 'www.com').group()
re.match(r'(?\.)c.*m', 'www.com').group()
re.match(r'(?:\.)c.*m', 'www.com').group()
re.search('c.m', 'www.com')
re.search('c.m', 'www.com').group()
S
re.search('c.m', S.group()
re.search('c.m', S).group()
re.search('c.*m', S).group()
re.search('c?m', S).group()
re.search('c.?m', S).group()
re.search('c.+m', S).group()
re.search('c.m', S).group()
re.search('c\.m', S).group()
re.search('.c.m', S).group()
re.search('\.c.m', S).group()
re.search('\.+c.m', S).group()
re.search('@.*', S).group()
re.search(.*'@.*', S).group()
re.search(r'.*@.*', S).group()
re.search(r'\w@.*', S).group()
re.search(r'\w@\w', S).group()
re.search(r' \w*@\w', S).group()
re.search(r'\w*@\w', S).group()
re.search(r'\w*@\w*', S).group()
re.search(r'\W*@\w*', S).group()
re.search(r'\W\w*@\w*', S).group()
import re
Y = "2016 20016 3017 1999 19099 1012 10223 2018 2205 6666"
Y
yr = re.compile(r'[12]\d{3}')
yr.findall(Y)
Y = "2016 20016 3017 (1999) 19099 (1012) 10223 2018 2205 6666 (2017)"
yr.findall(Y)
yr = re.compile(r'\([12]\d{3}\)')
yr.findall(Y)
S = ['(2017)', '(2018) ', '(2016) [1080p]', ' (2015) ']
mr = compile(r'\([12]\d{3}(.*)')
mr = re.compile(r'\([12]\d{3}(.*)')
mr.findall('(2017) ')
mr = re.compile(r'\([12]\d{3}\)(.*)')
mr.findall('(2017) ')
mr.findall('(2017) [1080p]')
mr.findall('(2017) [1080p] ')
for YR in S:
	mr.findall(NN)
for YR in S:
	mr.findall(YR)
S
	mr.findall(YR.strip())
for YR in S:
	mr.findall(YR.strip())
for YR in S:
	off = mr.findall(S):
for YR in S:
	off = mr.findall(S)
for YR in S:
	off = mr.findall(YR)
	print(off)
T = 'Moviename (2017) [1080p]'
T - ' [1080p]'
re.sub(' [1080p]', '', 'Moviename (2012) [1080p]')
re.sub(' [1080p]', , 'Moviename (2012) [1080p]')
re.sub(' [1080p]', '', 'Moviename (2012) [1080p]')
re.sub(' [1080p]', 'None', 'Moviename (2012) [1080p]')
re.sub(' [1080p]', '.', 'Moviename (2012) [1080p]')
re.sub(' \[1080p\]', '.', 'Moviename (2012) [1080p]')
re.sub(' \[1080p\]', '', 'Moviename (2012) [1080p]')
S
mr.findall(S)
S
for YR in S:
	mr.findall(YR)
for YR in S:
	expr = mr.findall(YR)
	re.sub(expr, '', YR)
for YR in S:
	re.sub(expr, '', YR)
for YR in S:
	expr = mr.findall(YR)
	print(expr, YR)
S
	print(expr, "'" + YR + "'")
for YR in S:
	print(expr, "'" + YR + "'")
for YR in S:
	expr = mr.findall(YR)
	print(expr, "'" + YR + "'")
for YR in S:
	expr = mr.findall(YR)
	re.sub(str(expr), '', YR)
for YR in S:
	expr = mr.findall(YR)
	re.sub(expr, '', YR)
for N in S:
	print(N)
for YR in S:
	expr = mr.search(YR)
	print(expr)
	print(expr).group()
for YR in S:
	print(expr).group()
	print(expr)
for YR in S:
	print(YR)
help(re)
import re
S = "(2016) [1080p]"
import re
re.sub(' [1080p', '', S)
re.sub(' [1080p]', '', S)
re.sub(' \[1080p\]', '', S)
S = "(2016) [1080p]"
S
S.replace(' [1080p]', '')
S = "Movie.fname.1.720p-[YTS.AG].mp4"
S
import re
re.search(r'\[.*\]', S)
re.search(r'\[.*\]', S).group()
re.search(r'\[\w*[.-_]\w\]', S).group()
re.search(r'\[\w*[.-_].*\]', S).group()
re.search(r'\[\w*[.-_]\w*\]', S).group()
import re
re.search(r'[.-_\[\w*[.-_]\w*\]]', 'Movie.fname.2.720p.[YTS-AG].mp4')
re.search(r'[.-_\[\w*[.-_].*\]]', 'Movie.fname.2.720p.[YTS-AG].mp4')
re.search(r'[.-_\[\w*[.-_]\w*\]]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_\[\w*[.-_].*\]]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_\[\w*\]]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_]\[\w*\]]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_]\[\.*\]]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_]\[.*\]]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_]\[.*\]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
import re
re.search(r'[.-_]\[\w*[.-_]\w*\]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_]\[.*\]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_]\[.*[\.-_\].*', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_]\[.*[.-_\].*', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_]\[.*[.-_\].*\]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_]\[.*[.-_].*\]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_]\[\w*[.-_].*\]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_]\[\w*[.-_]\w*\]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_]\[\w*[.-_].*\]', 'Movie.fname.2.720p.[YTS-AG].mp4').group()
re.search(r'[.-_]\[\w*[.-_].*\]', 'Movie.fname.2.720p.[YTS_AG].mp4').group()
re.search(r'[.-_]\[\w*[.-_].*\]', 'Movie.fname.2.720p.[YTS AG].mp4').group()
re.search(r'[.-_]\[\w*.*\w\]', 'Movie.fname.2.720p.[YTS AG].mp4').group()
re.search(r'[.-_]\[\w*.\w\]', 'Movie.fname.2.720p.[YTS AG].mp4').group()
re.search(r'[.-_]\[\w*.\w*\]', 'Movie.fname.2.720p.[YTS AG].mp4').group()
re.search(r'[.-_]\[\w*.\w*\]', 'Movie.fname.2.720p.[YTS  AG].mp4').group()
re.search(r'[.-_]\[\w*.\w*\]', 'Movie.fname.2.720p.[YTS_ AG].mp4').group()
re.search(r'[.-_]\[\w*.\w*\]', 'Movie.fname.2.720p.[YTS_AG].mp4').group()
re.search(r'[.-_]\[\w*[-_]\w*\]', 'Movie.fname.2.720p.[YTS_AG].mp4').group()
re.search(r'[.-_]\[\w*[-_]\w*\]', 'Movie.fname.2.720p.[YTS AG].mp4').group()
re.search(r'[.-_]\[\w*[-_]\w*\]', 'Movie.fname.2.720p.[YTS.AG].mp4').group()
re.search(r'[.-_]\[\w*[-_.]\w*\]', 'Movie.fname.2.720p.[YTS.AG].mp4').group()
re.search(r'[.-_]\[\w*[.-_]\w*\]', 'Movie.fname.2.720p.[YTS.AG].mp4').group()
re.search(r'[.-_]\[\w*[.-_]\w*\]', 'Movie.fname.2.720p.[YTS..AG].mp4').group()
re.search(r'[.-_]\[\w*[.-_]\w*\]', 'Movie.fname.2.720p.[YTS.AG].mp4').group()
import cleanfname
import cleanfname as fnm
MV = "Cool Moon"
fnm.rename_fnm(MN)
fnm.rename_fnm(MV)
MV = "Cool.Moon.1.720p-[YTS.AG].mp4"
fnm.rename_fnm(MV)
import cleanfname as fnm
fnm.rename_fnm(MV)
MNMS = ["Cool.Moon.1.720p-[YTS.AG].mp4", "Movie.2.2017_[YTS-AG].avi", "Movie.3.2018.[YTS.AM].mkv"]
MNMS
for MNM in MNMS:
	fnm.rename_fnm(MNM)
import cleanfname as fnm
for MNM in MNMS:
	fnm.rename_fnm(MNM)
import cleanfname as fnm
MNMS = ["Cool.Moon.1.720p-[YTS.AG].mp4", "Movie.2.2017_[YTS-AG].avi", "Movie.3.2018.[YTS.AM].mkv"]
for MNM in MNMS:
	fnm.rename_fnm(MNM)
MNMS = ["Cool.Moon.1.720p-[YTS.AG].mp4", "Movie.2.2017_[YTS-AG].avi", "Movie.3.2018.[YTS.AM].mkv", "Cool Moon (2017"]
for MNM in MNMS:
	fnm.rename_fnm(MNM)
import cleanfname as fnm
MNMS = ["Cool.Moon.1.720p-[YTS.AG].mp4", "Movie.2.2017_[YTS-AG].avi", "Movie.3.2018.[YTS.AM].mkv", "Cool Moon (2017"]
for MNM in MNMS:
	fnm.rename_fnm(MNM)
MNMS = ["Cool.Moon.1.720p-[YTS.AG].mp4", "Movie.2.2017_[YTS-AG].avi", "Cool Moon (2017) [YTS-AG]", "Movie.3.2018.[YTS.AM].mkv"]
for MNM in MNMS:
	fnm.rename_fnm(MNM)
import cleanfname as fnm
MNMS = ["Cool.Moon.1.720p-[YTS.AG].mp4", "Movie.2.2017_[YTS-AG].avi", "Cool Moon (2017) [YTS-AG]", "Movie.3.2018.[YTS.AM].mkv"]
for MNM in MNMS: fnm.rename_fnm(MNM)
import cleanfname as fnm
MNMS = ["Cool.Moon.1.720p-[YTS.AG].mp4", "Movie.2.2017_[YTS-AG].avi", "Cool Moon (2017) [YTS-AG]", "Movie.3.2018.[YTS.AM].mkv"]
for MNM in MNMS: fnm.rename_fnm(MNM)
MNMS = ["Cool.Moon.1.720p-[YTS.AG].mp4", "Movie.2.2017_[YTS-AG].avi", "Cool Moon (2017) [YTS-AG]", "Movie.3.2018.[YTS.AM].mkv"]
for MNM in MNMS: fnm.rename_fnm(MNM)
import cleanfname as fnm
for MNM in MNMS: fnm.rename_fnm(MNM)
import cleanfname as fnm
for MNM in MNMS: fnm.rename_fnm(MNM)
MNMS = ["Cool.Moon.1.720p-[YTS.AG].mp4", "Movie.2.2017_[YTS-AG].avi", "Cool Moon (2017) [YTS-AG]", "Movie.3.2018.[YTS.AM].mkv"]
for MNM in MNMS: fnm.rename_fnm(MNM)
for MNM in MNMS: fnm.print_fnm(MNM)
NM = "Movie.name.1.720p-[YTS.AG].mp4"
NM
NM2 = fnm.rename_fnm(NM)
NM2
NM2 = fnm.rename_fnm(NM)
fnm.rename_fnm(NM)
import cleanfname as fnm
fnm.rename_fnm(NM)
NM = "Cool Moon (2017)"
fnm.rename_fnm(NM)
NM2 = fnm.rename_fnm(NM)
NM2
NM
NM = "Two.Moon.junction.2005.mp4"
NM2 = fnm.rename_fnm(NM)
NM2
NM2 = fnm.rename_fnm(NM)
import cleanfname as fnm
NM2 = fnm.rename_fnm(NM)
NM2
NM
NM2 = fnm.rename_fnm(NM)
import cleanfname as fnm
NM2 = fnm.rename_fnm(NM)
import cleanfname as fnm
NM2 = fnm.rename_fnm(NM)
NM = "Movie 1 (2018)"
NM2 = fnm.rename_fnm(NM)
NM = "Twoo.Moon.2017.mp4"
NM2 = fnm.rename_fnm(NM)
import cleanfname as fnm
NM2 = fnm.rename_fnm(NM)
import cleanfname as fnm
NM2 = fnm.rename_fnm(NM)
import cleanfname as fnm
NM = "Twoo.Moon.2017.mp4"
NM2 = fnm.rename_fnm(NM)
NM"
NM2
NM = "Twoo.Moon.2017-[YTS-AG].mp4"
NM2 = fnm.rename_fnm(NM)
NM2
import cleanfname as fnm
NM = "Twoo.Moon.2017-[YTS-AG].mp4"
NM2
NM2 = fnm.rename_fnm(NM)
NM2
import cleanfname as fnm
NM2 = fnm.rename_fnm(NM)
import cleanfname as fnm
NM = "Twoo.Moon.2017-[YTS-AG].mp4"
NM2 = fnm.rename_fnm(NM)
NM2
import cleanfname as fnm
NM = "Twoo.Moon.2017-[YTS-AG].mp4"
NM2 = fnm.rnm_f(NM)
NM2
NM = "Cool Moon (2017)"
NML = ["Movie.1.[YTS.AG].mp4", "Movie.2.mp4", "Cool Mountain (2018)", "Movie.4.720p.2017_[YTS_AM].avi"]
[fnm.rnm_f(FNM) for FNM in NML]
import cleanfname as fnm
NML = ["Movie.1.[YTS.AG].mp4", "Movie.2.mp4", "Cool Mountain (2018)", "Movie.4.720p.2017_[YTS_AM].avi"]
[fnm.rnm_f(FNM) for FNM in NML]
import cleanfname as fnm
NML = ["Movie.1.[YTS.AG].mp4", "Movie.2.mp4", "Cool Mountain (2018)", "Movie.4.720p.2017_[YTS_AM].avi"]
[fnm.rnm_f(FNM) for FNM in NML]
D = {'Movie.1-[YTS.AG].mp4':'Movie.1.mp4, 'Movie.2.avi':'Movie.2.avi', 'Movie.3_[YTS.AM].mp4':'Movie.3.mp4'}
D = {'Movie.1-[YTS.AG].mp4':'Movie.1.mp4', 'Movie.2.avi':'Movie.2.avi', 'Movie.3_[YTS.AM].mp4':'Movie.3.mp4'}
D
for k, v in D:
	if K == d:
		print("No renaming")
	else:
		print("Renaming " + k + " to: " v)
for k, v in D:
SyntaxError: invalid syntax
>>> for k, v in D:
...     else:
SyntaxError: invalid syntax
>>> for k, v in D:
...     else:
SyntaxError: invalid syntax
>>> for k, v in D:
...     else:
D
for k, v in D:
    if K == d:
            print("No renaming")
    else:
            print("Renaming " + k + " to: " v)
for k, v IN D:
for k, v in D:
	print(k, v)
for k, v in D.keys() D.values():
for k, v in D.keys(), D.values():
	print(k, v)
D.keys()
list(D.keys())
D
for key in D:
    if key == D[key]:
            print("No renaming")
    else:
            print("Renaming " + key + " to: " D[key])
for key in D:
    if key == D[key]:
            print("No renaming")
    else:
            print("Renaming " + key + " to: " + D[key])
for key in D:
    if key == D[key]:
            print("Original filename" + key + "is the same as NEW filename. No renaming!")
    else:
            print("Renaming " + key + " to: " + D[key])
import re
from rnmfnm import rename_fnm as rnmf
LFN = [ 'Movie.1.720p_[YTS.AG].mp4',
        'Movie.2.720p.2017.avi',
        'Movie.3.720p.2005_[YTS.AG].mp4',
        'Movie.4.720p_[YTS-AG].mp4',
        'Movie.5.720p-[YTS.AM].mp4',
        'Movie.6.720p_[YTS-AM].mp4',
        'Movie.7.720p.2016.mkv',
        'Movie.8.1080p-[YTS.AG].mkv',
        'Movie.9.1080p.2013-[YTS.AM].mp4',
]
D = {}
for EL in LFN:
    nefname = rnmf[EL]
    if EL == newfname:
        continue
    D['EL'] = newfname
import re
import rnmfnm as rnmf
LFN = [ 'Movie.1.720p_[YTS.AG].mp4',
        'Movie.2.720p.2017.avi',
        'Movie.3.720p.2005_[YTS.AG].mp4',
        'Movie.4.720p_[YTS-AG].mp4',
        'Movie.5.720p-[YTS.AM].mp4',
        'Movie.6.720p_[YTS-AM].mp4',
        'Movie.7.720p.2016.mkv',
        'Movie.8.1080p-[YTS.AG].mkv',
        'Movie.9.1080p.2013-[YTS.AM].mp4',
]
D = {}
for EL in LFN:
    nefname = rnmf.rename_fnm[EL]
    if EL == newfname:
        continue
    D['EL'] = newfname
D
import re
import rnmfnm as rnmf
LFN = [ 'Movie.1.720p_[YTS.AG].mp4',
        'Movie.2.720p.2017.avi',
        'Movie.3.720p.2005_[YTS.AG].mp4',
        'Movie.4.720p_[YTS-AG].mp4',
        'Movie.5.720p-[YTS.AM].mp4',
        'Movie.6.720p_[YTS-AM].mp4',
        'Movie.7.720p.2016.mkv',
        'Movie.8.1080p-[YTS.AG].mkv',
        'Movie.9.1080p.2013-[YTS.AM].mp4'
]
LNF
import re
import rnmfnm as rnmf
LFN = [ 'Movie.1.720p_[YTS.AG].mp4',
        'Movie.2.720p.2017.avi',
        'Movie.3.720p.2005_[YTS.AG].mp4',
        'Movie.4.720p_[YTS-AG].mp4',
        'Movie.5.720p-[YTS.AM].mp4',
        'Movie.6.720p_[YTS-AM].mp4',
        'Movie.7.720p.2016.mkv',
        'Movie.8.1080p-[YTS.AG].mkv',
        'Movie.9.1080p.2013-[YTS.AM].mp4'
]
LFN
import re
import rnmfnm as rnmf
LFN = [ 'Movie.1.720p_[YTS.AG].mp4',
        'Movie.2.720p.2017.avi',
        'Movie.3.720p.2005_[YTS.AG].mp4',
        'Movie.4.720p_[YTS-AG].mp4',
        'Movie.5.720p-[YTS.AM].mp4',
        'Movie.6.720p_[YTS-AM].mp4',
        'Movie.7.720p.2016.mkv',
        'Movie.8.1080p-[YTS.AG].mkv',
        'Movie.9.1080p.2013-[YTS.AM].mp4'
]
LFN
D = {}
for EL in LFN:
    nefname = rnmf.rename_fnm[EL]
    if EL == newfname:
        continue
    D['EL'] = newfname
import re
import rnmfnm as rnmf
LFN = [ 'Movie.1.720p_[YTS.AG].mp4',
        'Movie.2.720p.2017.avi',
        'Movie.3.720p.2005_[YTS.AG].mp4',
        'Movie.4.720p_[YTS-AG].mp4',
        'Movie.5.720p-[YTS.AM].mp4',
        'Movie.6.720p_[YTS-AM].mp4',
        'Movie.7.720p.2016.mkv',
        'Movie.8.1080p-[YTS.AG].mkv',
        'Movie.9.1080p.2013-[YTS.AM].mp4'
]
LFN
D = {}
for EL in LFN:
    NEWFN = rnmf.rename_fnm[EL]
    if EL == NEWFN:
        continue
    D['EL'] = NEWFN
D
import re
import rnmfnm as rnmf
LFN = [ 'Movie.1.720p_[YTS.AG].mp4',
        'Movie.2.720p.2017.avi',
        'Movie.3.720p.2005_[YTS.AG].mp4',
        'Movie.4.720p_[YTS-AG].mp4',
        'Movie.5.720p-[YTS.AM].mp4',
        'Movie.6.720p_[YTS-AM].mp4',
        'Movie.7.720p.2016.mkv',
        'Movie.8.1080p-[YTS.AG].mkv',
        'Movie.9.1080p.2013-[YTS.AM].mp4'
]
LFN
D = {}
for EL in LFN:
    NEWFN = rnmf.rename_fnm[EL]
    print(NEWFN)
    if EL == NEWFN:
        continue
    D['EL'] = NEWFN
D
import re
import rnmfnm as rnmf
LFN = [ 'Movie.1.720p_[YTS.AG].mp4',
        'Movie.2.720p.2017.avi',
        'Movie.3.720p.2005_[YTS.AG].mp4',
        'Movie.4.720p_[YTS-AG].mp4',
        'Movie.5.720p-[YTS.AM].mp4',
        'Movie.6.720p_[YTS-AM].mp4',
        'Movie.7.720p.2016.mkv',
        'Movie.8.1080p-[YTS.AG].mkv',
        'Movie.9.1080p.2013-[YTS.AM].mp4'
]
LFN
D = {}
for EL in LFN:
    NEWFN = rnmf.rename_fnm[EL]
    print(NEWFN)
    '''if EL == NEWFN:
        continue
    D['EL'] = NEWFN'''
print(D)
import re
import rnmfnm as rnmf
LFN = [ 'Movie.1.720p_[YTS.AG].mp4',
        'Movie.2.720p.2017.avi',
        'Movie.3.720p.2005_[YTS.AG].mp4',
        'Movie.4.720p_[YTS-AG].mp4',
        'Movie.5.720p-[YTS.AM].mp4',
        'Movie.6.720p_[YTS-AM].mp4',
        'Movie.7.720p.2016.mkv',
        'Movie.8.1080p-[YTS.AG].mkv',
        'Movie.9.1080p.2013-[YTS.AM].mp4'
]
LFN
D = {}
for EL in LFN:
    print(EL)
    NEWFN = rnmf.rename_fnm[EL]
    print(NEWFN)
import re
import rnmfnm as rnmf
LFN = [ 'Movie.1.720p_[YTS.AG].mp4',
        'Movie.2.720p.2017.avi',
        'Movie.3.720p.2005_[YTS.AG].mp4',
        'Movie.4.720p_[YTS-AG].mp4',
        'Movie.5.720p-[YTS.AM].mp4',
        'Movie.6.720p_[YTS-AM].mp4',
        'Movie.7.720p.2016.mkv',
        'Movie.8.1080p-[YTS.AG].mkv',
        'Movie.9.1080p.2013-[YTS.AM].mp4'
]
LFN
D = {}
for EL in LFN:
    print(EL)
    # NEWFN = rnmf.rename_fnm[EL]
    # print(NEWFN)
    '''if EL == NEWFN:
        continue
    D['EL'] = NEWFN'''
print(D)
my_fnames_list = [ 'Movie.1.720p_[YTS.AG]',
        'Movie.2.720p.2017',
        'Movie.3.720p.2005_[YTS.AG]',
        'Movie.4.720p_[YTS-AG]',
        'Movie.5.720p-[YTS.AM]',
        'Movie.6.720p_[YTS-AM]',
        'Movie.7.720p.2016',
        'Movie.8.1080p-[YTS.AG]',
        'Movie.9.1080p.2013-[YTS.AM]'
]
my_fname_list
my_fnames_list
for orig_name in my_fnames_list:
	new_name = orig_name + "_NEW"
	print(new_name)
NEWL = []
for orig_name in my_fnames_list:
	new_name = orig_name + "_NEW"
	NEWL.append(new_name)
print(NEWL)
def fname_list(flist):
    new_fnames_list = []
    for orig_fname in flist:
        new_fname = orig_name + "_NEW"
        new_fnames_list.append(new_fname)
    return new_fnames_list
NL = fname_list(my_fnames_list)
fname_list(my_fnames_list)
print(fname_list(my_fnames_list))
def fname_list(flist):
    new_fnames_list = []
    for orig_fname in flist:
        new_fname = orig_name + "_NEW"
        new_fnames_list.append(new_fname)
    return new_fnames_list
print(fname_list(my_fnames_list))
NL = fname_list(my_fnames_list)
NL
for EL in NL: print(EL)
L0 = [ 'Movie.1.720p_[YTS.AG]',
        'Movie.2.720p.2017',
        'Movie.3.720p.2005_[YTS.AG]',
        'Movie.4.720p_[YTS-AG]',
        'Movie.5.720p-[YTS.AM]',
        'Movie.6.720p_[YTS-AM]',
        'Movie.7.720p.2016',
        'Movie.8.1080p-[YTS.AG]',
        'Movie.9.1080p.2013-[YTS.AM]'
]
for el in L0: print(el)
	nel = el + "_NEW"
for el in L0: print(el)
for el in L0: print(el):
for el in L0:
	nel = el + "_NEW"
	print(nel)
NL = []
for el in L0:
	nel = el + "_NEW"
	NL.append(nel)
NL
def new(list):
	nlist = []
	for el in list:
		nel = el + "_NEW"
		nlist.append(nel)
	return nlist
NNN = new(L0)
NNN
for el in NNN: print(el)
import os
os.listdir(".")
cd ..
os.listdir("../")
os.listdir(".")
[F for F in os.listdir(".")]
[F for F in os.listdir("../")]
[F for F in os.listdir("../") if 'py' in F]
[F for F in os.listdir("../") if '.py' in F]
[F for F in os.listdir("../") if os.path.isfile(F)]
import os, sys
[os.path.isfile(F) for F in os.listdir("../")]
[F for F in os.listdir("../") if os.path.isfile(F)]
[F for F in os.listdir("../")]
[F for F in os.listdir("../") if os.path.isfile("./" + F)]
[F for F in os.listdir("../")]
for el in [F for F in os.listdir("../")]: print(el)
for el in [F for F in os.listdir("../")]:
	if os.path.isfile(el):
		print(el)
for el in [F for F in os.listdir("../")]:
	if os.path.isfile("." + el):
		print(el)
os.path.isfile('test_test.py')
os.path.isfile('./test_test.py')
os.path.isfile('t2.py')
os.path.isfile(t2.py)
os.path.isfile('t2.py')
os.path.isfile('../t2.py')
for el in [F for F in os.listdir("../")]:
	if os.path.isfile("../" + el):
		print(el)
import os, sys, re
[F for F in os.listdir("../") if os.path.isfile("../" + F)]
[F for F in os.listdir("./") if os.path.isfile("./" + F)]
curdir = "./"
[F for F in os.listdir(curdir) if os.path.isfile(curdir + F)]
curdir = "../../"
[F for F in os.listdir(curdir) if os.path.isfile(curdir + F)]
import ../rnm_fname
cd ..
ll
import rnm_fname
D = rnm_fname.new_fnames_dict('FAJLS/')
import rnm_fname
D = rnm_fname.new_fnames_dict('FAJLS/')
import rnm_fname
D = rnm_fname.new_fnames_dict('FAJLS/')
import rnm_fname
D = rnm_fname.new_fnames_dict('FAJLS/')
import rnm_fname
D = rnm_fname.new_fnames_dict('FAJLS/')
D
rnm_fname.new_fnames_dict('FAJLS/')
import rnm_fname
rnm_fname.new_fnames_dict("./")
curdir = "./"
flist = [F for F in os.listdir(curdir) if os.path.isfile(curdir + F)]
import os
flist = [F for F in os.listdir(curdir) if os.path.isfile(curdir + F)]
ll
ls
import os
os.lostdir(".")
os.listdir(".")
[F for F in os.listdir(curdir) if os.path.isfile(curdir + F)]
curdir = "./"
[F for F in os.listdir(curdir) if os.path.isfile(curdir + F)]
flist
flist = [F for F in os.listdir(curdir) if os.path.isfile(curdir + F)]
flist
for el in flist: print(el)
for el in flist:
	rnm_fname.remove_yts_fname(el)
import enm_fname
import rnm_fname
for el in flist:
	rnm_fname.remove_yts_fname(el)
D = {}
for el in flist:
	nnm = rnm_fname.remove_yts_fname(el)
	D[el] = nnm
D
D = {}
for el in flist:
	nnm = rnm_fname.remove_yts_fname(el)
	if nnm != None
for el in flist:
	nnm = rnm_fname.remove_yts_fname(el)
	if nnm != None:
		D[el] = nnm
D
ll
import rnm_fname
D = rnm_fname.new_fnames_dict("./")
D
D = rnm_fname.new_fnames_dict("./")
import rnm_fname
D = rnm_fname.new_fnames_dict("./")
import rnm_fname
D = rnm_fname.new_fnames_dict("./")
D
D = {}
D = rnm_fname.new_fnames_dict("./")
D
D = {}
D
rnm_fname.new_fnames_dict("./")
import rnm_fname
D = {}
D = rnm_fname.new_fnames_dict("./")
D
	import rnm_fname
import rnm_fname
D = rnm_fname.new_fnames_dict("./")
D
import rnm_fname
D = rnm_fname.new_fnames_dict("./")
for k in D:
	print(k, "-->>", D[k])
AA = rnm_fname.new_fnames_dict("./FAJLS/")
D
AA
FJLNM = "Muca.copatarica.1945.720p_[YTS-AG].mp4"
rnm_fname.remove_yts_fname(FJLNM)
FJLNM = "Muca.copatarica.1945.720p.mp4"
rnm_fname.remove_yts_fname(FJLNM)
FF = rnm_fname.remove_yts_fname(FJLNM)
FF
start(FF)
stat(FF)
dir(FF)
type(FF)
if FF = None: print("NONE")
if FF == None: print("NONE")
	import rnm_fname
import rnm_fname
D = rnm_fname.new_fnames_dict('FAJLS/')
D
D.keys()
D.values()
D
for key in D:
	oldn = key
	newn = D[key]
	print("os.rename(" + oldn + ", " + newn + ")")
for key in D:
	oldn = str(key)
	newn = str(D[key])
	print("os.rename(" + oldn + ", " + newn + ")")
for key in D:
	oldn = key
	newn = D[key]
	print("os.rename(" + str(oldn) + ", " + str(newn) + ")")
os.chdir(FAJLS)
import os
os.chdir(FAJLS)
os.chdir(FAJL)
import os
os.curdir(".")
os.path.curdir(".")
os.cwd()
os.listdir(".")
os.chdir(FAJLS)
os.chdir("FAJLS")
os.listdir(".")
os.chdir("../")
import rnm_fname
D = rnm_fname.new_fnames_dict('FAJLS/')
D
os.chdir("FAJLS")
for key in D:
	oldn = key
	newn = D[key]
	os.rename(oldn, newn)
os.listdir(":")
os.listdir(".")
import mdl_rnm_fname
help(mdl_rnm_fname)
import mdl_rnm_fname as rnmf
help(rnmf)
import mdl_rnm_fname
help (mdl_rnm_fname)
import mdl_rnm_fname as rnmf
help(rnmf)
import mdl_rnm_fname as rnmf
help(rnmf)
import mdl_rnm_fname as rnmf
help(rnmf)
import mdl_rnm_fname as rnmf
help(rnmf)
from mdl_rnm_fname import *
whos
import whos
import mdl_rnm_fname
mdl_rnm_fname
help(mdl_rnm_fname)
import rename/rnm_fnames as rnf
import rename.rnm_fnames as rnf
rnf.new_fnames_dict(".")
D = rnf.new_fnames_dict(".")
D
for k, v in D.keys(), D.values():
	print(k, "-->", v)
for key in D:
	print(key 
for key in D:
	print(key + " --> " + D[key])
import rename.rnm_fnames as rnf
D = rnf.new_fnames_dict(".")
D
for key in D: print(key + " -->   " + D[key])
os.listdir(".")
import os
os.listdir(".")
import rename.rnm_fnames as rnf
D = rnf.new_fnames_dict(".")
D
D = rnf.new_fnames_dict("FAJLS")
D
import os
os.listdir(".")
os.path.isfile('FAJLS')
os.path.isdir('FAJLS')
os.path.isfile('FAJLS/')
os.path.isdir('FAJLS/')
import glob
os.path.isfile(glob('FAJLS/+)')
os.path.isfile(glob('FAJLS/*'))
rename.rnm_fnames_dict(".")
import rename.rnm_fnames
help(rnm_fnames)
help(rename.rnm_fnames)
S = "GGGRRR ffffHHH!"
s-lower()
s.lower()
S.lower()
import rename.mdl_rnm_fname as rnf
import rename.rnm_fnames as rnf
help(rnf)
import os, sys
os.getcwd()
os.path.join(os.getcwd(), 'FAJLS')
curdir = os.path.join(os.getcwd(), 'FAJLS')
curdir
D = rnf.new_fnames_dict(curdir)
curdir = os.getcwd()
D = rnf.new_fnames_dict(curdir)
D
os.dirlist(curdir)
os.path.dirlist(curdir)
help(os.path) | less
os.path.listdir(curdir)
os.listdir(curdir)
curdir
import os, sys
import rename.rnm_fnames as rnf
os.getcwd()
curdir = os.path.join(os.getcwd(), 'FAJLS')
curdir
os.listdir()
D = rnf.new_fnames_dict(curdir)
D
curdir = os.getcwd()
D = rnf.new_fnames_dict(curdir)
D
BODY = "This is a second line."
M = '''This is a firts line\nBODY'''
M
M = """This is a firts line\nBODY"""
M
BODY = "This is a second line."
M = "This is a firts line\n" + BODY
M
print(M)
s = '2018-04-04'
s.split('-')
sqnc = iter(1, 2, 3, 4, 5, 6, 7, 8, 9)
items = (0,1,2,3,4,5,6,7,8,9)
sqnc = iter(items)
next(sqnc)
sqnc = iter(items)
for N in range(len(items)):
	next(sqnc)
e = [1, 2, 3, 4, 5, 6, 7, 8, 9]
e2 = enumerate(e)
next(e2)
e = [1, 2, 3, 4, 5, 6, 7, 8, 9]
e2 = enumerate(e)
for ITM in range(len(e)):
	print(ITM)
for ITM in range(len(e2)):
	print(ITM)
for ITM in range(len(e)):
	next(e2)
e
l = ['a', 'b', 'c']
N = zip(e, l)
N
next(N)
def sqr_all(numbers):
	for n in numbers:
		yield n**2
from itertools import count
numbers = count(10)
sqr_all(numbers)
numbers = [range(11)]
numbers
numbers = list(numbers)
numbers
numbers = [i for i in range(11)]
numbers
sqr_all(numbers)
BB = sqr_all(numbers)
next(BB)
numbers
for i in len(numbers):
	next(sqr_all(numbers))
BB = sqr_all(numbers)
for i in len(numbers):
	next(BB)
numbers
BB = sqr_all(numbers)
BB
for i in len(numbers):
	print(i)
numbers
len(numbers)
for i in len(range(numbers)):
	next(sqr_all(numbers))
for i in len(range(numbers)):
	next(BB)
BB
next(BB)
for i in len(range(numbers)):
	print(i)
for i in range(numbers):
	print(i)
for i in len(numbers):
	print(i)
len(numbers)
for i in range(len(numbers)):
	print(i)
for i in range(len(numbers)):
	next(BB)
BB = sqr_all(numbers)
for i in range(len(numbers)):
	next(BB)
e
e2
e3 = iter(e)
e3
sum(e3)
el = 0
for itm in e:
	el += itm
	print(el)
for itm in e:
e
for i, num in enumerate(e):
	print(i, num)
for i, num in enumerate(e):
	if i > 5:
		break
	print(num)
for i, num in enumerate(e):
	if i > 5:
		break
	print(i, num)
for i, num in enumerate(e):
	while num < 8:
		print(i, num)
for i, num in enumerate(e):
	while num not > 8:
for i in e:
	print(e)
e2
e3
for i in e3:
	print(i)
e2 = iter(e)
e2
for i in e2:
	print(i)
e2
	print(i[2:3])
for i in e2:
	print(i[2:3])
for i in e2:
	print(e2[2:3])
print(e2[2:3])
print(e[2:3])
print(e[2:5])
print(e[2:-1])
NM = {"Gregor Redelonghi":16}
for name, num in NM.items():
	print(name. num)
	print(name, num)
for name, num in NM.items():
	print(name, num)
for name, num in NM.items():
	print({}.format(name).rjust(num))
for name, num in NM.items():
	print({}.format(name.rjust(num))
name, num = NM.items():
name, num = NM.items()
NM.items()
name, num = dict(NM.items())
name, num = list(NM.items())
NM.items()
name, num = NM.key(), NM.value()
name, num = NM.keys(), NM.value()
name, num = NM.keys(), NM.values()
name
NM
NM.value
NM.value()
NM.values()
list(NM.values())
list(NM.values())[0]
name, num = NM.keys()[0], NM.values()[0]
name, num = list(NM.keys())[0], list(NM.values())[0]
name
num
print({}.format(name.rjust(num)))
name
print("{}".format(name.rjust(num)))
print("{}".format("Gregor Redelonghi".rjust(16)))
print("{}".format("Gregor Redelonghi".rjust(20)))
print("{}".format("Gregor Redelonghi".rjust(30)))
NM = {"Gregor Redelonghi":30}
name, num = list(NM.keys())[0], list(NM.values())[0]
print("{}".format(name.rjust(num)))
import tabulate
help(tabulate)
import csv
f = open("data.txt", "r")
rd = csv.reader(f; delimeter=";")
rd = csv.reader(f, delimeter=";")
rd = csv.reader(f, delimiter=";")
for roe in rd:
	print(roe)
for roe in rd:
	print(roe)
f.close()
f = open("data.txt", "r")
rd = csv.reader(f, delimiter=";")
T1 = []
for row in rd:
	T1.append(row)
f.close()
T1
print(' '.join(T1[0]))
print('|'.join(T1[0]))
for el in T1[0]:
	L = '|'.join(el)
print(L)
for el in T1[0]:
	L = '|'.join(el)
print(L)
T1
T1[0]
L = '|'.join(T1[0])
L
LL = ['name', 's-name', 'nick-name']
LL
for el in LL:
	print(el, end='')
	print(el + " ", end='')
for el in LL:
	print(el + " ", end='')
LL = [['name', 's-mame', 'n-name], ['Gregor', 'Redelonghi', 'RogergG']]
LL = [['name', 's-mame', 'n-name'], ['Gregor', 'Redelonghi', 'RogergG']]
LL
LL[0]
LL[1]
for el in LL[0]:
	print(el)
	print(el, end ='')
for el in LL[0]:
	print(el, end ='')
LL = [["Gregor", "SoLa", "GAGAGAggg"], ["mojca", "sonjA", "Ti Ti"]]
LL
S = "GREGOR"
S-lower()
S.lower()
for list in LL:
	for item in list:
		if S.lower() == utem.lower():
			print(item)
			print(line)
for list in LL:
	for item in list:
		if S.lower() == utem.lower():
			print(line)
for list in LL:
	for item in list:
		if S.lower() == item.lower():
			print(item)
			print(line)
for list in LL:
	for item in list:
		if S.lower() == item.lower():
			print(list)
			print(item)
hs = "  "
len(hs)
hsd = " |"
len(hsd)
p = hs -hsd
p = hs + hsd
p
len(p)
import csv
data = "SampleCSVFile_2kb.csv"
with open(data) as f:
	f.readlines()
	read()
with open(data) as f:
	f.read()
import codecs, csv
with codecs.open(data, "r",encoding='utf-8', errors='ignore') as f:
    f.readlines()
data = "SampleCSVFile_2kb.csv"
import codecs, csv
with codecs.open(data, "r",encoding='utf-8', errors='ignore') as f:
    f.readlines()
L1 = []
def addm('name'):
def addm(name):
	L1.append(str(name))
def getm(name):
	L1.pop(str(name))
addm('Gregor 1')
L1
addm('Gregor 2')
addm('Tadeja 1')
addm('Zala 1')
L1
addm('Mark 1')
addm('Spela 1')
addm('Spela 2')
L1
getm('Gregor 2')
def getm():
	L1.pop()
getm()
L1
getm
L1
help(pop())
L1.pop()
L1
addm('Spela ')
L1
L1[-1]
L1[-1] = 'Spela 1'
L1[-1]
L1
def getm():
	L1.pop()
getm()
L1
getm()
L1
def getm():
	return L1.pop()
getm()
L1
getm()
L1 = []
def addm(name):
	L1.append(str(name))
def getm():
	return L1.pop(0)
addm(Gregor)
addm('Gregor')
addm('Tadeja')
addm('Zala')
addm('Mark')
addm('Spela')
L1
getm()
L1
getm()
L1
getm()
L1 = ['Gregor','Tadeja','Zala','Mark','Spela','Guest1','Guest2','Guest3']
lastGuest = getm()
lastGuest
L1[0] = 'Greg0r'
L1
L1[0].replace('Gregor')
L1.replace(0, 'Gregor')
L1[0].replace('Greg0r', 'Gregor')
L1
L1[0] 0 'Gregor'
L1[0] = 'Gregor'
L1
def getm():
	L1.pop()
lastGuest = getm()
L1
lastGuest
def getm():
	return L1.pop()
L1[-1] = 'Guest3'
L1
L1[-1] = 'Guest2'
addm('Guest3')
L1
lastGuest = getm()
lastGuest
L1
addm('InLaw0')
L1
L1.isindex('Guest2')
L1.index('Guest2')
L1.index('Gueste')
for name in ('Spela', 'Mark', 'Zarja', 'Mami'):
	if name not in L1:
		print(Name + "Not in list!")
	print("Index of " + name + " is: " + L1.index(name))
for name in ('Spela', 'Mark', 'Zarja', 'Mami'):
	if name not in L1:
		print(Name + "Not in list!")
	print("Index of " + name + " is: " + str(L1.index(name)))
for name in ('Spela', 'Mark', 'Zarja', 'Mami'):
	if name not in L1:
		print(name + "Not in list!")
for name in ('Spela', 'Mark', 'Zarja', 'Mami'):
	if name not in L1:
		print(name + " Not in list!")
	print("Index of " + name + " is: " + str(L1.index(name)))
for name in ('Spela', 'Mark', 'Zarja', 'Mami'):
	if name not in L1:
		print(name + " Not in list!")
	else:
		print("Index of " + name + " is: " + str(L1.index(name)))
for name in ('Spela', 'Mark', 'Zarja', 'Mami'):
	if name not in L1:
		print(name + " Not in list!")
		continue
	print("Index of " + name + " is: " + str(L1.index(name)))
L1 = ['Gregor_1','Gregor_2','Tadeja','Zala','Mark','Spela','Guest_1', 'Guest_2']
def addm(mem):
	L1.append(mem)
L2 = [g
L2 = []
def pull():
	mem = L1.pop()
	L2.append(mem)
	print("Last member: " + mem + "removed from list.")
L1
L2
addm('Palcek Smuk')
L1
pull()
L1
pull()
l1
L1
L2
addm('Mojca Pokrajculja')
L1
L2
L1.extend(L2)
L1
L2
L2 = [g
L2 = []
L2
pull()
L2
L1
help(L1.insert())
help(L1.insert(0, 0))
L1
L1.remove(0)
L1
help(L1.insert)
L1.insert(-1, 'NewGuest')
L1
L2
pull()
L1
L2
L1.extend(L2)
L1
L2
L2 = []
open
exit
version
Version
import math
help(math)
result = math.sqrt(100)
print(result)
2 + 16
L = []
def addm():
def addm(mem):
	L.append(mem)
addm('Gregor Redelonghi')
L
addm('Tadeja Mali Redelonghi')
L
exit
import sys
help(sys)
from statistics import *
L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
mean(L)
median(L)
max(L)
min(L)
L=[4, 2, 8, 9, 22, 104, -2, 55, 3, 1, 1000]
mean(L)
median(L)
min(L)
max(L)
help(statistics)
dir(statistics)
import statistics as st
dir(st)
stdev(L)
variance(L)
L
mode(L)
median_low(L)
median_high(L)
help(st.mode())
help(st.mode)
mode(L)
L=[2,2,3,3,3,4,5,6,6,7,8,9,9,9,9,1,1,1,1,1,1,0,0]
L
mode(L)
L = [1,2,3,4,
L=[1,2,3,4,5,6,7,8,9]
map(lambda x: x*x, L)
M = map(lambda x: x*x, L)
M
for i in M:
	print(i)
M = list(map(lambda x: x*x, L))
m
M
N = list(map(lambda x: x**2), L)
N = list(map(lambda x: x**2, L)
N = list(map(lambda x: x**2, L))
N
M
2^3
2**3
S = list(map(lambda x: x**(1/2.0, L))
S = list(map(lambda x: x**(1/2.0), L))
S
S = list(map(lambda x: x**(1/2), L))
S
for i in S:
	print("{}".format(i))
	print("{}".format(i, end=""))
	print("{}".format(i), end="")
for i in S:
	print("{}".format(i), end="")
for i in S:
	print("{0:2.5f}".format(i))
	print("{0:1.5f}".format(i))
for i in S:
	print("{0:1.5f}".format(i))
for i in S:
	print("{0:.5f}".format(i))
	print("{0:.5d}".format(i))
for i in S:
	print("{0:.5d}".format(i))
for i in S:
	print("{0:.4f}".format(i))
for i in S:
	print("{0:4f}".format(i))
	print("{0:03.4f}".format(i))
for i in S:
	print("{0:03.4f}".format(i))
	print("{0:0.4f}".format(i))
for i in S:
	print("{0:0.4f}".format(i))
for i in S:
	print("{0:.04f}".format(i))
	print("{0:.16f}".format(i))
for i in S:
	print("{0:.16f}".format(i))
for i in S:
	print("{0:.32f}".format(i))
print("{.4f}".format(123.5468779135765716541))
print("{0:.4f}".format(123.5468779135765716541))
print("{0:.22f}".format(123.5468779135765716541))
print("{0:03.22f}".format(123.5468779135765716541))
print("{0:05.22f}".format(123.5468779135765716541))
print("{0:0x5.22f}".format(123.5468779135765716541))
print("{0:05.6f}".format(123.5468779135765716541))
print("{0:05.2f}".format(123.5468779135765716541))
print("{0:06.2f}".format(123.5468779135765716541))
print("{:06.2f}".format(123.5468779135765716541))
print("{:06.2f}".format(3.5468779135765716541))
print("{:06.22f}".format(3.5468779135765716541))
print("{:06.5f}".format(3.5468779135765716541))
print("{:06.2f}".format(3.5468779135765716541))
print("{:06.3f}".format(3.5468779135765716541))
print("{:08.3f}".format(3.5468779135765716541))
print("{:026.22f}".format(3.5468779135765716541))
print("{:A26.22f}".format(3.5468779135765716541))
print("{:"A"26.22f}".format(3.5468779135765716541))
print("{:26.22f}".format(3.5468779135765716541))
print("{:126.22f}".format(3.5468779135765716541))
print("{:026.22f}".format(3.5468779135765716541))
for i in S:
	print("{0:040.32f}".format(i))
	print("{0:10.5f}".format(i))
	print("{0:040.32f}".format(i))
for i in S:
	print("{0:10.5f}".format(i))
for i in S:
	print("{0:010.5f}".format(i))
for i in S:
	print("{0:080.5f}".format(i))
for i in S:
	print("{0:08.5f}".format(i))
for i in S:
	print("{0:08.3f}".format(i))
	print("{0:08.3f}".format(i)) | grep 000
from PIL import Image
im = Image.open("075.JPG")
im.size()
print(im.size())
print(list(im.size()))
W, H = im.size()
im.size().show()
tule(im.size())
tpule(im.size())
tuple(im.size())
im
im.size
w, h = im.size
w
h
import os, sys
curd = os.getcwd()
curd
os.listdir(curd)
from timit inport timit
from timit import timit
from timeit import timeit
timeit(print(), number=10000)
timeit("print()", number=10000)
timeit("print()", number=1000000)
timeit("print()", number=100000)
timeit("print()", number=500000)
MD = {'first':'Gregor', 'second':'Redelonghi', 3:'Valvasorjeva ulic 5', 4:'1000 Ljubljana'}
MD[3]
MD[4]
MD[5]
MD['first']
print("I am getting the values: {} and {} and {} -- (None if nonexistant)".format(MD.get('first', 'NONE'), MD.get('second', 'NONE'), MD.get('third', 'NONE')))
print("I am getting the values: \"{} and {} and {} -- (None if nonexistant)!".format(MD.get('first', 'NONE'), MD.get('second', 'NONE'), MD.get('third', 'NONE')))
print("I am getting the values: \"{}\" and \"{}\" and \"{}\" -- (None if nonexistant)".format(MD.get('first', 'NONE'), MD.get('second', 'NONE'), MD.get('third', 'NONE')))
print("I am getting the values: \"{}\" and \"{}\" and \"{}\" -- (None if nonexistant)!".format(MD.get('first', 'NONE'), MD.get('second', 'NONE'), MD.get('third', 'NONE')))
print('This is a sentence with \'quotes ...\'')
print(r'This is a sentence with \'quotes ...\'')
print("Kva je zej?".rjust(20, '.'))
print("Kva je zej?".ljust(20, '.'))
print("Kva je zej? ".ljust(20, '.'))
import pyperclip
import re
RP = re.compile(r'\d\d\d-\d\d\d-\d\d\d')
mo = RP.search('Na≈°a nova ≈°tevilka je 041-555-666, ali pa 050-999-888.")
mo = RP.search('Na≈°a nova ≈°tevilka je 041-555-666, ali pa 050-999-888.')
mo.group()
RP = re.compile(r'\d\d\d-\d\d\d-\d\d\d')
mo = RP.findall('Na≈°a nova ≈°tevilka je 041-555-666, ali pa 050-999-888.')
mo.group()
mo
mo = RP.search('Na≈°a nova ≈°tevilka je 041-555-666, ali pa 050-999-888.')
mo
mo != Null
mo != None
mo = RP.search('Na≈°a nova ≈°tevilka je 041-555-66r, ali pa 050-l999-888.')
mo != None
mo = RP.search('Na≈°a nova ≈°tevilka je 041-555-666, ali pa 050-999-888.')
mo != None
if mo != None:
	mo
if mo != None:
	mo.group()
RP = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d)')
mo = RP.search('Na≈°a nova ≈°tevilka je 041-555-666, ali pa 050-999-888.')
mo
mo.groups()
mo.group(1)
mo.group(2)
mo.group(0)
mo.group(3)
mo.groups()
AC = mo.group(1)
RN = mo group(2)
RN = mo.group(2)
print("The Area code is: {}, and the rest number is: {}. Bye".format(AC, RN))
S = '''This is a first line
.
And this is a third line.
Hey! What happend to second?
This is the 5-th line, and also the last one. Bye.'''
S
import re
rgx = re.compile(r'\n')
rgx.sub('GO-TO-NEXT', S)
S
print(S)
S2 = rgx.sub('GO-TO-NEXT', S)
print(S2)
pnc = re.compile(r' |.|,|:|?')
pnc = re.compile(r' |\.|,|:|\?')
pnc.findall("What the hell is this? Go to yout room.")
pnc.sub("_", "What the hell is this? Go to yout room.")
S = "What the hell is this? Go to yout room."
S.replace(' ', '_'=
S.replace(' ', '_')
impor tpyperclip
impor pyperclip
pyperclip
pip3 install --upgrade pip
import pyperclip
S = "Kr neki en stavk z presledki."
S2 = S.replace(' ', '_')
S2
S2 = S.replace(' ', '_').replace('.' , '')
S2
S2.pyperclip.copy()
pyperclip.copy(S2)
import os
os.path.join('home', 'forallusers', 'mayFuc-ing_files')
os.path.join('/', 'home', 'forallusers', 'mayFuc-ing_files')
import shelve
VRB = shelve.open('VRB.txt')
S = "This is a Variable VRB contents.\nUse with caution!"
VRB['frst'] = S
VRB.close()
S
S = None
S
unset None
unset S
V2 = shelve.open('VRB.txt')
V2['frst']
V2
V2.items()
dist(V2).items()
dict(V2).items()
V2['second'] = "This is the second item."
V2
dict(V2).items()
tuple(V2).items()
V2.items()
dict(V2).items()
V2['second']
dict(V2).keys()
dict(V2).values>()
dict(V2).values()
for k, v  in dict(V2).items()
for k, v  in dict(V2).items():
	print("Key: {}, and the contents: {}".format(k, v))
import shelve
shelve.open('VRB.data')
VRB = shelve.open('VRB.data')
mjfjl = shelve.open('VRB.data')
import shelve
mjfjl = shelve.open('VRB.data')
mjfjl
dict(mjfjl)
list(mjfjl.keys())
list(mjfjl.values())
list(mjfjl.items()())
list(mjfjl.items())
mjfjl.close()
mjfjl
list(mjfjl.items())
S = "Stavek  z dvema    ali   vec presledki"
S
S.replace(' ', '-')
import re
srch = re.compile(r'\s+')
mo = srch(S)
mo = srch.findall(S)
mo
mo = srch.sub('-', S)
mo
mo = srch.findall(S)
mo
mo.search(S)
mo = srch.search(S)
mo
mo.group()
mo.groups()
mo.groups(1)
mo.groups(12
mo.groups(2)
mo.group(2)
mo.group(1)
mo.groups()
mo
mo = srch.sub('*', S)
mo
S = "Stavek  z dvema    ali   vec presledki"
S.lower()
S.lower().replace(' ', '-')
S.lower().replace(' ', '-').replace('--', '-')
S.lower().replace(' ', '-').replace('--', '-').replace('--'. '-')
S.lower().replace(' ', '-').replace('--', '-').replace('--', '-')
S.lower().replace(' ', '-').replace('---', '-').replace('--', '-')
S
re.sub(r"\s+", "-")
import re
re.sub(r"\s+", "-")
re.sub(r"\s+", "-", S)
S
S = "Stavek  z dvema    ali   vec presledki.docx"
re.sub(r"\s+", "-", S)
re.sub(r"\s+", "-", S).rstrip('.')
re.sub(r"\s+", "-", S).rsplit('.')
re.sub(r"\s+", "-", S).rsplit('.')[0]
re.sub(r"\s+", "-", S).rsplit('.')[0].lower()
	
import os
os.listdir()
for FJL in os.listdir():
	if 'vpn' in FJL:
		print(FJL)
S = "Gregor Redelonghi 12-23-2015 and the new Day!"
S
import re
re.compile(r"""(^.*)
-(0|1\d)
re.compile(r"""(^.*?)-
((0|1)?\d)-
((0|1|2|3)?\d)-
((19|20)?\d\d)
(.*?)$
""", re.VERBOSE)
DTP = re.compile(r"""^(.*?)-
((0|1)?\d)-
((0|1|2|3)?\d)-
((19|20)?\d\d)
(.*?)$
""", re.VERBOSE)
mo = DTP.search(S)
mo.groups
S
DTP = re.compile(r'^(.*?)(\d{2})-(\d{2})-(\d{4})(.*?)$')
mo = DTP.search(S)
mo.groups
mo.group(1)
mo.group(2)
mo.groups()
mo.group(3)
mo.group(4)
print("{}.{}.{}".format(mo.group(3), mo.group(2), mo.group(4)))
S
import logging
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s')
logging.debug("Logging Info: All is COOL!)
logging.debug("Logging Info: All is COOL!")
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s' datefmt='%Y%m%d_%H%M%S')
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s', datefmt='%Y%m%d_%H%M%S')
logging.debug("Logging Info: All is COOL!")
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s', datefmt='%Y%m%d_%I%M%S %p')
logging.debug("Logging Info: All is COOL!")
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s', datefmt='%Y%m%d_%H%M%S %p')
logging.debug("Logging Info: All is COOL!")
logging.basicConfig(format=' %(asctime)s - %(levelname)s - %(message)s', datefmt='%Y%m%d_%H%M%S %p')
logging.debug("Logging Info: All is COOL!")
logging.basicConfig(format=' %(asctime)s - %(levelname)s - %(message)s', datefmt='%Y%m%d - %H%M%S %p')
logging.debug("Logging Info: All is COOL!")
import logging
logging.basicConfig(format=' -- %(asctime)s - %(levelname)s - %(message)s --', datefmt='%Y%m%d_%H%M%S')
logging.debug("Logging Info: All is COOL!")
logging.error("Logging Info: All is COOL!")
logging.warn("Logging Info: All is COOL!")
logging.debug("Logging Info: All is COOL!")
logging.basicConfig(format=' [ %(asctime)s ] -- %(levelname)s - %(message)s ', datefmt='%Y%m%d_%H%M%S')
logging.debug("Logging Info: All is COOL!")
logging.warn("Logging Info: All is COOL!")
logging.basicConfig(format=' \[ %(asctime)s \] -- %(levelname)s - %(message)s ', datefmt='%Y%m%d_%H%M%S')
logging.warn("Logging Info: All is COOL!")
logging.error("Logging Info: All is COOL!")
logging.basicConfig(format=' \[ %(asctime)s \] -- %(levelname)s - %(message)s ', datefmt='%Y%m%d_%H%M%S')
logging.error("Logging Info: All is COOL!")
logging.basicConfig(format=' [ %(asctime)s ] -- %(levelname)s - %(message)s ', datefmt='%Y%m%d_%H%M%S')
logging.error("Logging Info: All is COOL!")
logging.basicConfig(format=' [ %(asctime)s ] -- %(levelname)s - %(message)s ', datefmt='%Y%m%d_%H%M%S')
import logging
logging.basicConfig(format=' [ %(asctime)s ] -- %(levelname)s - %(message)s ', datefmt='%Y%m%d_%H%M%S')
logging.error("Logging Info: All is COOL!")
logging.warn("Logging Info: All is COOL!")
logging.debug("Logging Info: All is COOL!")
import logging
logging.basicConfig(level=logging.DEBUG, format=' [ %(asctime)s ] -- %(levelname)s - %(message)s ', datefmt='%Y%m%d_%H%M%S')
logging.debug("Logging Info: All is COOL!")
logging.warn("Logging Info: All is COOL!")
import webbrowser
import requests
res = requests.get('http://www.gutenberg.org/cache/epub/1112/pg1112.txt')
print(res.text[:250])
import webbrowser
webbrowser.open('https://www.google.com')
('Zala', 8, 13) = otrok, dni_hs, sni_s
otrok, dni_vs, dni_ns = ('Zala', 8, 13)
print(otrok)
print(dni_vs)
el = ('Zala', 8, 13)
el[0]
import tabulate
a = "A"
b = "B"
a
B
b
(a, b) = (b, a)
a
b
def myname():
	a = "Gregor"
	b = " Redelonghi"
	return (a, b)
nm, srnm = myname()
(nm, srnm) = myname()
a = myname()
def MN():
	a = "GREGOR"
	b = " REDELONGHI"
	return (a, b)
MN()
MN
MN()
print(MN())
T = ('prvi', 2, 3, 4, 5, 6, 7, 'zadnji')
T
prv, *vmsn, zdnj = T
prv
vmsn
zdnj
for e in vmsn:
	print(e)
for e in vmsn: print(e)
for e in vmsn: print(e, end = ' ')
help(print)
for e in vmsn: print(e, sep = ' ', end = '\n')
for e in vmsn: print(e, sep = ' ')
for e in vmsn: print(e, sep = ', ')
help(print)
print(e)
print(vmes)
print(vmsn)
print(vmsn, sep=' ')
for e in vmsn: print(e, sep=' ')
for e in vmsn: print(e, sep=' ', end="\n")
for e in vmsn: print(e, sep=" ", end="\n")
for e in vmsn: print(e, sep=" ", end=" ")
for e in vmsn: print(e, sep="\n", end=" ")
for e in vmsn: print(e, end=" ")
exit
T = (1, 2, 3, 4, 5)
T.len()
T.size()
len(T)
len(T[:-1])
(S1, S2, S3, S4, S5) = T
S1
S2
L = [('P1', 1), ('P2', 2), ('P3', 3), ('P4', 4), ('P5', 5)]
L
D = dict(L)
D
D['P4']
N = 3
D["P" + str(N)] 
ND = {}
for i in range(4):
	ND["var_" + i] = i
	ND["var_" + str(i)] = i
for i in range(4):
	ND["var_" + str(i)] = i
ND
ND = {}
for i in range(4):
	ND["var_" + str(i+1)] = i
ND
ND = {}
for i in range(4):
	ND["var_" + str(i)] = i + 1
ND
for i in range(4):
	print(ND["var_" + str(i)])
Mark = {}
Mark["Name"] = "Mark"
Mark[Surname"] = "Redelonghi"
Mark["Surname"] = "Redelonghi"
Mark["RD"] = "1999-04-17"
Mark["Address"] = "Valvasorjeva ulica5, 1000 Ljubljana"
Mark["e-mail"] = ("mredelonghi@gmail.com", "mark.rede@T-2.net")
Mark["Occupation"] = ("Student", "FRI")
print(Mark)
print(Mark["Occupation"])
for k, v in Mark.values():
	print("{}: {}".format(k, v))
for k, v in Mark.items():
	print("{}: {}".format(k, v))
for k, v in Mark.items():
	print("{0:-15}: {}".format(k, v))
for k, v in Mark.items():
	print("{0:s-15}: {}".format(k, v))
for k, v in Mark.items():
	print("{0:15>}: {}".format(k, v))
for k, v in Mark.items():
	print("{0:<15}: {}".format(k, v))
for k, v in Mark.items():
	print("{0:s>15}: {}".format(k, v))
for k, v in Mark.items():
	print("{0:15>s}: {}".format(k, v))
for k, v in Mark.items():
	print("{0:<15}: {1:}".format(k, v))
for k, v in Mark.items():
	print("{0:<15} {1:}".format(k + ":", v))
for k, v in Mark.items():
	if "Name" in k:
		print("{0:<15} {1:}".format(k + ":", v))
for k, v in Mark.items():
	if "Name" or "Address" in k:
for k, v in Mark.items():
	if "Name" or "Address" in k:
		print("{0:<15} {1:}".format(k + ":", v))
for k, v in Mark.items():
	if ("Name", "Address") in k:
		print("{0:<15} {1:}".format(k + ":", v))
for k, v in Mark.items():
	if "Name", "Address" in k:
for k, v in Mark.items():
	if "Name" | "Address" in k:
		print("{0:<15} {1:}".format(k + ":", v))
for k, v in Mark.items():
	if "Name" \| "Address" in k:
for k, v in Mark.items():
	if "Name" or "Address" in k:
		print("{0:<15} {1:}".format(k + ":", v))
for k, v in Mark.items():
	if "Name" or "Address" in k:
		print("{0:<15} {1:}".format(k + ":", v))
	else:
		continue
for k, v in Mark.items():
for k in Mark.keys():
	if "Name" or "Address" in k:
		print("{0:<15}{1:}".format(k, Mark[k]))
for k in Mark.keys():
	if "Name" or "Address" in k:
		print("{0:<15}{1:}".format(k, Mark[k]))
	else:
		continue
for k in Mark.keys():
	if "Name" or "Address" in k:
		print(k)
for k in Mark.keys():
	if "Name" in k:
		print(k)
for k in Mark.keys():
	if "Name" or "Address" in k:
		print(k)
for k in Mark.keys():
	if "Name" or "Address" in k:
		print(k)
	else:
		continue
for k in Mark.keys():
	if "Name" or "Address" in k:
		continue
for k in Mark.keys():
	if "Name" or "Address" in k:
		print(k)
		break
for k in Mark.keys():
	if "Name" or "Address" in k:
		print(k)
	continue
for k in Mark.keys():
	if k == "Name" or k == "Address":
		print(k)
for k in Mark.keys():
	if k == "Name" or k == "Address":
		print("{0:<15}{1:}".format(k, Mark[k]))
for k in Mark.keys():
	if k == "Name" or k == "Address":
		print("{0:<15}{1:}".format(k + " :", Mark[k]))
Mark["Addres"] = "Valvasorjeva ulica 5, 1000 LJUBLJANA"
print(Mark["Address"])
Mark.remove("Addres")
help(dict)
Mark.pop("Address")
print(Mark)
Mark.pop("Addres")
Mark("Address") = "Valvasorjeva ulica 5, 1000 Ljubljana"
Mark["Address"] = "Valvasorjeva ulica 5, 1000 Ljubljana"
help(dict)
Mark.get("Adres", "Name")
print(Mark[Mark.get("Adres", "Name")])
print(Mark[Mark.get("Address", "Name")])
Gregor = {"age":2018-1968, "dni_ls":1, "dni_hs:19}
Gregor = {"age":2018-1968, "dni_ls":1, "dni_hs":19}
Gregor
var1: str = "one"
var2: int = 3
var1 + vqr2
var1 + var2
def add(n1: int, n2: int) --> str:
def add(n1: int, n2: int) -> str:
	r = n1 + n2
	retnr r
def add(n1: int, n2: int) -> str:
	r = n1 + n2
	return r
add(1, 2) + 5
add(1, 2).replace('eight')
def add(n1: str, n2: str) -> str:
	r = n1 + n2
	return r
add(2, 3)
add(2, 3).repalce(6)
add("2", "3")
add("2", "3").replace("8")
add("2", "3").replace("2", "8")
add(2, 3).replace("2", "8")
S = "KKKKKKKKKKKKKK KKKKKKKKKKKKKKKKKKKKKKKK KKKKKKKKKKKKKK KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK KKKKKKKKKKKKKKKKKKKKKKKKKKK KKKKKKKKKKKKKKKKKKKKKKKKKKK KKKKKKKKK KKKKKKKKKKKKKKKKKKKKKKKKKKKK kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk KKKKKKKKKKKKKKKKKKKKKKKKK KKKKKKKKKKKKKKKkkkkkkkkkkkkk kkk kkkkkkkkkk KKKKKKKKKKKKKKKKKKKKKKKKKKKK KKKKKKKKKK kkkkkkkkkkkkkkkkkkkkk kkkkkk KKKKK kkkkkkkkkkkkkkkk KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK kkkkkkkkkkkkkkkkkkkk"
print(S)
textwrap.wrap(S)
import textwrap
textwrap.wrap(S)
textwrap.wrap(text, 50, S)
textwrap.wrap(S, 50)
print(textwrap.wrap(S, 50))
print(textwrap.wrap(S, 25))
print(textwrap.fill(S, 25))
print(textwrap.fill(S, 50))
print(textwrap.fill(S, 80))
print(textwrap.fill(S, 110))
textwrap.fill(S, 110)
print(textwrap.fill(S, 110))
S = """Prikljuƒçni plinovodi morajo biti izdelani v skladu s predpisom "Gradnja hi≈°nih plinskih prikljuƒçkov za delovni tlak do 4 barov  "DVGW G 459".
Izdelavo, predelave in vzdr≈æevalna dela na plinski napeljavi lahko razen dobavitelja plina opravljajo tudi druga instalacijska podjetja v soglasju z dobaviteljem plina.
Plinska napeljava in njeni posamezni deli morajo biti tak≈°ni, da so varni pri pravilni uporabi. Uporabljeni materiali morajo imeti ustrezne ateste za uporabo zemeljskega plina.
OPIS POTEKA TRASE
Novoprojektirani del plinovoda N-14270, PE110x6.6 se bo v vozli≈°ƒçu ≈°t. 1 navezal na obstojeƒçi plinovod N-14290, jeklo DN150, ki poteka po Prijateljevi ulici. Od tod bo potekal v severovzhodni smeri po Tesarski ulici, po trasi obstojeƒçega dela plinovoda iz jekla DN150 do vozli≈°ƒça ≈°t. 2. Navezava naƒçrtovanega dela plinovoda na obstojeƒçi plinovod v vozli≈°ƒçu ≈°t. 1 se izvede z reducirnim odcepnim T-kosom PE160/110. PE deli odcepnega T-kosa se na obstjeƒçi plinovod nave≈æejo s prehodnima kosoma PE160/jeklo DN150. Takoj za odcepom se v naƒçrtovani plinovod vgradi zaporni element iz PE ZZP110.
V vozli≈°ƒçu ≈°t. 3 se takoj za obstojeƒçim odcepom jeklenega dela plinovoda N-14270, jeklo DN150 iz jeklenega plinovoda N-14250, jeklo DN150, plinovod odre≈æe in na preostali odcep navari jeklena cevna kapa DN150.
Del obstojeƒçega plinovoda 14270, jeklo DN150 med vozli≈°ƒçema ≈°t. 1 in 2 ter ≈°t. 2 in 3 se ukine - odstrani.
Pri kri≈æanju in pribli≈æevanju z ostalimi komunalnimi vodi, je potrebno upo≈°tevati predpisane varnostne odmike in odmike  navedene Tehniƒçnih zahtevah.
"""
print(textwrap.fill(S, 110))
S = """Prikljuƒçni plinovodi morajo biti izdelani v skladu s predpisom "Gradnja hi≈°nih plinskih prikljuƒçkov za delovni tlak do 4 barov  "DVGW G 459".
Izdelavo, predelave in vzdr≈æevalna dela na plinski napeljavi lahko razen dobavitelja plina opravljajo tudi druga instalacijska podjetja v soglasju z dobaviteljem plina.
Plinska napeljava in njeni posamezni deli morajo biti tak≈°ni, da so varni pri pravilni uporabi. Uporabljeni materiali morajo imeti ustrezne ateste za uporabo zemeljskega plina.
OPIS POTEKA TRASE
Novoprojektirani del plinovoda N-14270, PE110x6.6 se bo v vozli≈°ƒçu ≈°t. 1 navezal na obstojeƒçi plinovod N-14290, jeklo DN150, ki poteka po Prijateljevi ulici. Od tod bo potekal v severovzhodni smeri po Tesarski ulici, po trasi obstojeƒçega dela plinovoda iz jekla DN150 do vozli≈°ƒça ≈°t. 2. Navezava naƒçrtovanega dela plinovoda na obstojeƒçi plinovod v vozli≈°ƒçu ≈°t. 1 se izvede z reducirnim odcepnim T-kosom PE160/110. PE deli odcepnega T-kosa se na obstjeƒçi plinovod nave≈æejo s prehodnima kosoma PE160/jeklo DN150. Takoj za odcepom se v naƒçrtovani plinovod vgradi zaporni element iz PE ZZP110.
V vozli≈°ƒçu ≈°t. 3 se takoj za obstojeƒçim odcepom jeklenega dela plinovoda N-14270, jeklo DN150 iz jeklenega plinovoda N-14250, jeklo DN150, plinovod odre≈æe in na preostali odcep navari jeklena cevna kapa DN150.
Del obstojeƒçega plinovoda 14270, jeklo DN150 med vozli≈°ƒçema ≈°t. 1 in 2 ter ≈°t. 2 in 3 se ukine - odstrani.
Pri kri≈æanju in pribli≈æevanju z ostalimi komunalnimi vodi, je potrebno upo≈°tevati predpisane varnostne odmike in odmike  navedene Tehniƒçnih zahtevah.
"""
print(textwrap.fill(S, 110))
S = """Prikljuƒçni plinovodi morajo biti izdelani v skladu s predpisom "Gradnja hi≈°nih plinskih prikljuƒçkov za delovni
tlak do 4 barov  "DVGW G 459".  Izdelavo, predelave in vzdr≈æevalna dela na plinski napeljavi lahko razen
dobavitelja plina opravljajo tudi druga instalacijska podjetja v soglasju z dobaviteljem plina.  Plinska
napeljava in njeni posamezni deli morajo biti tak≈°ni, da so varni pri pravilni uporabi. Uporabljeni materiali
morajo imeti ustrezne ateste za uporabo zemeljskega plina.  OPIS POTEKA TRASE Novoprojektirani del plinovoda
N-14270, PE110x6.6 se bo v vozli≈°ƒçu ≈°t. 1 navezal na obstojeƒçi plinovod N-14290, jeklo DN150, ki poteka po
Prijateljevi ulici. Od tod bo potekal v severovzhodni smeri po Tesarski ulici, po trasi obstojeƒçega dela
plinovoda iz jekla DN150 do vozli≈°ƒça ≈°t. 2. Navezava naƒçrtovanega dela plinovoda na obstojeƒçi plinovod v
vozli≈°ƒçu ≈°t. 1 se izvede z reducirnim odcepnim T-kosom PE160/110. PE deli odcepnega T-kosa se na obstjeƒçi
plinovod nave≈æejo s prehodnima kosoma PE160/jeklo DN150. Takoj za odcepom se v naƒçrtovani plinovod vgradi
zaporni element iz PE ZZP110.  V vozli≈°ƒçu ≈°t. 3 se takoj za obstojeƒçim odcepom jeklenega dela plinovoda
N-14270, jeklo DN150 iz jeklenega plinovoda N-14250, jeklo DN150, plinovod odre≈æe in na preostali odcep navari
jeklena cevna kapa DN150.  Del obstojeƒçega plinovoda 14270, jeklo DN150 med vozli≈°ƒçema ≈°t. 1 in 2 ter ≈°t. 2 in
3 se ukine - odstrani.  Pri kri≈æanju in pribli≈æevanju z ostalimi komunalnimi vodi, je potrebno upo≈°tevati
predpisane varnostne odmike in odmike  navedene Tehniƒçnih zahtevah."""
import textwrap
print(textwrap.fill(S, 80))
S = '''OPIS POTEKA TRASE
Novoprojektirani del plinovoda N-14270, PE110x6.6 se bo v vozli≈°ƒçu ≈°t. 1 navezal na obstojeƒçi plinovod N-14290, jeklo DN150, ki poteka po Prijateljevi ulici. Od tod bo potekal v severovzhodni smeri po Tesarski ulici, po trasi obstojeƒçega dela plinovoda iz jekla DN150 do vozli≈°ƒça ≈°t. 2. Navezava naƒçrtovanega dela plinovoda na obstojeƒçi plinovod v vozli≈°ƒçu ≈°t. 1 se izvede z reducirnim odcepnim T-kosom PE160/110. PE deli odcepnega T-kosa se na obstjeƒçi plinovod nave≈æejo s prehodnima kosoma PE160/jeklo DN150. Takoj za odcepom se v naƒçrtovani plinovod vgradi zaporni element iz PE ZZP110.
V vozli≈°ƒçu ≈°t. 3 se takoj za obstojeƒçim odcepom jeklenega dela plinovoda N-14270, jeklo DN150 iz jeklenega plinovoda N-14250, jeklo DN150, plinovod odre≈æe in na preostali odcep navari jeklena cevna kapa DN150.
Del obstojeƒçega plinovoda 14270, jeklo DN150 med vozli≈°ƒçema ≈°t. 1 in 2 ter ≈°t. 2 in 3 se ukine - odstrani.
'''
print(textwrap.fill(S, 80))
import textwrp
import textwrapp
import textwrap
print(textwrap.fill(S, 80))
print(textwrap.fill(S, 50))
D = {}
D['Ime'] = 'Gregor Redelonghi'
D['Naslov'] = 'Valvasorjeva ulica 5, 1000 Ljubljana'
D['OPOMBA'] = 'OPIS POTEKA TRASE
Novoprojektirani del plinovoda N-14270, PE110x6.6 se bo v vozli≈°ƒçu ≈°t. 1 navezal na obstojeƒçi plinovod N-14290, jeklo DN150, ki poteka po Prijateljevi ulici. Od tod bo potekal v severovzhodni smeri po Tesarski ulici, po trasi obstojeƒçega dela plinovoda iz jekla DN150 do vozli≈°ƒça ≈°t. 2. Navezava naƒçrtovanega dela plinovoda na obstojeƒçi plinovod v vozli≈°ƒçu ≈°t. 1 se izvede z reducirnim odcepnim T-kosom PE160/110. PE deli odcepnega T-kosa se na obstjeƒçi plinovod nave≈æejo s prehodnima kosoma PE160/jeklo DN150. Takoj za odcepom se v naƒçrtovani plinovod vgradi zaporni element iz PE ZZP110.
D
D['OPOMBA'] = 'Novoprojektirani del plinovoda N-14270, PE110x6.6 se bo v vozli≈°ƒçu ≈°t. 1 navezal na obstojeƒçi plinovod N-14290, jeklo DN150, ki poteka po Prijateljevi ulici. Od tod bo potekal v severovzhodni smeri po Tesarski ulici, po trasi obstojeƒçega dela plinovoda iz jekla DN150 do vozli≈°ƒça ≈°t. 2. Navezava naƒçrtovanega dela plinovoda na obstojeƒçi plinovod v vozli≈°ƒçu ≈°t. 1 se izvede z reducirnim odcepnim T-kosom PE160/110. PE deli odcepnega T-kosa se na obstjeƒçi plinovod nave≈æejo s prehodnima kosoma PE160/jeklo DN150. Takoj za odcepom se v naƒçrtovani plinovod vgradi zaporni element iz PE ZZP110.'
D
for k, v in D.items():
import textwrap
for k, v in D.items():
	print("{}: \t{}", k, textwrap.fill(v, 50))
for k, v in D.items():
	print("{}: \t{}".format(k, textwrap.fill(v, 50)))
	print("{}: \n{}".format(k, textwrap.fill(v, 50)))
for k, v in D.items():
	print("{}: \n{}".format(k, textwrap.fill(v, 50)))
	print("{}: \n{}\n".format(k, textwrap.fill(v, 50)))
for k, v in D.items():
	print("{}: \n{}\n".format(k, textwrap.fill(v, 50)))
for k, v in D.items():
	print("{}: \n{<100}\n".format(k, textwrap.fill(v, 50)))
for k, v in D.items():
	print("{}: \n{<100}\n".format(k, textwrap.fill(v, 50)))
for k, v in D.items():
	print("{}: \n{:<100}\n".format(k, textwrap.fill(v, 50)))
for k, v in D.items():
	print("{}: \n{:>100}\n".format(k, textwrap.fill(v, 50)))
for k, v in D.items():
	print("{:<100}: \n{}\n".format(k, textwrap.fill(v, 50)))
	print("{:<100}: {}\n".format(k, textwrap.fill(v, 50)))
for k, v in D.items():
	print("{:<100}: {}\n".format(k, textwrap.fill(v, 50)))
for k, v in D.items():
	print("{:<100}: {}\n".format(k, textwrap.fill(v, 50)))
D
D = {}
D["A"] = "Prvi"
D["B"] = "Drugi"
D["Tekst"] = '''Novoprojektirani del plinovoda N-14270, PE110x6.6 se bo v vozli≈°ƒçu ≈°t. 1 navezal na obstojeƒçi plinovod N-14290, jeklo DN150, ki poteka po Prijateljevi ulici.
Od tod bo potekal v severovzhodni smeri po Tesarski ulici, po trasi obstojeƒçega dela plinovoda iz jekla DN150 do vozli≈°ƒça ≈°t. 2.
- generalmo
- generalno
- generalno 2 15.10.2018,
... itd ...
Navezava naƒçrtovanega dela plinovoda na obstojeƒçi plinovod v vozli≈°ƒçu ≈°t. 1 se izvede z reducirnim odcepnim T-kosom PE160/110. PE deli odcepnega T-kosa se na obstjeƒçi
plinovod nave≈æejo s prehodnima kosoma PE160/jeklo DN150. Takoj za odcepom se v naƒçrtovani plinovod vgradi zaporni element iz PE ZZP110.
'''
D
print(D['Tekst'])
import textwrap
print(textwrap.fill(D['Tekst'], 80))
for k, v in D.items():
	print("Field: {}:\n{}\n".format(k, v))
for k, v in D.items():
	print("{}:\n{}\n".format(k, v))
D = {}
D['A'] = "- Line 1\n- Line2"
D['A']
print(D['A'])
D['A'] = str(D['A']) + "\n- line 3"
D['A']
print(D['A'])
D['A'] = D['A'] + "\n- line 4"
print(D['A'])
D['A'] += "\n- line 5"
print(D['A'])
D.empty()
help(D)
D.clear()
D
D['A'] = 'My first Line'
D['B'] = '''Mah to je zdej, kr en gonja
proti tistim, k misljo,
da kej vejo.'''
D
print(D)
for k, v in D:
	print(k + "\n" + v + "\n")
for k, v in D.items():
	print(k + "\n" + v + "\n")
D['B'] += '''No pa poglejmo:
	A je zdej kej bolj jasno??'''
for k, v in D.items():
	A je zdej kej bolj jasno??'''
for k, v in D.items():
	print(k + "\n" + v + "\n")
D = {}
D['a'] = """Ta prvi vnos z dne 15.09.2018:
- izkopi
- posnetek obst k
"""
D
S = '''vnos: 20181010:
- sprememba poteka trase po interventni cesti,
- sprememba lokacije prikljuƒçka
- geodetski posnetek,
- vpis v GD
'''
S
D['a'] += "\n" + S
D
print(D['a']
)
S2 = input("Nov vnos: ")
kaj za vraga
S2 = ""
while S != 'done':
	S2 += input("Vnos")
prva stran
druga stran
tretja stran
done
S2
S2 = ""
while input != '':
	S2 += input()
Prva vrstica
Druga vrstica
S2
S2 = ""
while input() != '':
	S2 += input()
prva vrsta
druga vrsta
S2
S2 = ""
while input() != '':
	S2 += input() + "\n"
prvavrsta
druga vrsta
tretja vrsta
S2
while input() != '':
	S2 = S2 + input() + "\n"
Prva
Druga
Tretja
ƒåetrta
S2
S2 = ""
while input() != '':
	S2 = S2 + input() + "\n"
Prva
Druga
Tretja
ƒåetrta
S2
S2 = ""
import sys
mytxt = sys.stdin.readlines()
mytxt
S2
for el in mytxt:
	S2 += mytxt
for el in mytxt:
	S2 += el
S2
print(S2)
S3 = ""
while input() != '':
	S3 = "\n".join(input())
Prva
Druga
Tretja
ƒåetrta
S3
while true:
	data=input()
	if not data: break
	yirld data + "\n"
while true:
	data=input()
	if not data: break
	yield data + "\n"
def minput()
	while True:
		data=input()
		if not data: break
		yield data + "\n"
	return
def minput()
	while True:
		data=input()
		if not data: break
		yield data + "\n"
	return
def minput():
	while True:
		data=input()
		if not data: break
		yield data + "\n"
minput()
L = list(minput())
Prva
Druga
Tretja
L
def minput()
	while True:
		data=input()
		if not data: break
		yield data
	return
def minput()
    while True:
        data=input()
        if not data: break
        yield data
def minput():
    while True:
        data=input()
        if not data: break
        yield data
    return
L = list(minput())
A
B
C
L
'\n'.join(L)
print('\n'.join(L))
L = []
def minput():
	while True:
		data=input()
		if not data: break
		yield data
	return
L = list(minput())
vnos 20181010:
- geodetski posnetek
- manj≈°i popravki
- gg
L
S = "\n".join(L)
print(S) 
name = "GREGOR"
sname = "Redelonghi"
S = "Name: {}, Surname: {}.\n".format(name, sname)
print(S)
L = [['prvi', 'masa', (15, 80)], ['drugi', 'masa', (22, 98)], ['tretji', 'masa', (44, 68]]
L = [['prvi', 'masa', (15, 80)], ['drugi', 'masa', (22, 98)], ['tretji', 'masa', (44, 68)]]
L[0][1]
for i in L:
	print(i)
	print("{} -->\t{}: {}m -- {}kg".format(i[0], i[1], i[2][0], i[2][1]))
for i in L:
	print("{} -->\t{}: {}m -- {}kg".format(i[0], i[1], i[2][0], i[2][1]))
	print("{} -->{}: {}m\t{}kg".format(i[0], i[1], i[2][0], i[2][1]))
for i in L:
	print("{} -->{}: {}m\t{}kg".format(i[0], i[1], i[2][0], i[2][1]))
	print("{}\t{}: {}m\t{}kg".format(i[0], i[1], i[2][0], i[2][1]))
for i in L:
	print("{}\t{}: {}m\t{}kg".format(i[0], i[1], i[2][0], i[2][1]))
	print("{}\t{}: {}m\tte≈æa: {}kg".format(i[0], i[1], i[2][0], i[2][1]))
for i in L:
	print("{}\t{}: {}m\tte≈æa: {}kg".format(i[0], i[1], i[2][0], i[2][1]))
for i in L:
	print("{}\t{}: {}m\tte≈æa: {}kg/m".format(i[0], i[1], i[2][0], i[2][1]))
for i in L:
	ms = i[2][0]
	tzm = i[2][1]
	tz = tzm * ms
	print("{}\t{}: {}m\tte≈æa: {}kg/m\tSkupna te≈æa: {}".format(i[0], i[1], ms, tzm, tz))
for i in L:
	tz = tzm * ms
	ms = i[2][0]
	tzm = i[2][1]
	print("{}\t{}: {}m\tte≈æa: {}kg/m\tSkupna te≈æa: {}kg!".format(i[0], i[1], ms, tzm, tz))
for i in L:
	ms = i[2][0]
	tzm = i[2][1]
	tz = tzm * ms
	print("{}\t{}: {}m\tte≈æa: {}kg/m\tSkupna te≈æa: {}kg!".format(i[0], i[1], ms, tzm, tz))
L
import json
D = {}
D['Ime'] = 'Gregor'
D['Priimek'] = 'Redelonghi'
D['Naslov'] = ['Valvasorjeva ulica', 5]
D['Kraj'] = ['Ljubljana', 1000]
D
with open('JAZ.json', mode='w', encoding='utf-8') as f:
	json.dump(D, f)
with open('JAZ.json', mode='w', encoding='utf-8') as f:
	json.dump(D, f, indent=4)
 with open('JAZ.json', mode='r', encoding='utf-8') as f:
with open('JAZ.json', mode='r', encoding='utf-8') as f:
	entry = json.load(f)
entry
type(entry)
entry['Naslov']
U, S = entry['Naslov']
U
S
entry
with open('JAZ.json', mode='r', encoding='utf-8') as f:
	entry = json.load(f)
import json
with open('JAZ.json', mode='r', encoding='utf-8') as f:
	entry = json.load(f)
entry
import json
with open('JAZ.json', mode='r', encoding='utf-8') as f:
	entry = json.load(f)
type(entry)
entry
for k, v in entry:
for k, v in entry.items():
	print("{}: {}".format(k, v))
for k, v in entry.items():
	if v isList():
for k, v in entry.items():
	if isinstance(v, list):
		for e in v:
			vls = " " + e
	print(k, v, vls)
for k, v in entry.items():
	if isinstance(v, list):
		for e in v:
			vls = " " + e
	else:vls = v
for k, v in entry.items():
	if isinstance(v, list):
		for e in v:
			vls = " " + e
	else:vls = v
for k, v in entry.items():
	if isinstance(v, list):
		for e in v:
			vls = " " + e
	else:
		vls = v
	print(k, vls)
for k, v in entry.items():
	if isinstance(v, list):
		for e in v:
			vls = " " + str(e)
	else:
		vls = v
	print(k, vls)
for k, v in entry.items():
	if isinstance(v, list):
		for e in v:
			vls = vls + " " + str(e)
	else:
		vls = v
	print(k, vls)
for k, v in entry.items():
	print(k, end=" ")
	if isinstance(v, list):
		for e in v:
			vls = vls + " " + str(e)
	else:
		vls = v
	print(vls)
for k, v in entry.items():
	print(k, end=" ")
	if isinstance(v, list):
		for e in v:
			vls = vls + " " + str(e)
		print(vls)
	else:
		vls = v
		print(vls)
for k, v in entry.items():
	print(k, end=" ")
	if isinstance(v, list):
		for e in v:
			vls = vls + " " + str(e)
		print(vls)
		vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=" ")
	if isinstance(v, list):
		for e in v:
			vls = vls + ", " + str(e)
		print(vls)
		vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	if isinstance(v, list):
		for e in v:
			vls = vls + ", " + str(e)
		print(vls)
		vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	if isinstance(v, list):
		for e in v:
			#vls = vls + ", " + str(e)
			vls = str(e).join(", ")
		print(vls)
		vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	if isinstance(v, list):
		vls = v.join(", ")
		'''
		for e in v:
			#vls = vls + ", " + str(e)
			vls = v.join(", ")
		'''
		print(vls)
		vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	if isinstance(v, list):
		vls = v.join(", ")
		'''
		for e in v:
			#vls = vls + ", " + str(e)
			vls = v.split(", ")
		'''
		print(vls)
		vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	if isinstance(v, list):
		vls = v.split(", ")
		'''
		for e in v:
			#vls = vls + ", " + str(e)
			vls = str(v).join(", ")
		'''
		print(vls)
		vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	if isinstance(v, list):
		vls = list(v).split(", ")
		'''
		for e in v:
			#vls = vls + ", " + str(e)
			vls = str(v).join(", ")
		'''
		print(vls)
		vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	if isinstance(v, list):
		vls = ", ".join(v)
		'''
		for e in v:
			#vls = vls + ", " + str(e)
			vls = str(v).join(", ")
		'''
		print(vls)
		vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	if isinstance(v, list):
		vls = ", ".join(str(v))
		print(vls)
		vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	if isinstance(v, list):
		vls = ", ".join(str(v))
		print(vls)
		vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	if isinstance(v, list):
		vls=""
		for e in v:
			vls += ", " + str(e)
		print(vls)
		vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	vls = ""
	if isinstance(v, list):
		for e in v:
			vls += ", " + str(e)
		print(vls)
		vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	vls = ""
	if isinstance(v, list):
		for e in v:
			vls += ", " + str(e)
			print(vls)
			vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	vls = ""
	if isinstance(v, list):
		for e in v:
			vls += ", " + str(e)
			print(vls, end="")
			vls = ""
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	vls = ""
	if isinstance(v, list):
		for e in v:
			vls += ", " + str(e)
			print(vls, end="")
			vls = ""
		print("\n")
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	vls = ""
	if isinstance(v, list):
		for e in v:
			vls += ", " + str(e)
			print(vls, end="")
			vls = ""
		# print("\n")
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	if isinstance(v, list):
		for e in v:
			vls += ", " + str(e)
			print(vls, end="")
			vls = ""
		# print("\n")
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		# print("\n")
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	#print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	#print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
		vls = ""for k, v in entry.items():
	print("{0:<15}".format(k))
	#print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
for k, v in entry.items():
	print("{0:<15}".format(k))
	# print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print("{0:<15}".format(k + ": "))
	# print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	printf("{0:<15}".format(k + ": "))
	# print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print("{0:<15}".format(k + ": "), end="")
	# print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
		vls = ""
D = {}
D['Ime'] = 'Gregor'
D['Priimek'] = 'Redelonghi'
D['Naslov'] = ['Valvasorjeva ulica', 5]
D['Kraj'] = ['Ljubljana', 1000]
D['E-posta'] = ['gredelonghi@gmail.com', 'rgregor.rgr@gmail.com', 'gregorr@email.si', 'gredelonghi@yahoo.com']
D
with open('JAZ.json', mode='w', encoding='utf-8') as f:
	json.dump(D, f, indent=4)
with open('JAZ.json', mode='r', encoding='utf-8') as f:
	entry = json.load(f)
for k, v in entry.items():
	print("{0:<15}".format(k + ": "), end="")
	# print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
		vls = ""
D = {}
D['ime'] = 'Gregor'
D['priimek'] = 'Redelonghi'
D['naslov'] = ['Valvasorjeva ulica', 5]
D['kraj'] = ['Ljubljana', 1000]
D['e-posta'] = ['gredelonghi@gmail.com', 'rgregor.rgr@gmail.com', 'gregorr@email.si', 'gredelonghi@yahoo.com']
D['leto-roj'] = 1968
D
with open('JAZ.json', mode='w', encoding='utf-8') as f:
	json.dump(D, f, indent=4)
with open('JAZ.json', mode='r', encoding='utf-8') as f:
	entry = json.load(f)
entry
for k, v in entry.items():
	print("{0:<15}".format(k + ": "), end="")
	# print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print("{0:<15}".format(k.capitalize() + ": "), end="")
	# print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
		vls = ""
for k, v in entry.items():
	print("{0:<15}".format(k.capitalize() + ": "), end="")
	# print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
		vls = ""
D = {}
D['ime'] = 'Gregor'
D['priimek'] = 'Redelonghi'
D['naslov'] = ['Valvasorjeva ulica', 5]
D['kraj'] = ['Ljubljana', 1000]
D['e-posta'] = ['gredelonghi@gmail.com', 'rgregor.rgr@gmail.com', 'gregorr@email.si', 'gredelonghi@yahoo.com']
D['leto-rojstva'] = 1968
with open('JAZ.json', mode='w', encoding='utf-8') as f:
	json.dump(D, f, indent=4)
with open('JAZ.json', mode='r', encoding='utf-8') as f:
	entry = json.load(f)
for k, v in entry.items():
	print("{0:<15}".format(k.capitalize() + ": "), end="")
	# print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
		vls = ""
with open('JAZ.json', mode='r', encoding='utf-8') as f:
	entry = json.load(f)
for k, v in entry.items():
	print("{0:<15}".format(k.capitalize() + ": "), end="")
	# print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
		vls = ""
with open('JAZ.json', mode='r', encoding='utf-8') as f:
	entry = json.load(f)
with open('JAZ.json', mode='r', encoding='utf-8') as f:
	entry = json.load(f)
for k, v in entry.items():
	print("{0:<15}".format(k.capitalize() + ": "), end="")
	# print(k, end=": ")
	if isinstance(v, list):
		L = []
		for e in v:
			L.append(str(e))
		vls = ", ".join(L)
		print(vls)	
		del L
	else:
		vls = v
		print(vls)
		vls = ""
with open('JAZ.json', mode='r', encoding='utf-8') as f:
	entry = json.load(f)
with open('JAZ_2.json', mode='r', encoding='utf-8') as f:
	entry_2 = json.load(f)
def printout(entry):
	for k, v in entry.items():
		print("{0:<15}".format(k.capitalize() + ": "), end="")
		# print(k, end=": ")
		if isinstance(v, list):
			L = []
			for e in v:
				L.append(str(e))
			vls = ", ".join(L)
			print(vls)	
			del L
		else:
			vls = v
			print(vls)
			vls = ""
for name in ['entry', 'entry_2']:
	printout(name)
def printout(entry):
	for k, v in entry.items():
		print("{0:<15}".format(k.capitalize() + ": "), end="")
		# print(k, end=": ")
		if isinstance(v, list):
			L = []
			for e in v:
				L.append(str(e))
			vls = ", ".join(L)
			print(vls)	
			del L
		else:
			vls = v
			print(vls)
			vls = ""
for name in [entry, entry_2]:
	printout(name)
def printout(entry):
	for k, v in entry.items():
		print("{0:<15}".format(k.capitalize() + ": "), end="")
		# print(k, end=": ")
		if isinstance(v, list):
			L = []
			for e in v:
				L.append(str(e))
			vls = ", ".join(L)
			print(vls)	
			del L
		else:
			vls = v
			print(vls)
			vls = ""
	print("\n")
for name in [entry, entry_2]:
	printout(name)
def printout(entry):
	for k, v in entry.items():
		print("{0:<15}".format(k.capitalize() + ": "), end="")
		# print(k, end=": ")
		if isinstance(v, list):
			L = []
			for e in v:
				L.append(str(e))
			vls = ", ".join(L)
			print(vls)	
			del L
		else:
			vls = v
			print(vls)
			vls = ""
	print("")
for name in [entry, entry_2]:
	printout(name)
def printout(entry):
	for k, v in entry.items():
		print("{0:<15}".format(k.capitalize() + ": "), end="")
		# print(k, end=": ")
		if isinstance(v, list):
			L = []
			for e in v:
				L.append(str(e))
			vls = ", ".join(L)
			print(vls)	
			del L
		else:
			vls = v
			print(vls)
			vls = ""
	print("")
printout(entry)
def printout(entry):
	for k, v in entry.items():
		print("{0:<15}".format(k.capitalize() + ": "), end="")
		# print(k, end=": ")
		if isinstance(v, list):
			L = [] # empty list
			for e in v:
				L.append(str(e))
			vls = ", ".join(L)
			print(vls)	
			del L # flush from memmory
		else:
			# vls = v
			print(v)
			# vls = ""
	print("")
printout(entry)
def printout(entry):
	for k, v in entry.items():
		print("{0:<15}".format(k.capitalize() + ": "), end="")
		# print(k, end=": ")
		if isinstance(v, list):
			L = [] # empty list
			for e in v:
				L.append(str(e))
			vls = ", ".join(L)
			print(vls)	
			del L # flush from memmory
		else:
			print(v)
	print()
printout(entry)
type(printout())
type(printout)
type(printout(entry))
type(printout(d))
type(printout())
type(printout)
type(D)
type(L)
type(vls)
def printout(entry):
	for k, v in entry.items():
		print("{0:<15}".format(k.capitalize() + ": "), end="")
		# print(k, end=": ")
		if isinstance(v, list):
			L = [] # empty list
			for e in v:
				L.append(str(e))
			vls = ", ".join(L)
			print(vls)	
			del L # flush from memmory
			del vls # flush from memmory
		else:
			print(v)
	print()
printout(entry)
type(vls)
del vls
type(vls)
printout(entry)
type(vls)
import pandas as np
version
import numpy
import pandas
ST = [1, 2, 3, 4, 5, 6, 7, 8, 9]
ST
KV = list(map(lambda x: x*x, ST))
KV
ST = [x for x in range(0,11)]
ST
KV = list(map(lambda x: x*x, ST))
KV
LL = list(reduce(lambda x, y: x+ y, KV))
import functools as ft
LL = list(ft.reduce(lambda x, y: x+ y, KV))
KV
LL = (ft.reduce(lambda x, y: x+ y, KV))
LL
LL = (ft.reduce(lambda x, y: x+ y, KV.append(115.2))
LL = (ft.reduce(lambda x, y: x+ y, KV.append(115))
LL = ft.reduce(lambda x, y: x+ y, KV.append(115.2))
KV
LL = ft.reduce(lambda x, y: x+ y, KV)
LL
print(ft.reduce(lambda x, y: x if (x > y) else y, [1, 100, 200, 65, -300, 705, 55, 3, 91])
5y
print(ft.reduce(lambda x, y: x if (x > y) else y, [1, 100, 200, 65, -300, 705, 55, 3, 91]))
print(ft.reduce(lambda x, y: x if (x < y) else y, [1, 100, 200, 65, -300, 705, 55, 3, 91]))
def result(x):
	return 2 * x
result(2)
a = (1, 2, 3, 4, 5)
result(*a)
result(a)
scnds = 500
mnts = 500/60
scnds = 500%60
mnts
scnds
mnts = int(500/60)
mnts
scnds
5**2
5**0.5
4**0.5
4**-2
1/(4**-2)
1/16
age = 24
W = 140
(age > 18) && (W <= 140)
(age > 18) and (W <= 140)
(age < 18) and (W <= 140)
(age > 28) and (W <= 140)
(age > 28) && (W <= 140)
(age > 28) ^ (W <= 140)
(age > 28) || (W <= 140)
(age > 28) | (W <= 140)
90 / 10
90 % 10
95 / 10
int(95 / 10)
95%10
for N in range(1, 13):
	print(N)
for N in range(1, 13):
	print(N % 12)
for N in range(0, 13):
	print(N % 12)
for N in range(1, 13):
	print(N % 12)
-7 % 6
-9 % 4
for YR in range(1968, 2019):
	YR % 12
for YR in range(1968, 2019):
	print("{}:\t{}".format(YR, YR % 12))
Math.ceil(2.1)
import Math
import math
math.ceil(2.0)
math.ceil(2.1)
math.ceil(2.9)
math.floor(2.0)
math.floor(2.9)
math.max(2.9, 3.2)
def max(a, b):
	println(if a > b ? a : b)
def max(a, b):
	println(a if a > b: else b)
def max(a, b):
	println(a if a > b : else b)
def max(a, b):
	println(a if a > b  else b)
max(5, 3)
def max(a, b):
	print(a if a > b  else b)
def max(a, b):
max(5,3)
max(5,3.0)
max(5.2,3.0)
max(5.2,6)
max(5.2,6.1)
max(5.2,-6.1)
def max(a, b):
	return a if a > b  else b
max(5,8)
max(5,-8)
gcd = 1
k = 2
10000*(1 + (5/100))
a, *b, c = ("A", "BE", "CE", "DE", z)
a, *b, c = ("A", "BE", "CE", "DE", "z")
a
b
c
print(b)
print(*b)
print(*b, sep = ", ")
print(*b, sep = ", ", end = "!")
print(*b, sep = ", ", end = "!\n")
N = 100000000
for i in range(N):
	if i % 1000000 == 0:
		print(i)
for i in range(N):
N = 100000000
for i in range(N + 1):
	if i % 1000000 == 0:
		print(i)
N = 100000000
for i in range(1, N + 1):
	if i % 1000000 == 0:
		print(i)
end = 100000000
while True:
end
i = 1
while True:
	i = i + 1
	if i >= end:
		print(i)
		break
while True:
	i = i + i
	if i >= end:
		print(i)
		break
Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}
print("Students Name: %s" % list(Dict.items()))
print("Students Name: %s" % list(Dict.keys()))
print("Students Name: %s" % list(Dict.values()))
Dict.keys()
list(Dict.keys())
L1 = ['A', 'B', 'C']
L2 = ['D', 'A', 'E']
if L1 in L2:
	print('OK')
else:
	print('NaN')
set(L1) & set(L2)
if set(L1) & set(L2) != {}:
	PRINT('ok')
if set(L1) & set(L2) != {}:
	print('ok')
L1 = ['A', 'B', 'C', 'D', 'E']
Li.keys()
L1.keys()
D1 = {'A': 1, 'B':2, 'C':3, 'D':4, 'E':5}
d1
D1
D1.keys()
list(D1.keys())
for K in list(D1.keys()):
	print(K)
for K in list(D1.keys()):
	print(D1[K[0]], D1[K[1]])
for K in list(D1.keys()):
	print(D1[K[0]], D1[K[1]])
for K in list(D1.keys()):
	print(K[0], K[1])
for K in len(list(D1.keys())):
	print(K[0], K[1])
K
L1 = list(D1.keys())
L1
print(L1[0], L1[1])
tuple(L1[0], L1[1])
tuple(list(L1[0], L1[1]))
print(list(L1[0], L2[1]))
T = ()
T = (L1[0], L1[1])
T
L = ['A', 'B', 'A', 'C', 'B', 'D', 'E', 'F', 'A']
S = set()
for el in L:
	S.add(el)
S
[(S[i], S[j]) for i in range(len(S)) for j in range(i+1, len(S))]
S1 = list(S)
S1
[(S1[i], S1[j]) for i in range(len(S1)) for j in range(i+1, len(S1))]
zip(["a", "b", "c"], [1, 2, 3])
list(zip(["a", "b", "c"], [1, 2, 3]))
list(zip(["a", "b", "c"], [1, 2, 3, 4]))
list(+zip(["a", "b", "c"], [1, 2, 3, 4]))
list(*zip(["a", "b", "c"], [1, 2, 3, 4]))
print(*list(zip(["a", "b", "c"], [1, 2, 3, 4])))
print(list(zip(["a", "b", "c"], [1, 2, 3, 4])))
print(*list(zip(["a", "b", "c"], [1, 2, 3, 4])))
set(["A", "B", "C", "A", "B", "D"])
set(["A", "B", "C", "A", "B", "D"]).sotred()
set(["A", "B", "C", "A", "B", "D"].sorted())
sorted(set(["A", "B", "C", "A", "B", "D"]))
-1 + -5
-1 > -5
-1 < -5
seznam = [3, 4, -1, -5, 7, 8, -9, -7]
seznam
S2= []
S2[0]
S2
S2[0] = seznam[0]
S2[1] = seznam[0]
S2[1] = 1
S2[0]
S2.append(1)
S2
S2[0]
import sys
sys.prefix
import site
site.getsitepackages()
import sys
sys.path
import sys
help(sys)
sys.executable
help(sys)
sys.exec_prefix
sys.path
help(sys)
sys.platform
help(sys)
sys.prefix
help(sys)
sys.version
sys.version_info
sys.version
help(sys)
print(Math.PI)
import Math
import math
print(math.PI)
print(math.pi
)
print(math.pi)
help(math)
print(math.sqrt(4))
print(math.sqrt(4)/2)
print(math.sqrt(2)/2)
print(math.cos(math.sqrt(2)/2))
print(math.cos(math.sqrt(3)/2))
print(math.sin(math.sqrt(3)/2))
print(math.sin(math.sqrt(2)/2))
print(math.sin(math.sqrt(2)))
print(math.cos(math.sqrt(2)))
print(math.cos(90))
print(math.cos(-90))
print(math.cos(0))
print(math.cos(180))
print(math.cos(270))
print(math.cos(360))
print(math.cos(0))
print(math.sin(0))
print(math.cos(0))
print(math.cos(90))
print(math.sin(90))
print(math.sin(0))
print(math.sin(math.pi))
print(math.sin(2*math.pi))
print(math.cos(2*math.pi))
print(math.cos(math.pi))
print(math.cos(3*math.pi))
print(math.cos(4*math.pi))
print(math.cos(math.pi))
print(math.cos(2*math.pi))
print(math.cos(2*math.pi/3))
print(math.cos(2*math.pi/2))
from tkinter import *
name = "Gredelonghi.1968"
print(list(name))
def power_generator(num):
    # Create the inner function
    def power_n(power):
        return num ** power
    return power_n
power_two = power_generator(2)
power_three = power_generator(3)
print(power_two(8))
print(power_three(4))
def power_generator(num):
    # Create the inner function
    def power_n(power):
        return num ** power
    return power_n
power_two = power_generator(2)
power_three = power_generator(3)
print(power_two(8))
print(power_three(4))
S = "This is a " +
S = "This is a " + "first line\nANd this is " + "seond\nline"
print(S)
S = "This is a " 
S
S = "This is a " + 
S = "This is a " + \
"second line" 
S
L = ["MINI",
"MANI",
"MO"]
L
def hello(name):
    print(f"Hello, {name}!")
hello("Gregor Redelonghi")
N = "NebukaDnezar III"
hello(N)
N = range(15)
hello(N)
N
N = list(range(15))
N
hello(N)
def nn(N):
	return (N * (N+1)) / 2
nn(10)
nn(3)
nn(100)
hello(nn(1000))
for N in range (10000, 1000):
	print(N)
for N in range (1, 10000, 1000):
	print(N)
for N in range (0, 10000, 1000):
	print(N)
for N in range (0, 10000, 1000):
	print(nn(N))
for N in range(100000):
	if N % 10000 == 0:
		print(nn(N))
for N in range(100000):
	if N % 10000 == 0:
		print(N, nn(N))
for N in range(100001):
	if N % 10000 == 0:
		print(N, nn(N))
for N in range(100001):
	if N*1000 % 10000 == 0:
		print(N, nn(N))
for N in range(100001):
	if N % (N/10000) == 0:
for N in range(100001):
	if N % (N/10000) == 0:
		print(N, nn(N))
for N in range(0, 100001, 1000):
	print(N, nn(N))
for N in range(0, 100001, 1000):
	if N % (N/10000) == 0:
for N in range(0, 100001, 1000):
	if N % 10000 == 0:
		print(N, nn(N))
for N in range(0, 100001, 1000):
	if N % (N * 10000) == 0:
		print(N, nn(N))
L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
L[::-1]
L
RL = [::-1]
RL = L[::-1]
print(L, RL)
print("{}\n{}".format(L,RL))
print(f"{L}\n{RL}")
print(L + "\n" + RL)
print(f"{L}\n{RL}")
print("{L}\n{RL}")
print(f"{L}\n{RL}")
version
version()
help()
2**2
2^2
L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
L
print(functools.reduce(lambda x,y: x+y, L))
print(reduce(lambda x,y: x+y, L))
import functools
print(reduce(lambda x,y: x+y, L))
help(reduce())
help(functools.reduce())
print(functools.reduce(lambda x,y: x+y, L))
print(functools.reduce(lambda x,y: x+y; print(x, y), L))
print(functools.reduce(lambda x,y: x+y, print(x, y), L))
print(functools.reduce(lambda x,y: x+y, L))
L
print(functools.reduce(lambda x,y: x * y, L))
L
L.del(0)
del(L[0])
L
print(functools.reduce(lambda x,y: x * y, L))
print(functools.reduce(lambda x,y: x * (y/2), L))
print(functools.reduce(lambda x,y: x ** 0.5, L))
2 ** 0.5
import os, sys
os.listdir(".")
"Galactica" in os.listdir(".")
"Galactica.jar" in os.listdir(".")
"Galactica*" in os.listdir(".")
import sqlite3
print("reduce.__doc__:", reduce.__doc__)
import reduce
from functools import reduce
import reduce
print("reduce.__doc__:", reduce.__doc__)
from operator import mul
# Here is the docstring for mul:
print("operator.mul.__doc__:", mul.__doc__)
import File
import Math
import math
print(math.__doc__)
from functools import reduce
import mul
from operator import mul
print("reduce(mul, range(1, 5)):", reduce(mul, range(1, 5)))
print("reduce(mul, range(1, 15)):", reduce(mul, range(1, 15)))
movies = []
movie_info = {}
movie_info['file'] = "Movie 1 (2019).mp4"
movie_info['path'] = "/curpath/" + movie_info['file']
movies.append(movie_info)
movies
movie_info = {}
movie_info['file'] = "Movie 2 (1968).mp4"
movie_info['path'] = "/curpath/" + movie_info['file']
movies.append(movie_info)
movies
i = 0
for el in movies:
	print("{} - Movie: {}".format(i, el['file']))
	i += 1
movie_info = {}
movie_info['file'] = "Movie 3 (1970).mp4"
movie_info['path'] = "/curpath/" + movie_info['file']
movies.append(movie_info)
for el in movies:
i = 0
for el in movies:
	i += 1
	print("{} - Movie: {}".format(i, el['file']))
i = 0
for el in movies:
	print("{} - Movie: {}".format(i, el['file']))
for el in movies:
	i += 1
	print("{} - Movie name: {}; Movie path:{}".format(i, el['file'], el['path']))
1024 % 2
1024 % 16
1024 // 16
1024 / 16
1024 // 16
37 / 15
37 // 15
37 % 15
2**8
2**16
2**10
1024//2
// 2
512// 2
import math
math.sqrt(1024)
math.sqrt(1024//1)
math.sqrt(32)
32**32
32**2
1024/2
2**10
math.log2(1024)
1 * 1**10
import pathlib as pl
p = pl.Path('.')
p
p.is_dir()
p.iterdir()
for el in p.iterdir():
	print(el)
for el in p.iterdir():
	if el.is_dir():
		print(el)
for el in p.iterdir():
	if el.is_file():
		print(el)
L = ["Michelangelo", "Raffaello", "Leonardo", "Donnatello", "Carravagio"]
L
for prs in L:
	print(prs)
L[::]
L2 = L[::]
L2
L == L2
len(L)
L[5]
L[5-1]
i = len(L) - 1
i
L.pop(i)
i
L.pop(i)
i = len(L) - 1
i = len(L) - 1; L.pop(i)
L = L2[::]
L
def L_to_L2:
def L_to_L2():
	L2 = L[::]
del L2
L2
L_to_L2()
L2
def L_to_L2():
	L2 = L[::]
	≈óeturn L2
def L_to_L2():
	L2 = L[::]
	≈óeturn L2
L2 = []
def L_to_L2():
	L2 = L[::]
L2
L_to_L2()
L2
def L_to_L2():
	for el in L:
		L2.appemd(el)
L_to_L2()
def L_to_L2():
	for el in L:
		L2.append(el)
def L_to_L2():
L_to_L2()
L2
L
def L2_to_L():
	for el2 in L2:
		L.append(el2)
type(L2_to_L())
type(L_to_L2())
L2
for i in range(len(L2)/2):
	L2.pop(i)
for i in range(int(len(L2)/2)):
	L2.pop(i)
L2
L2.pop(L2[-1])
L2.pop(-1)
L2
L
L = []
L
L2_to_L()
L
L2
L_backup = L[::]
L_backup
for el2 in L2:
	L.append(el2)
L
len(L)/2
len(L)/int(2)
int(len(L)/2)
for i in int(len(L)/2):
	L.pop(-1)
for i in range(int(len(L)/2):
for i in range(int(len(L)/2)):
	L.pop(-1)
for i in range(int(len(L)/2)):
	L.pop(-i)
L
L = []
L2_to_L()
L
for el2 in L2:
	L.append(el2)
L
L.pop(-1)
L
L.append("Carravagio")
L
for i in int(len(L)/2):
	L.pop(-1)
for i in int(len(L)/2):
	print(i)
for i in range(int(len(L)/2)):
	print(i)
for i in range(int(len(L)/2)):
	L.pop(-1)
L
L+2
L*2
L
L = L*2
L
def remove_half(list):
	for i in range(int(len(list)/2)):
		list.pop(-1)
remove_half(L)
L
L4 = L*4
L
L4
remove_half(L4)
L
L4
remove_half(L4)
L4
def remove_half(list):
	for i in range(int(len(list)/2)):
		return list.pop(-1)
L4 = L*4
L4
remove_half(L4)
L4
help(remove_half(L4))
help(remove_half(list))
help(remove_half)
remove_half(L4)
L
L4
def remove_half(list):
	for i in range(int(len(list)/2)):
		dlt = list.pop(-1)
		print(dlt)
L4 = L*4
L4
remove_half(L4)
L4
remove_half(L4)
L4
L == L4
L4 = L*4
L4
def remove_half(list):
	for i in range(int(len(list)/2)):
		print(list.pop(-1))
4
L4
remove_half(L4)
L4
remove_half(L4)
L4
L8 = L*8
L8
while L8 =! L:
while L8 != L:
	remove_half(L8)
N = 0
while L8 != L:
	remove_half(L8)
	N += 1
while L8 != L:
	N +=1
	print("iteration " + str(N) + ":")
	remove_half(L8)
L8
L16 = L*16
def remove_half(list):
	for i in range(int(len(list)/2)):
		print(list.pop(-1), end=" ")
while L16 != L:
N = 0
while L16 != L:
	N +=1
	print("iteration " + str(N) + ":\n---------------------------------------------------\n")
	remove_half(L16)
from pytube import YouTube as yt
streams = yt(https://www.youtube.com/watch?v=4zBnM_uozXM).streams()
streams = yt("https://www.youtube.com/watch?v=4zBnM_uozXM").streams()
streams = yt("https://www.youtube.com/watch?v=4zBnM_uozXM").streams
strams.all()
streams.all()
for str in streams.all():
	print(str)
help(pytube)
help(yt)
help(yt.streams)
help(yt.streams.all())
for str in streams.all():
	if 22 in str:
		print(str)
for str in streams.all():
	print(str)
for str in streams.all():
	if "22" in str:
		print(str)
for str in streams.all():
	str.contains("22"):
for str in streams.all():
	if str.contains("22"):
		print(str)
for str in streams.all():
	if 22 in str(str):
		print(str)
for str in streams.all():
	if "22" in str(str):
		print(str)
for line in streams.all():
	print(line)
import sys
sys.path
(0.6/0.3)
(0.6/0.3) - 2
(0.6/0.3) - 2.0
(0.6/0.2) - 2.0
(0.6/0.2) - 3.0
(0.6/0.2) - 3
(0.6/0.2)
(0.6/0.2)6/2
6/2
6/2 - 3
int(6/2) - 3
int(0.6/0.2) - 3
(0.6/0.2) - 3
0.6/0.2 - 3
0.6/0.2
0.6F/0.2F - 3
flost(0.6F)/float(0.2F) - 3
flost(0.6)/float(0.2) - 3
float(0.6)/float(0.2) - 3
float(0.6f)/float(0.2f) - 3
float(6)/float(2) - 3
6/2
.6/.2
lz4.block
pip3 search lz4
pip3 help
help('modles')
help('modules')
import sys
print(sys.path)
num1 = 100_000
num1
num1^2
num1**2
"{:,}".format(num1)
"{:,}".format(num1**2)
"{:_}".format(num1**2)
"{:.}".format(num1**2)
"{:\.}".format(num1**2)
"{:,}".format(num1**2)
"{:,}".format(num1**2 + 0.2)
"{:,}".format(num1**2 + 0.02)
"{:n}".format(num1**2 + 0.02)
"{:n}".format(num1)
"{:n}".format(num1**2)
"{:,}".format(num1**2)
"{::}".format(num1**2)
"{:':'}".format(num1**2)
"{:'_'}".format(num1**2)
"{:_}".format(num1**2)
"{:;}".format(num1**2)
"{:,}".format(num1**2)
echo $LC_ALL
"{:n}".format(num1**2)
num1 = 10000
"{:n}".format(num1**2)
"{:.}".format(num1**2)
"{:,}".format(num1**2)
"{:,}".format(num1**2 + 0.002)
idle
IDLE
import pandas
import scipy
import numpy
import pandas
ime = "Gregor"
age = 51
print(f"{ime) is {age} years old!")
print(f"{ime)")
print(f"{ime} is {age} years old!")
print(f"{ime} is {age} years old! Bye {}")
print(f"{ime} is {age} years old! Bye {jj = "Cool"}")
print(f"{ime} is {age} years old! Bye {jj = \"Cool\"}")
print(f"{ime} is {age} years old! Bye {}".format("Cool"))
print(f"{ime} is {age:10} years old!")
print(f"{ime} is {age:^10} years old!")
print(f"{ime} is {age:.^10} years old!")
print(f"{ime} is {age:_^10} years old!")
print(f"{ime} is {age:_^6} years old!")
"120048".isdigit()
"120,048".isdigit()
"120,048".isnumeric()
"120+048".isnumeric()
"120*048".isnumeric()
"120048".isnumeric()
s = '2' + '\u00B2'
print(s)
S = "5¬∞"
print(S)
NM = "Gregor"
print(NM[::-1])
print(NM[::-2])
print(NM[::])
print(NM[::-1])
N2 = "Gregor Redelonghi"
print(N2[:indexof(" ")])
print(N2[:N2.index(" ")])
print(N2[N2.index(" ")]:)
print(N2[N2.index(" ")]::)
print(N2[N2.index(" "):])
print(N2[N2.index(" ")+1:])
def E(n):
	return (1 + 1/n)**n
E(1)
E(2)
for i in range (1, 10000, 1000):
	print("{:>6} {}".format(i, E(i)))
for i in range (0, 100001, 1000):
	print("{:>6} {}".format(i, E(i)))
for i in range (0, 100001, 1000):
for i in range (1, 100001, 1000):
	print("{:>6} {}".format(i, E(i)))
(1/2)+(5**0.5)/2
import curses
import curses, traceback
[one_combination; for n in range(4, 13); for one_combination in itertools.combinations_with_replacement('abc', n)]
[one_combination for n in range(4, 13); for one_combination in itertools.combinations_with_replacement('abc', n)]
[one_combination for n in range(4, 13) for one_combination in itertools.combinations_with_replacement('abc', n)]
import itertools
[one_combination for n in range(4, 13) for one_combination in itertools.combinations_with_replacement('abc', n)]
import site
site.getsitepackages()
def double(N):
	N = N*2
	return N
L = [1, 2, 3, 4, 5, 6, 7, 8, 9]
L2 = map(L, double)
L2 = map(double, L)
L2
print(L2)
print(list(L2))
print(list(map(double, L)))
L3 = [x * 3 for x in range(11)]
L3
print([x ** 3 for x in range(11)])
print([x ** 3 for x in range(11) if x % 2 == 0])
import pdb_example.py
import pdb_example
import pdb
pdb_example.Student(5).print_std()
pdb.run(pdb_example.Student(5).print_std())
pdb.run('pdb_example.Student(5).print_std()')
continue
ID0 = 2019040100
T = {}
for i in range(20):
ID0 = 2019040100
j = 100
T = {}
for i in range(20):
	ID0 += 1
	T[ID0] = ++j
T
for i in range(20):
	ID0 += 1
	j += 1
	
t
T
T = {}
for i in range(20):
	j += 1
	ID0 += 1
	T[ID0] = j
T
for k, v in T.items():
	print(k:\tV)
	print(k + ": " + V)
for k, v in T.items():
	print(k + ": " + V)
for k, v in T.items():
	print(str(k) + ":\t" + str(v))
T
T = {}
ID0 = 0
j = 2019040100
for i in range(100):
	T[ID0++] = j++ 
for i in range(100):
	ID0 +=1
	j += 1
	T[ID0] = j
T
for k, v in T.items():
	print("{}:\t{}".format(k, v))
j = 20190401000
for i in range(100):
	ID0 +=1
	j += 1
	T[ID0] = j
T
for k, v in T.items():
	print("{}:\t{}".format(k, v))
D = {}
D["Tadeja"] = {"priimek": "Redelonghi", "naslov": "Valvasorjeva ulica 5"}
D
D["Gregor"] = {"hobi": ["judo", "hribolazenje"], "visina_cm": 185, "sluzba": "ENERGETIKA LJUBLJANA, d.o.o."} 
D
for k, v in D.items():
	print("{} \t {}".format(k, v))
for k, v in D.items():
	for k1, v1 in v:
		print("{} \t {} \t {}".format(k, k1, v1))
		print("{} {} \t {}".format(k1, v1))
for k, v in D.items():
	for k1, v1 in v:
		print("{} {} \t {}".format(k1, v1))
D
for k, v in D.items():
	print("{}\t{}".format(k, v))
for k, v in D.items():
	print("{}\n".format(v))
	for k1, v1 in v.items():
		print("{}\t{}".format(k1, v1))
for k, v in D.items():
	print("{}\n".format(k))
	for k1, v1 in v.items():
		print("{}\t{}".format(k1, v1))
for k, v in D.items():
	print("{}".format(k))
	for k1, v1 in v.items():
		print("{}\t{}".format(k1, v1))
print()
for k, v in D.items():
...     print("{}".format(k))
...     for k1, v1 in v.items():
...             print("{}\t{}".format(k1, v1))
for k, v in D.items():
	print("{}".format(k))
	for k1, v1 in v.items():
		print("{}\t{}".format(k1, v1))
for k, v in D.items():
	print("{}".format(k))
	for k1, v1 in v.items():
		print("{}:\t{}".format(k1, v1))
	print()
D = {}
D["Tadeja"] = {"priimek": "Redelonghi", "naslov": "Valvasorjeva ulica 5"}
D["Gregor"] = {"hobi": ["judo", "hribolazenje"], "visina_cm": 185, "sluzba": "ENERGETIKA LJUBLJANA, d.o.o."} 
D
display()
def display():
    for k, v in D.items():
        print("{}".format(k))
            for k1, v1 in v.items():
                print("{}:\t{}".format(k1, v1))
    print()
def display():
	for k, v in D.items():
		print("{}".format(k))
		for k1, v1 in v.items():
			print("{}:\t{}".format(k1, v1))
	print()
display()
D["Mark"] = {"Faks": "FRI", "group": "GoBreakers", "hobi": "kolesajenje"}
D
display()
def display():
	for k, v in D.items():
		print("{}".format(k))
		for k1, v1 in v.items():
			print("{}:\t{}".format(k1, v1))
		print()
display()
for k, v in D.items():
	if "hobi" in v:
		print("{}:\t {}".format(k, v["hobi"]))
for k, v in D.items():
		print("{}:\t {}".format(k, v["hobi"].join(', '))
for k, v in D.items():
	if "hobi" in v:
		print("{}:\t {}".format(k, v["hobi"].join(', '))
for k, v in D.items():
	if "hobi" in v:
		print("{}:\t {}".format(k, v["hobi"])
for k, v in D.items():
	if "hobi" in v:
		print("{}:\t {}".format(k, v["hobi"].join(', ')))
for k, v in D.items():
	if "hobi" in v:
		print("{}:\t {}".format(k, v["hobi"].split(', ')))
L = ["ena", "dva", "tri"]
", ".join(L)
for k, v in D.items():
	if "hobi" in v:
		print("{}:\t {}".format(k, ", ".join(v["hobi"])))
for k, v in D.items():
	if "hobi" in v:
		if v["hobi"].isList():
			print("Is LIST")
for k, v in D.items():
	if "hobi" in v:
		if isinstance(v["hobi"], (list,)):
			print("IS LIST!")
for k, v in D.items():
	if "hobi" in v:
		if isinstance(v["hobi"], (list,)):
			print("{}: {}".fortmat(k, ", ",join(v["hobi"])))
		else:
			print("{}: {}".format(k, v["hobi"]))
for k, v in D.items():
	if "hobi" in v:
		if isinstance(v["hobi"], (list,)):
			print("{}: {}".format(k, ", ",join(v["hobi"])))
		else:
			print("{}: {}".format(k, v["hobi"]))
for k, v in D.items():
	if "hobi" in v:
		if isinstance(v["hobi"], (list,)):
			print("{}: {}".format(k, ", ".join(v["hobi"])))
		else:
			print("{}: {}".format(k, v["hobi"]))
aDict = {}
aDict[‚Äútag1‚Äù]=<any data>
aDict["tag1"]=<any data>
N = 1
print(N)
for i in range(100):
    N += 1.13
    print(N)
N = 1
for i in range(100):
    N *= 1.13
    print("{:.3f}".format(N))
N = 1
for i in range(100):
    N *= 1.13
    if i % 5 == 0:
    print("{:<5}: {:.3f}".format(i, N))
N = 1
for i in range(100):
    N *= 1.13
    if i % 5 == 0:
        print("{:<5}: {:.3f}".format(i, N))
N = 1
for i in range(100):
    N *= 1.13
    if i % 5 == 0:
        print("{:<5}: {:.3f}".format(i, N))
N = 1
for i in range(366):
    N *= 1.13
    if i % 5 == 0:
        print("{:<5}: {:.3f}".format(i, N))
N = 1
for i in range(366):
    N *= 1.13
    if i % 5 == 0:
        print("{:<5}: {:.3f}".format(i, N/1000000))
print(10e6)
N = 1
for i in range(366):
    N *= 1.13
    if i % 5 == 0:
        print("{:<5}: {:.3f}".format(i, N/10e9))
N = 1
for i in range(366):
    N *= 1.13
    if i % 5 == 0:
        print("{:<5}: {:.3f}".format(i, N/10e12))
N = 1
for i in range(366):
    N *= 1.13
    if i % 5 == 0:
        print("{:<5} {:.3f}".format(i + ":", N/10e12))
N = 1
for i in range(366):
    N *= 1.13
    if i % 5 == 0:
        print("{:<5} {:.3f}".format(str(i) + ":", N/10e12)
N = 1
for i in range(366):
    N *= 1.13
    if i % 5 == 0:
        print("{:<5} {:.3f}".format(str(i) + ":", N/10e12))
N = 1
for i in range(366):
    N *= 1.13
    if i % 5 == 0:
        print("{:<5} {:.3f}".format(str(i) + ":", N/10e9))
def f(x, l=[]):
    for i in range(x):
        l.append(i * i)
    return l
f(2)
def f(x, l=[]):
	for i in range(x):
		l.appemd(i*i)
	return l
f(2)
def f(x, l=[]):
	for i in range(x):
		l.append(i*i)
	return l
f(2)
f(3, [0, 1, 2])
f(3)
import os
curdir = os.getcwd()
print(curdir)
print(os.path.abspath(curdir))
curdir = os.path(".")
import os
curdir = os.path.dirname (".")
print(curdir)
print(os.path.abspath(curdir))
D = {n
D = {}
len(D)
D["ena"] = 1
len(D)
from pathlib import Path
p = Path(".")
p
p.Resolve()
p.resolve()
p / "file.txt"
p
p2 = p / "file.txt"
p2
p2.resolve()
from pathlib import Path
crpth = Path(".")
crpth.resolve()
crpth.name
PurePath(".")
Path.PurePath(".")
p = Purepath(crpth)
p = PurePath(crpth)
from pathlib import purPath
from pathlib import PurePath
p = PurePath(".")
p
p.name
p.resolve()name
p.resolve()
p
p2 = PurePath.joinpath(crpth, "myfile.txt")
p2
p2.name
p2.resolve()
p2.resolve().name
p2.resolve().parent
p2.is_absolute()
p2.resolve().is_absolute()
Path.cwd()
p2
p2.suffix
Path.home()
name, ext = p2.suffix
p2
p2.name.suffix
p2.suffix
p
p2.stem
print(p2.stem + " " + p2.suffix)
from pathlib import Path
p = Path.getcwd()
p = Path.cwd()
p
p.anchor
p.parent
p.stem
p2 = p / test.txt
p2 = p / "test.txt"
p2
p2.stem
p2.suffix
from pathlib import path
from pathlib import Path
p = Path.cwd()
P
from pathlib import PurPath
from pathlib import PurePath
P2 = PurePath.joinpath(p, "test.txt")
p2
p2 = PurePath.joinpath(p, "test.txt")
p2
p2.stem
p3 = p.joinpath("test2.txt")
p3
p4 = joinpath(p, "test2.txt")
p4 = Path.joinpath(p, "test2.txt")
p4
from pathlib import Path
p = Path.cwd()
p
p.absolute()
p.parts()
p.parts
p.anchor
p.name
p.as_uri
p.as_uri()
p.is_file()
p.is_dir()
import os
os.scandir()
print(os.scandir())
LL = os.scandir()
LL
list(LL)
L1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
L1 = [1, 3, 5, 7, 9, 11]
L1
L2 = [2, 4, 6, 8, 10]
len(L1)
len(L2)
i, j = 0
i=0
j=0
L1
while i<len(L1) and j<len(L2):
	if L1[i] <= L2[j]:
		print(L1[i])
	else:
		print(L2[j])
while i<len(L1) and j<len(L2):
	if L1[i] <= L2[j]:
		print(L1[i])
		i += 1
	else:
		print(L2[j])
		j += 1
D = {}
import sys
sys.getsizeof(D)
D = {1: "Gregor Redelonghi", 2: "Tadeja Mali Redelonghi"}
sys.getsizeof(D)
print(D[2])
addition = lambda x,y: x + y
addition(100, 200)
make_fullname = lambda name, 2ndname: name + 2ndname
make_fullname = lambda name, scndname: name + scndndname
make_fullname("Tadeja", "Mali Redelonghi")
make_fullname = lambda name, sname: name + sname
make_fullname("Tadeja", "Mali Redelonghi")
make_fullname = lambda name, sname: name + " " + sname
make_fullname("Tadeja", "Mali Redelonghi")
mylist = [1, 2, 3, 4]
map(lambda x: x++2, mylist)
list(map(lambda x: x++2, mylist))
list(map(lambda x: print(x, x++2), mylist))
map(lambda x: print(x, x++2), mylist))
map(lambda x: print(x, x++2), mylist)
list(map(lambda x: print(x, x++2), mylist))
list(map(lambda x: print(x, x**2), mylist))
list(map(lambda x: x, x**2, mylist))
list(map(lambda x: x**2, mylist))
import numpy
import pandas
!ls
import numpy as np
import pandas as pd
pd.read_csv('zoo.csv', delimiter = ',')
import numpy as np
import pandas as pd
pd.read_csv('ZOO.csv', delimiter=',')
import numpy as np
import pandas as pd
pd.read_csv('zoo.csv', delimiter = ',')
import numpy as np
import pandas as pd
pd.read_csv('zoo.csv', delimiter = ',')
import numpy as np
import pandas as pd
pd.read_csv('zoo.csv', delimiter = ',')
import numpy as np
import pandas as pd
pd.read_csv('zoo.csv', delimiter = ',')
import numpy as np
import pandas as pd
pd.read_csv('tst.csv', delimiter = ',')
pd.read_csv('tst.csv', delimiter = ',',encoding='mbcs')
import numpy as np
import pandas as pd
pd.read_csv("tst.csv", delimiter=",")
pd.read_csv("tst.csv", delimiter=",", encoding="latin1")
pd.read_csv("tst.csv", delimiter=",", encoding="latin2")
pd.read_csv("tst.csv", delimiter=",", encoding="WINDOWS-1252")
pd.read_csv("tst.csv", delimiter=",", encoding="utf-8")
pd.read_csv("tst.csv", delimiter=",", encoding="ISO-8859-1")
pd.read_csv("tst.csv", delimiter=",", encoding="utf-8")
pd.read_csv('tst.csv', delimiter=',' , encoding="utf-8")
pd.read_csv('tst.csv', delimiter=',' , encoding="UTF-8")
iconv
import numpy as np
import pandas as pd
pd.read_csv('tst.csv', delimiter=',' , encoding="UTF-8")
pd.read_csv('tst.csv', delimiter=',')
pd.read_csv('tst.csv', delimiter=',' , encoding="ISO-8859-1")
pd.read_csv('tst.csv', delimiter=',' , encoding="ISO-8859-2")
pd.read_csv('tst.csv', delimiter=',' , encoding="iso-8859-2")
pd.read_csv('tst.csv', delimiter=',' , encoding="windows-1250")
pd.read_csv('tst.csv', delimiter=',' , encoding="windows-1252")
import chardet
fname = "tst.csv"
r_file = open(fname, 'rb').read()
result = chardet.detect(r_file)
print(result)
pd.read_csv('tst.csv', delimiter=',' , encoding="UTF-8-SIG")
import numpy as np
import pandas as pd
pd.read_csv('tst.csv', delimiter=',' , encoding="UTF-8-SIG")
import chardet
fname = "tst.csv"
r_file = open(fname, 'rb').read()
result = chardet.detect(r_file)
print(result)
import numpy as np
import pandas as pd
pd.read_csv('tst.csv', delimiter=',' , encoding="ascii")
import numpy as np
import pandas as pd
pd.read_csv('tst.csv', delimiter=',' , encoding="utf8")
fname = "SacramentocrimeJanuary2006.csv"
pd.read_csv(fname, delimiter=',')
print(fname)
!cat fname
MS = ['prvi', 'drugi', 'tretji', 'cetrti', 'peti']
MS
MS.append('zadnji')
MS
for item in MS:
MS.length()
MS.length
length(MS)
MS.size()
help(list)
len(MS)
while len(MS) != 0:
	print("Item: {}".format(MS.pop()))
MS
lambda x: x+1
(lambda x: x+1)(3)
add_one = lambda x: x + 1
add_one(4)
lambda x, y: x + y
_(100, 250)
import pandas as pd
pd.read_csv("workingfile.csv")
import pandas as pd
pd.read_csv("workingfile.csv")
import pandas as pd
pd.read_csv("workingfile.csv")
import pandas as pd
pd.read_csv("workingfile.csv")
L = [x**2 for x in range(11)]
L
L = [x**2 for x in range(11) if x%2==0]
L
D = {1:"gregor", 2:"Tadeja", 3:"Zala", 4:"Mark", 5:"Spela"}
D
D.keys()
D.values()
D.items()
L2 = list(D.items())
L2
for el in L2:
	print("Key: {0}; Value: {1}!".format(el[0], el[1]))
import matplotlib
python3 -m pip install matplotlib
print('\n'.join(sys.path))
import sys
print('\n'.join(sys.path))
import os
os.path.abspath(os.path.dirname(__file__))
os.path.abspath(os.path.dirname("."))
os.path.dirname(".")
os.path.abspath(os.path.dirname("."))
pathlib.Path(".").parent.resolve()
import pathlib
pathlib.Path(".").parent.resolve()
pathlib.Path(".")
pathlib.Path(".").parent.resolve()
import sys
print(‚Äô\n‚Äô.join(sys.path))
print("\n".join(sys.path))
import math
sum([0.1, 0.1, 0.1])
math.fsum([0.1, 0.1, 0.1])
L = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
sum(L)
math.fsum(L)
import antigravity
exit
10%10
10%100
10%1000
10%100
10%10
10%100
51%10
51%100
513%1000
513%100
513%10
513%1
513%10
N = 5000
len(N)
len(str(N))
N/len(str(N))
N/10**(len(str(N)))
10**(len(str(N)))
10**(len(str(N))-1)
N/10**(len(str(N))-1)
N
N%10**(len(str(N))-1)
N%10**(len(str(N)))
N%10**(len(str(N))-2)
N%10**(len(str(N))-3)
N%10**(len(str(N)))
N%10**(len(str(N))+1)
N%10**(len(str(N))+2)
10**(len(str(N))+2)
10**(len(str(N))+1)
10**(len(str(N)))
5000%1000
5000%10000
5000%100000
5000%100
5000%10
5000%1
N=12345
N%10**(len(str(N)))
N%10**(len(str(N))-1)
N%10**(len(str(N))-2)
N%10**(len(str(N))-3)
N%10**(len(str(N))-4)
10**(len(str(N))-4)
for 1 in range(0, len(str(N)):
for 1 in range(0, len(str(N))):
	print(N, i, N%(10**(len(str(N))-i))
for 1 in range(0, len(str(N))):
	print( N%(10**(len(str(N))-i) )
for 1 in range(0, len(str(N))):
for i in range(0, len(str(N))):
	print( N%(10**(len(str(N))-i) )
for i in range(0, len(str(N))):
	print(i)
for i in range(0, len(str(N))):
	print(N, i)
for i in range(0, len(str(N))):
	print( N%(10**(len(str(N))-i) )
for i in range(0, len(str(N))):
	print( 10**(len(str(N))-i) )
for i in range(0, len(str(N))):
	print( N, 10**(len(str(N))-i) )
for i in range(0, len(str(N))):
	print( N, N % (10**(len(str(N))-i)) )
	print( N, "%", i, N % (10**(len(str(N))-i)) )
for i in range(0, len(str(N))):
	print( N, "%", i, N % (10**(len(str(N))-i)) )
for i in range(0, len(str(N))):
	print( N, "%", 10**(len(str(N))-i), N % (10**(len(str(N))-i)) )
for i in range(0, len(str(N))):
	exp = 10**(len(str(N))-i
	print( N, "%", exp, N % (10**exp) )
for i in range(0, len(str(N))):
	exp = 10**(len(str(N))-i
	print( N, "%", exp, N % (10**exp) )
for i in range(0, len(str(N))):
	exp = 10**(len(str(N))-i
	print( N, "%", exp, N % (10**exp) )
for i in range(0, len(str(N))):
	exp = 10**(len(str(N))-i
	print(exp)
exp = 10**(len(str(N))-i
for i in range(0, len(str(N))):
exp = 10**(len(str(N))-i)
for i in range(0, len(str(N))):
	exp = 10**(len(str(N))-i)
	print( N, "%", exp, N % (10**exp) )
for i in range(0, len(str(N))):
	exp = 10**(len(str(N))-i)
	print( N, "%", exp, N % exp )
value="KUUL"
print("This is so {value}".format(value=value))
print("This is so {value}".format(value))
print("This is so {value}".format(value=value))
print("This is so {}".format(value))
print(f"This is so {value}")
print("This is so {value}")
print(f"This is so {value}")
import os
os.linesep
help(os)
os.cpu_count()
os.getcwd()
os.getgid()
os.getlogin()
os.getpid()
os.getuid()
os.times()
os.uname()
help(os.uname())
help(os.uname)
print(os.uname_result(sysname))
print("AB"); print("CD")
print("AB".rstrip()); print("CD")
print("AB\n".rstrip()); print("CD")
print("AB\n"); print("CD")
print(‚Äô‚Äô, ‚Äôhome‚Äô, ‚Äôuser‚Äô, ‚Äôdocuments‚Äô, sep=‚Äô/‚Äô)
print('', 'home', 'user', 'documents', sep='/')
print('', 'home', 'user', 'documents')
print('', 'home', 'user', 'documents', sep='/')
print('', 'home', 'user', 'documents', sep='.')
help(cycle)
help(cycle())
import cycle
from itertools import cycle
help(cycle())
help(cycle)
for A in cycle(r'1234567890'):
	print(A)
cycle(r'12'):
cycle(r'12')
A = cycle(['12', '21'])
print(A)
for el in A:
	print(el)
for el in A:
	print(r'\r', el)
for el in A:
	print('\r', el)
	sleep(1)
for el in A:
	print('\r', el)
	time.sleep(1)
import time
for el in A:
	print('\r', el)
	time.sleep(1)
for el in A:
	print('\r', el, en='', sep='', flush=True)
	time.sleep(1)
for el in A:
	print('\r', el, end='', sep='', flush=True)
	time.sleep(1)
B = cycle(["--","\", "|", "/", "--", "\"])
B = cycle(["--", "\\", "|", "/", "--", "\\"])
for el in B:
	print('\r', el, end='', sep='', flush=True)
	time.sleep(1)
B = cycle(["--", "\\", "\|", "/", "--", "\\"])
for el in B:
	print('\r', el, end='', sep='', flush=True)
	time.sleep(1)
B = cycle(["-", "\\", "|", "/", "-", "\\"])
for el in B:
	print('\r', el, end='', sep='', flush=True)
	time.sleep(1)
B = cycle(["---", "\\", "|", "/", "---", "\\"])
for el in B:
	print('\r', el, end='', sep='', flush=True)
	time.sleep(1)
for el in B:
	print('\r', el, end='', sep='', flush=True)
	time.sleep(0.2)
B = cycle(["---", " \\", " |", " /", "---", " \\"])
for el in B:
	print('\r', el, end='', sep='', flush=True)
	time.sleep(0.2)
B = cycle(["---", " \\", " |", " /", "---", " \\", "|", "/"])
for el in B:
	print('\r', el, end='', sep='', flush=True)
	time.sleep(0.2)
B = cycle(["---", " \\", " |", " /", "---", " \\", " |", " /"])
for el in B:
	print('\r', el, end='', sep='', flush=True)
	time.sleep(0.2)
exit
import os
os.listdir(".")
import os
fjls = os.listdir(".")
fjls
for F in fjls:
	if "tmux" in F:
		print(F)
pat = "tmux"
for F in fjls:
	if pat in F:
		print(F)
bign = 198.23456789
print(bigm)
print(bign)
print(bign/2)
print(int(bign/2))
print(int(bign * 100))
print(int(bign * 100)/100)
print(int(bign * 1000)/100)
print(int(bign * 1000)/1000)
print(10e2)
print(1e2)
exp = 1e3
print(exp)
print(int(bign * exp)/exp)
exp = 1e4
print(int(bign * exp)/exp)
def decn(num, exp):
	print(int(num * exp)/exp)
decn(198.123548569756621, 2)
decn(198.123548569756621, 3)
def decn(num, exp):
exp=2
1eexp
1e(exp)
1e2
1Eexp
def decn(num, exp):
	expn = 10**exp
	print(int(num * expn)/expn)
decn(198.123548569756621, 3)
decn(198.123548569756621, 4)
decn(198.123548569756621, 1)
decn(198.123548569756621, 2)
decn(198.123548569756621, 3)
bign
Math.round(bign, 2)
print(Math.round(bign, 2))
print(Math.ceil(1.2))
import Math≈æ
import Math
help(Math)
import math
print(Math.ceil(1.2))
print(math.ceil(1.2))
math.round(bign, 2)
help(round)
round(bign, 2)
round(bign, 3)
round(bign, 4)
big
bign
round(bign, 4)
round(bign, 3)
num = 123,998877665544332211
exp = 1e6
print(exp)
def disp():
	print(int(num * exp) / exp)
disp()
disp
decn(198.123548569756621, 3)
print((2+10)%7)
print((2+100)%7)
print((2+150)%7)
for n in range(100):
	print(n, 2**n)
for n in range(100):
for n in range(101):
	print(n, 2**n)
from decimal import Decimal
for n in range(101):
	print("%d %.2E" % n, 2**n)
	print("%d %.2E" % n, decimal(2**n))
for n in range(101):
	print("%d %.2E" % n, decimal(2**n))
	print("{} {.2E}".format(n, decimal(2**n)))
for n in range(101):
	print("{} {.2E}".format(n, decimal(2**n)))
for n in range(101):
	print("{} {.2E}".format(n, Decimal(2**n)))
for n in range(101):
	print("{} {:.2E}".format(n, Decimal(2**n)))
	print("{} {} {:.2E}".format(n, 2**n, Decimal(2**n)))
for n in range(101):
	print("{} {} {:.2E}".format(n, 2**n, Decimal(2**n)))
p = 0
for n in range(9):
    p += n
    print("."*p)
p = 0
for n in range(11):
    p += n
    print("."*p)
p = 0
for n in range(11):
    p += n
    print(n + " " + n**2 + " " + "."*p)
p = 0
for n in range(11):
    p += n
    print(n + " " + n**2 + " " + "."*p)
    print("{} {} {}.format(n, n**2, "."*p))
p = 0
for n in range(11):
    p += n
    print("{} {} {}.format(n, n**2, "."*p))
p = 0
for n in range(11):
    p += n
    print("{} {} {}".format(n, n**2, "."*p))
p = 0
for n in range(11):
    p += n
    print("{} {}    {}".format(n, n**2, "."*p))
p = 0
for n in range(11):
    p += n
    print("{:-4d} {:}    {}".format(n, n**2, "."*p))
p = 0
for n in range(11):
    p += n
    print("{:4d} {:}    {}".format(n, n**2, "."*p))
p = 0
for n in range(11):
    p += n
    print("{:<4d} {:}    {}".format(n, n**2, "."*p))
p = 0
for n in range(11):
    p += n
    print("{:<4d} {:<5}{}".format(n, n**2, "."*p))
p = 0
for n in range(11):
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
for n in range(15):
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(15):
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(15):
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(19):
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(16):
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(21):
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(1:21):
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(1:21):
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(21):
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(20):
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(1,20):
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(1,20):
    n += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(1,20):
    p = n
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(1,20):
    p += n
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(1,20):
    p += n + 1
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(0,20):
    p += n + 1
    print("{:<4} {:<10}{}".format(n, n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(1,20):
    p += n + 1
    print("{:<4} {:<10}{}".format("2**" + str(n), n**2, "."*p))
p = 0
print("{:<4} {:<10}{}".format("n", "n**2", "graph"))
for n in range(1,20):
    p += n + 1
    print("{:<4} {:<10}{}".format("2**" + str(n), 2**n, "."*p))
p = 0
print("{:<5} {:<10}{}".format("n", "n**2", "graph"))
for n in range(1,20):
    p += n + 1
    print("{:<5} {:<10}{}".format("2**" + str(n), 2**n, "."*p))
p = 0
print("{:<5} {:<10}{}".format("n", "n**2", "graph"))
for n in range(0,20):
    p += n + 2
    print("{:<5} {:<10}{}".format("2**" + str(n), 2**n, "."*p))
p = 0
print("{:<5} {:<10}{}".format("n", "n**2", "graph"))
for n in range(1,20):
    p += n + 1
    print("{:<5} {:<10}{}".format("2**" + str(n), 2**n, "."*p))
p = 0
print("{:<5} {:<10}{}".format("n", "n**2", "graph"))
for n in range(1,20):
    p += n + 1
    print("{:<5} {:<10}{}".format(n, 2**n, "."*p))
p = 0
print("{:<5} {:<10}{}".format("n", "n**2", "graph"))
for n in range(0,20):
    p += n + 1
    print("{:<5} {:<10}{}".format(n, 2**n, "."*p))
p = 0
print("{:<5} {:<10}{}".format("n", "n**2", "graph"))
for n in range(0,20):
    p += n + 2
    print("{:<5} {:<10}{}".format(n, 2**n, "."*p))
p = 0
print("{:<5} {:<10}{}".format("n", "n**2", "graph"))
for n in range(0,20):
    p += n + 1
    print("{:<5} {:<10}{}".format(n, 2**n, "."*p))
P = 0
for n in range(0,20):
    p += n + 1
    print("{:<5} {:<10}{}".format(n, 2**n, "|"*p))
p = 0
for n in range(0,20):
    p += n + 1
    print("{:<5} {:<10}{}".format(n, 2**n, "|"*p))
p = 0
for n in range(0,20):
    p += n + 1
    print("{:<5} {:<10}{}".format(n, 2**n, "#"*p))
 p = 0
for n in range(0,20):
    p += n + 1
    print("{:<5} {:<10}{}".format(n, 2**n, "@"*p))
    p = 0
for n in range(0,20):
    p += n + 1
    print("{:<5} {:<10}{}".format(n, 2**n, "\@"*p))
p = 0
for n in range(0,20):
    p += n + 1
    print("{:<5} {:<10}{}".format(n, 2**n, "\@"*p))
p = 0
for n in range(0,20):
    p += n + 1
    print("{:<5} {:<10}{}".format(n, 2**n, "@"*p))
-135/7
-135%7
135%7
-135%7
globals()
locals()
0.1 + 0.2 - 0.3
2**(0.5)
X = 5
Y = 10
x = 5
y = 10
x = x -y
x
y = x + y
y
x = y - x
x
L = ["Gregor", "RD", 100]
ime, rd, diff = L
ime
rd
diff
1030 % 16
1030 // 16
64 % 16
printf("%x", 1030)
print("%x" % 1030)
1030/16
64.375 % 16
64 % 16
64/16
1030/16
1030%16
64/16
4/16
4%16
4*64+6
4*256+6
1030/16++3
1030/16**3
1030/16**2
1030/16**1
1030%16**3
1030%(16**3)
1030%(16^3)
1030%(16^2)
1030%(16^1)
exit
7%7
(1 - 7) % 7
1 - 7
-6 % 7
6 %7
(1 - 7) % 7
(1 - 1) % 7
0 % 7
0 % 0
0 % 7
1 % 7
2 % 7
6 % 7
7 % 7
-7 % 7
-6 % 7
6 % 7
import subprocess
list_files = subprocess.run(["ls", "-l"])
print("The exit code was: %d" % list_files.returncode)
import subprocess
print("The exit code was: %d" % list_files.returncode)
list_files = subprocess.run(["ls", "-l"])
print(print.__doc__)
import pickle
print(pickle.__doc__)
start = 1250
for i in range(1249):
	print(start)
	start = start - i
start = 1250
for i in range(1, start - 1):
	print(start)
	start = start + (start - i)
start = 1250
for i in range(1, 5):
start = 1250
for i in range(1, 5):
	print(start)
	start = start + (start - i)
for i in range(1, 15):
	print(start)
	start = start + (start - i)
for i in range(1, 15):
	print(float(start/100000))
	start = start + (start - i)
start=1250
for i in range(1, 15):
	print(float(start/100000))
	start = start + (start - i)
9500/(13*0,33*3600)
9500/(13*0.33*3600)
import matplotlib
import sys
sys.implementation.name
sys.implementation.version
2**8
MCN=2**32
MCN
HDDS=2*10**12
HDDS
HDDS/MCN
(HDDS/MCN)*8
(HDDS/MCN)/8
(HDDS/MCN)
exit
exit()
2**32
(2**32) - 11
MNF = (2**32) - 11
2*1024**4
(2*1024**4)/MNF
(2*1024**6)/MNF
(2*1024**3)/MNF
(2*1024**4)/MNF
2**8
2**10
(2**10)**4
((2**10)**4)*2/MNF
((2**10)**4)*1/MNF
512*MNF
2**40
(2**40)*2/MNF
(2**40)*1.5/MNF
(2**40)*2/MNF
2**40*2
2**20
1024**2
2**30
2**40
(273/(273+10))*((12+1.013)/1.013)
(25*1024*8)/(90*60)
N=100
SUM=N(N+1)/2
N=100.0
SUM=N(N+1)/2
SUM=N*(N+1)/2
SUM
L1=[1,2,3,4,5,6,7,8,9,10]
def sum(list):
	sum = 0
	for el in list:
		sum += el
	return sum
sum(L1)
L2=[1,2,3,4,5,7,8,9,10]
sum(L2)
def ss(N):
	sum = N*(N+1)/2
	return sum
ss(10)
ss(10) - sum(L2)
Math.pow(1.01. 365)
Math.pow(1.01, 365)
math.pow(1.01, 365)
pow(1.01, 365)
pow(0.99, 365)
import tkinter as tk
import Tk
import Tkinter
import tkinter
print("≈†pela")
exit
ll
python3 -m pip list
lnum = 1000_000_000L
lnum = 1000_000_000l
lnum = 1000_000_000
print(lnum)
lnum = 1000_000_000_000_000_000
print(lnum)
lnum = 1000_000_000_000_000_000.456
print(lnum)
lnum = 1000_000_000_000_000.456
print(lnum)
lnum = 1000_000_000_000_000_000.456L
lnum = 1000_000_000_000_000_000.456l
lnum = 1000_000_000_000_000_000.456d
for i in [2, 4, 8, 16, 32, 64]:
	print("2^" + i = " + 2^i
for i in [2, 4, 8, 16, 32, 64]:
	print("2^" + i = " + 2^i)
	print("2^{:1} = {:1}.format(i, 2^√Æ))
	print("2^" + i = " + 2^i)
for i in [2, 4, 8, 16, 32, 64]:
	print("2^{:1} = {:1}.format(i, 2^i))
for i in [2, 4, 8, 16, 32, 64]:
	print("2^{:1} = {:1}".format(i, 2^i))
for i in [2, 4, 8, 16, 32, 64]:
	print("2^{:1} = {:1}".format(i, 2**i))
	print("2^{} = {}".format(i, 2**i))
for i in [2, 4, 8, 16, 32, 64]:
	print("2^{} = {}".format(i, 2**i))
(2**32)**2
(2**32)**(0.5)
2 ** 20000
1152921504606846976 / (2**30)
1152921504606846976 / (2**30 - 1)
1152921504606846976 / (2**30)**2
1152921504606846976 / (2**30)
1152921504606846976 // (2**30)
1152921504606846976.0 // (2**30)
1152921504606846976 / (2**30)
L1 = 1152921504606846976 / (2**30)
L1 / (2**30)
print(Math.PI)
print(math.PI)
import math
print(math.PI)
print(math.pi)
C = {0.0889: 20, 0.1683: 22, 0.2191: 30}
for k, v in C:
	print(k, v)
for k, v in C.items():
	print(k, v)
for k, v in C.items():
N=1.0
for range(10):
for end in range(10):
	N = N + (N/2)
for end in range(10):
	N = N + (N/2)
	print(N)
N
N=0
N
for count in range(11):
	print(count)
for count in range(1:11):
for count in range(1,11):
	print(count)
for count in range(1,11):
sum = 1.0
count = 1
500 *100
14500 / 50000
14500 % 50000
14500 //50000
14500 // 50000
14500 % 50000
int(14500 % 50000)
int(14500 / 50000)
int(14500 / 10000)
int(14500 % 10000)
EURS = 500.32567
CENTS = EURS*100
CENTS
round(CENTS, 0)
names = ['Mary', 'Isla', 'Sam']
for i in range(len(names)):
    names[i] = hash(names[i])
print names
print(names)
names = ['Mary', 'Isla', 'Sam']
newnames = map(lambda x: hash(names[x])
newnames = map(lambda x: hash(names[x], names)
newnames = map(lambda x: hash(x), names)
print(newnames)
newnames = map(hash, names)
print(newnames)
names
newnames = map(hash, names)
names
newnames
print(list(newnames))
class Thing:
    def __init__(self, value, color):
        self.value = value
        self.color = color
th = Thing(4, "RED")
print(th)
print(th.color)
th.color = "BLaCK"
print(th.color)
for n in range(6):
	print(11**n)
for n in range(9):
	print(11**n)
for n in range(6):
	print(11**n)
for N in range(1,5):
	print(2**N)
for N in range(1,5):
S=2
for N in range(1,5):
S = S * N
for N in range(1,5):
	S = S * N
	print(S)
S="
S=2
for N in range(1,5):
	S = S + S
	print(S)
S=2
for N in range(1,5):
S = S * N
for N in range(1,5):
	S = S * N
	print(S)
for N in range(1,5):
	S = 2 * N
	print(S)
for N in range(1,6):
	S = 2 * N
	print(S)
n1 = 2
n2 = 4
n1, n2 = n2, n1
prinr(n1, n2)
print(n1, n2)
exit
string1 = "Tis is a %s for only %.2f" %("Bill", "44,75")
string1 = "Tis is a %s for only %.2f" %("Bill", 44.75)
print(string1)
string1 = "Tis is a %s for only %.2f" %("Bill", 44.754758321000)
print(string1)
string1 = "Tis is a %s for only %.3f" %("Bill", 44.754758321000)
print(string1)
